/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2015-02-23 12:15:11.257634
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
x2=IKsin(j[1]);
x3=IKsin(j[3]);
x4=IKcos(j[3]);
x5=IKcos(j[1]);
x6=IKcos(j[2]);
x7=IKsin(j[2]);
x8=IKsin(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[4]);
x11=IKcos(j[5]);
x12=IKsin(j[6]);
x13=IKcos(j[6]);
x14=((IkReal(0.00117999917848486))*(x0));
x15=((IkReal(0.999999303800727))*(x1));
x16=((IkReal(0.00117999917848486))*(x11));
x17=((IkReal(0.999999303800727))*(x8));
x18=((IkReal(0.999999303800727))*(x11));
x19=((IkReal(0.999999303800727))*(x3));
x20=((IkReal(0.00117999917848486))*(x3));
x21=((IkReal(0.999999303800727))*(x2));
x22=((IkReal(1.00000000000000))*(x6));
x23=((IkReal(0.00117999917848486))*(x2));
x24=((IkReal(0.00117999917848486))*(x8));
x25=((x2)*(x7));
x26=((x5)*(x7));
x27=((x5)*(x6));
x28=((IkReal(-1.00000000000000))*(x10));
x29=((IkReal(-1.00000000000000))*(x9));
x30=((x2)*(x3));
x31=((x2)*(x4));
x32=((x4)*(x5));
x33=((((IkReal(-1.00000000000000))*(x15)))+(x14));
x34=((((IkReal(-1.00000000000000))*(x14)))+(x15));
x35=((((IkReal(-0.000381139734650609))*(x0)))+(((IkReal(0.322999775127635))*(x1))));
x36=((((IkReal(-0.000387039730543033))*(x0)))+(((IkReal(0.327999771646639))*(x1))));
x37=((IkReal(1.00000000000000))*(x32));
x38=((((IkReal(0.999999303800727))*(x0)))+(((IkReal(0.00117999917848486))*(x1))));
x39=((IkReal(-1.00000000000000))*(x38));
x40=((((IkReal(0.000387039730543033))*(x1)))+(((IkReal(0.327999771646639))*(x0))));
x41=((((IkReal(0.000381139734650609))*(x1)))+(((IkReal(0.322999775127635))*(x0))));
x42=((x33)*(x7));
x43=((x33)*(x6));
x44=((x35)*(x4));
x45=((x4)*(x41));
x46=((x38)*(x7));
x47=((x27)*(x33));
x48=((((IkReal(-1.00000000000000))*(x37)))+(((x30)*(x6))));
x49=((((IkReal(-1.00000000000000))*(x22)*(x31)))+(((IkReal(-1.00000000000000))*(x3)*(x5))));
x50=((x48)*(x8));
x51=((((IkReal(-0.323000000000000))*(x42)))+(((IkReal(-0.323000000000000))*(x27)*(x39))));
x52=((((IkReal(-0.323000000000000))*(x47)))+(((IkReal(-0.323000000000000))*(x46))));
x53=((((x10)*(x49)))+(((x25)*(x9))));
x54=((((x29)*(x49)))+(((IkReal(1.00000000000000))*(x10)*(x25))));
x55=((x3)*(x52));
x56=((x11)*(x53));
x57=((((x3)*(((((IkReal(-1.00000000000000))*(x46)))+(((IkReal(-1.00000000000000))*(x22)*(x33)*(x5)))))))+(((x31)*(x34))));
x58=((((x3)*(((((IkReal(-1.00000000000000))*(x42)))+(((IkReal(-1.00000000000000))*(x27)*(x39)))))))+(((x31)*(x38))));
x59=((x11)*(x57));
x60=((((x29)*(((((x26)*(x34)))+(((x38)*(x6)))))))+(((x28)*(((((x30)*(x34)))+(((x4)*(((x46)+(x47))))))))));
x61=((((x28)*(((((x4)*(((((x27)*(x39)))+(x42)))))+(((x30)*(x38)))))))+(((x29)*(((((x26)*(x38)))+(x43))))));
IkReal x62=IKsin(j[0]);
IkReal x63=IKcos(j[0]);
IkReal x64=IKcos(j[1]);
IkReal x65=IKsin(j[2]);
IkReal x66=IKcos(j[2]);
IkReal x67=IKcos(j[4]);
IkReal x68=IKsin(j[4]);
IkReal x69=IKsin(j[3]);
IkReal x70=IKcos(j[3]);
IkReal x71=IKsin(j[1]);
IkReal x72=IKcos(j[6]);
IkReal x73=IKsin(j[5]);
IkReal x74=IKcos(j[5]);
IkReal x75=IKsin(j[6]);
IkReal x76=((IkReal(0.00117999917848486))*(x62));
IkReal x77=((IkReal(0.999999303800727))*(x63));
IkReal x78=((x64)*(x65));
IkReal x79=((x64)*(x66));
IkReal x80=((((IkReal(-1.00000000000000))*(x77)))+(x76));
IkReal x81=((((IkReal(-1.00000000000000))*(x76)))+(x77));
IkReal x82=((((IkReal(0.00117999917848486))*(x63)))+(((IkReal(0.999999303800727))*(x62))));
IkReal x83=((IkReal(-1.00000000000000))*(x82));
IkReal x84=((x66)*(x80));
IkReal x85=((x71)*(x81));
IkReal x86=((x71)*(x82));
IkReal x87=((((x69)*(x85)))+(((x70)*(((((x79)*(x80)))+(((x65)*(x82))))))));
IkReal x88=((((x69)*(x86)))+(((x70)*(((((x79)*(x83)))+(((x65)*(x80))))))));
eerot[0]=((((x72)*(((((IkReal(-0.00117999917848486))*(x74)*(((((x68)*(((((x78)*(x82)))+(x84)))))+(((x67)*(x88)))))))+(((IkReal(-0.00117999917848486))*(x73)*(((((x70)*(x86)))+(((x69)*(((((x79)*(x82)))+(((x65)*(x81)))))))))))))))+(((x72)*(((((IkReal(-0.999999303800727))*(x73)*(((((x70)*(x85)))+(((x69)*(((((x79)*(x81)))+(((x65)*(x83)))))))))))+(((IkReal(-0.999999303800727))*(x74)*(((((x67)*(x87)))+(((x68)*(((((x78)*(x81)))+(((x66)*(x82)))))))))))))))+(((x75)*(((((IkReal(-0.00117999917848486))*(x68)*(x88)))+(((IkReal(-0.00117999917848486))*(x67)*(((((x78)*(x83)))+(((x66)*(x81)))))))))))+(((x75)*(((((IkReal(-0.999999303800727))*(x67)*(((((x78)*(x80)))+(((x66)*(x83)))))))+(((IkReal(-0.999999303800727))*(x68)*(x87))))))));
eerot[1]=((((((((IkReal(-0.00117999917848486))*(((((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((IkReal(-0.00117999917848486))*(((((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((IkReal(-0.999999303800727))*(((((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((IkReal(-0.999999303800727))*(((((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((IkReal(-0.00117999917848486))*(((((IkReal(-1.00000000000000))*(((((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-1.00000000000000))*(((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))+(((IkReal(-0.00117999917848486))*(((((IkReal(-1.00000000000000))*(((((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((IkReal(-1.00000000000000))*(((((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((IkReal(-0.999999303800727))*(((((IkReal(-1.00000000000000))*(((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((IkReal(-1.00000000000000))*(((((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((IkReal(-0.999999303800727))*(((((IkReal(-1.00000000000000))*(((((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((IkReal(-1.00000000000000))*(((((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6])))));
eerot[2]=((((IkReal(-1.00000000000000))*(x18)*(x57)))+(((IkReal(-1.00000000000000))*(x16)*(x58)))+(((IkReal(-1.00000000000000))*(x17)*(x60)))+(((IkReal(-1.00000000000000))*(x24)*(x61))));
IkReal x89=((IkReal(1.00000000000000))*(x23));
IkReal x90=((IkReal(1.00000000000000))*(x21));
eetrans[0]=((((IkReal(-1.00000000000000))*(x44)*(x90)))+(((IkReal(-1.00000000000000))*(x45)*(x89)))+(((IkReal(-1.00000000000000))*(x20)*(x51)))+(((IkReal(-1.00000000000000))*(x36)*(x90)))+(((IkReal(-1.00000000000000))*(x19)*(x52)))+(((IkReal(-1.00000000000000))*(x40)*(x89))));
IkReal x91=IKsin(j[0]);
IkReal x92=IKcos(j[0]);
IkReal x93=IKcos(j[2]);
IkReal x94=IKcos(j[1]);
IkReal x95=IKsin(j[2]);
IkReal x96=IKsin(j[6]);
IkReal x97=IKcos(j[4]);
IkReal x98=IKsin(j[4]);
IkReal x99=IKsin(j[1]);
IkReal x100=IKsin(j[3]);
IkReal x101=IKcos(j[3]);
IkReal x102=IKcos(j[6]);
IkReal x103=IKcos(j[5]);
IkReal x104=IKsin(j[5]);
IkReal x105=((IkReal(0.999999303800727))*(x92));
IkReal x106=((IkReal(0.00117999917848486))*(x91));
IkReal x107=((x94)*(x95));
IkReal x108=((x93)*(x94));
IkReal x109=((((IkReal(-1.00000000000000))*(x105)))+(x106));
IkReal x110=((((IkReal(-1.00000000000000))*(x106)))+(x105));
IkReal x111=x82;
IkReal x112=((IkReal(-1.00000000000000))*(x111));
IkReal x113=((x109)*(x93));
IkReal x114=((x110)*(x99));
IkReal x115=((x111)*(x99));
IkReal x116=((((x100)*(x114)))+(((x101)*(((((x108)*(x109)))+(((x111)*(x95))))))));
IkReal x117=((((x100)*(x115)))+(((x101)*(((((x108)*(x112)))+(((x109)*(x95))))))));
eerot[3]=((((x96)*(((((IkReal(0.999999303800727))*(x117)*(x98)))+(((IkReal(0.999999303800727))*(x97)*(((((x110)*(x93)))+(((x107)*(x112)))))))))))+(((x96)*(((((IkReal(-0.00117999917848486))*(x97)*(((((x107)*(x109)))+(((x112)*(x93)))))))+(((IkReal(-0.00117999917848486))*(x116)*(x98)))))))+(((x102)*(((((IkReal(0.999999303800727))*(x103)*(((((x117)*(x97)))+(((x98)*(((x113)+(((x107)*(x111)))))))))))+(((IkReal(0.999999303800727))*(x104)*(((((x100)*(((((x108)*(x111)))+(((x110)*(x95)))))))+(((x101)*(x115)))))))))))+(((x102)*(((((IkReal(-0.00117999917848486))*(x104)*(((((x101)*(x114)))+(((x100)*(((((x108)*(x110)))+(((x112)*(x95)))))))))))+(((IkReal(-0.00117999917848486))*(x103)*(((((x98)*(((((x111)*(x93)))+(((x107)*(x110)))))))+(((x116)*(x97))))))))))));
eerot[4]=((((((((IkReal(0.999999303800727))*(((((IkReal(-1.00000000000000))*(((((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((IkReal(-1.00000000000000))*(((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKsin(j[5]))))+(((IkReal(0.999999303800727))*(((((IkReal(-1.00000000000000))*(((((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((IkReal(-1.00000000000000))*(((((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((IkReal(0.999999303800727))*(((((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((IkReal(0.999999303800727))*(((((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((IkReal(-0.00117999917848486))*(((((IkReal(-1.00000000000000))*(((((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((IkReal(-1.00000000000000))*(((((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((IkReal(-0.00117999917848486))*(((((IkReal(-1.00000000000000))*(((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[3]))*(IKsin(j[1]))))+(((IkReal(-1.00000000000000))*(((((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((IkReal(-0.00117999917848486))*(((((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((IkReal(-0.00117999917848486))*(IKcos(j[0]))))+(((IkReal(-0.999999303800727))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((IkReal(-0.00117999917848486))*(((((((((IkReal(-0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(0.999999303800727))*(IKcos(j[0]))))))*(IKsin(j[1]))*(IKsin(j[3]))))+(((((((((((IkReal(0.00117999917848486))*(IKsin(j[0]))))+(((IkReal(-0.999999303800727))*(IKcos(j[0]))))))*(IKcos(j[1]))*(IKcos(j[2]))))+(((((((IkReal(0.999999303800727))*(IKsin(j[0]))))+(((IkReal(0.00117999917848486))*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6])))));
eerot[5]=((((x18)*(x58)))+(((x17)*(x61)))+(((IkReal(-1.00000000000000))*(x16)*(x57)))+(((IkReal(-1.00000000000000))*(x24)*(x60))));
IkReal x118=((IkReal(1.00000000000000))*(x23));
eetrans[1]=((((IkReal(-1.00000000000000))*(x20)*(x52)))+(((x19)*(x51)))+(((IkReal(-1.00000000000000))*(x118)*(x36)))+(((x21)*(x45)))+(((x21)*(x40)))+(((IkReal(-1.00000000000000))*(x118)*(x44))));
eerot[6]=((((x13)*(((((IkReal(-1.00000000000000))*(x50)))+(((IkReal(-1.00000000000000))*(x56)))))))+(((x12)*(x54))));
eerot[7]=((((x13)*(x54)))+(((x12)*(((x56)+(x50))))));
eerot[8]=((((x53)*(x8)))+(((x11)*(((((IkReal(-1.00000000000000))*(x22)*(x30)))+(x37))))));
eetrans[2]=((IkReal(0.300000000000000))+(((IkReal(0.323000000000000))*(x32)))+(((IkReal(0.328000000000000))*(x5)))+(((IkReal(-0.323000000000000))*(x30)*(x6))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((IkReal(-0.999999303800727))*(r00)))+(((IkReal(-0.00117999917848486))*(r10))));
new_r01=((((IkReal(-0.999999303800727))*(r01)))+(((IkReal(-0.00117999917848486))*(r11))));
new_r02=((((IkReal(-0.999999303800727))*(r02)))+(((IkReal(-0.00117999917848486))*(r12))));
new_px=((((IkReal(-0.999999303800727))*(px)))+(((IkReal(-0.00117999917848486))*(py))));
new_r10=((((IkReal(0.999999303800727))*(r10)))+(((IkReal(-0.00117999917848486))*(r00))));
new_r11=((((IkReal(0.999999303800727))*(r11)))+(((IkReal(-0.00117999917848486))*(r01))));
new_r12=((((IkReal(0.999999303800727))*(r12)))+(((IkReal(-0.00117999917848486))*(r02))));
new_py=((((IkReal(0.999999303800727))*(py)))+(((IkReal(-0.00117999917848486))*(px))));
new_r20=((IkReal(-1.00000000000000))*(r20));
new_r21=((IkReal(-1.00000000000000))*(r21));
new_r22=((IkReal(-1.00000000000000))*(r22));
new_pz=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.00011798686098))+(((IkReal(4.71947443932644))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal x119=(sj5)*(sj5);
dummyeval[0]=((((x119)*((npx)*(npx))))+(((x119)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x120=(sj5)*(sj5);
dummyeval[0]=((((x120)*((npy)*(npy))))+(((x120)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.651000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1000.00000000000))*((npx)*(npx))))+(((IkReal(-1000.00000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((IkReal(-0.651000000000000))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x121=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x121));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x121))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x122=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x122));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x122))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x123=IKcos(j4);
IkReal x124=IKsin(j4);
IkReal x125=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x124)))+(((IkReal(-1.00000000000000))*(cj6)*(x123)*(x125)))+(((npy)*(sj6)*(x123)))+(((IkReal(-1.00000000000000))*(sj6)*(x124)*(x125))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
IkReal x475=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=x475;
evalcond[3]=x475;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x476=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x476));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x476))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x477=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x477));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x477))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x478=IKcos(j4);
IkReal x479=IKsin(j4);
IkReal x480=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(x479)*(x480)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x479)))+(((IkReal(-1.00000000000000))*(npy)*(x478)*(x480)))+(((cj6)*(npx)*(x478))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x481=((cj5)*(npz));
if( IKabs(((gconst17)*(((((npy)*(x481)))+(((IkReal(-0.651000000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(npx)*(x481)))+(((IkReal(0.651000000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst17)*(((((npy)*(x481)))+(((IkReal(-0.651000000000000))*(npy)))))), ((gconst17)*(((((IkReal(-1.00000000000000))*(npx)*(x481)))+(((IkReal(0.651000000000000))*(npx)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x482=IKcos(j6);
IkReal x483=IKsin(j6);
IkReal x484=((IkReal(1.00000000000000))*(npx));
IkReal x485=((npy)*(x483));
evalcond[0]=((((IkReal(-1.00000000000000))*(x483)*(x484)))+(((IkReal(-1.00000000000000))*(npy)*(x482))));
evalcond[1]=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x485)))+(((cj5)*(npz)))+(((npx)*(sj5)*(x482))));
evalcond[2]=((((IkReal(0.651000000000000))*(sj5)))+(x485)+(((IkReal(-1.00000000000000))*(x482)*(x484))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x486=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x486));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x486))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x487=IKcos(j4);
IkReal x488=IKsin(j4);
IkReal x489=((IkReal(1.00000000000000))*(npx));
IkReal x490=((cj5)*(x487));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x488)))+(((IkReal(-1.00000000000000))*(sj6)*(x488)*(x489)))+(((npz)*(sj5)*(x487)))+(((npy)*(sj6)*(x490)))+(((IkReal(-1.00000000000000))*(cj6)*(x489)*(x490))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x491=((gconst16)*(sj5));
if( IKabs(((IkReal(651.000000000000))*(npy)*(x491))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-651.000000000000))*(npx)*(x491))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((IkReal(651.000000000000))*(npy)*(x491)), ((IkReal(-651.000000000000))*(npx)*(x491)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x492=IKcos(j6);
IkReal x493=IKsin(j6);
IkReal x494=((IkReal(1.00000000000000))*(npx));
IkReal x495=((npy)*(x493));
evalcond[0]=((((IkReal(-1.00000000000000))*(x493)*(x494)))+(((IkReal(-1.00000000000000))*(npy)*(x492))));
evalcond[1]=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x495)))+(((cj5)*(npz)))+(((npx)*(sj5)*(x492))));
evalcond[2]=((((IkReal(0.651000000000000))*(sj5)))+(x495)+(((IkReal(-1.00000000000000))*(x492)*(x494))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x496=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x496));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x496))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x497=IKcos(j4);
IkReal x498=IKsin(j4);
IkReal x499=((IkReal(1.00000000000000))*(npx));
IkReal x500=((cj5)*(x497));
evalcond[0]=((((npz)*(sj5)*(x497)))+(((IkReal(-1.00000000000000))*(sj6)*(x498)*(x499)))+(((npy)*(sj6)*(x500)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x498)))+(((IkReal(-1.00000000000000))*(cj6)*(x499)*(x500))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.00500000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(200.000000000000))*((npx)*(npx))))+(((IkReal(200.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((IkReal(0.00500000000000000))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x501=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x501));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x501))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x502=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x502));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x502))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x503=IKcos(j4);
IkReal x504=IKsin(j4);
IkReal x505=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x504)*(x505)))+(((npy)*(sj6)*(x503)))+(((IkReal(-1.00000000000000))*(cj6)*(x503)*(x505)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x504))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
IkReal x506=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=x506;
evalcond[3]=x506;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x507=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x507));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x507))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x508=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x508));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x508))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x509=IKcos(j4);
IkReal x510=IKsin(j4);
IkReal x511=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((cj6)*(npx)*(x509)))+(((IkReal(-1.00000000000000))*(npy)*(x509)*(x511)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x510)))+(((IkReal(-1.00000000000000))*(npx)*(x510)*(x511))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x512=((cj5)*(npz));
if( IKabs(((gconst19)*(((((npy)*(x512)))+(((IkReal(0.00500000000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.00500000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x512))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst19)*(((((npy)*(x512)))+(((IkReal(0.00500000000000000))*(npy)))))), ((gconst19)*(((((IkReal(-0.00500000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x512)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x513=IKcos(j6);
IkReal x514=IKsin(j6);
IkReal x515=((IkReal(1.00000000000000))*(npx));
IkReal x516=((npy)*(x514));
evalcond[0]=((((IkReal(-1.00000000000000))*(x514)*(x515)))+(((IkReal(-1.00000000000000))*(npy)*(x513))));
evalcond[1]=((IkReal(0.00500000000000000))+(((npx)*(sj5)*(x513)))+(((IkReal(-1.00000000000000))*(sj5)*(x516)))+(((cj5)*(npz))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x513)*(x515)))+(x516)+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x517=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x517));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x517))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x518=IKcos(j4);
IkReal x519=IKsin(j4);
IkReal x520=((IkReal(1.00000000000000))*(npx));
IkReal x521=((cj5)*(x518));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x519)*(x520)))+(((npz)*(sj5)*(x518)))+(((npy)*(sj6)*(x521)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x519)))+(((IkReal(-1.00000000000000))*(cj6)*(x520)*(x521))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x522=((gconst18)*(sj5));
if( IKabs(((npy)*(x522))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npx)*(x522))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npy)*(x522)), ((IkReal(-1.00000000000000))*(npx)*(x522)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x523=IKcos(j6);
IkReal x524=IKsin(j6);
IkReal x525=((IkReal(1.00000000000000))*(npx));
IkReal x526=((npy)*(x524));
evalcond[0]=((((IkReal(-1.00000000000000))*(x524)*(x525)))+(((IkReal(-1.00000000000000))*(npy)*(x523))));
evalcond[1]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x526)))+(((npx)*(sj5)*(x523)))+(((cj5)*(npz))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x523)*(x525)))+(x526)+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x527=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x527));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x527))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x528=IKcos(j4);
IkReal x529=IKsin(j4);
IkReal x530=((IkReal(1.00000000000000))*(npx));
IkReal x531=((cj5)*(x528));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x529)*(x530)))+(((npy)*(sj6)*(x531)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x529)))+(((IkReal(-1.00000000000000))*(cj6)*(x530)*(x531)))+(((npz)*(sj5)*(x528))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
IkReal x532=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x532));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x532))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-9.29506246281975))*(npy)*((npx)*(npx))))+(((npy)*((sj3)*(sj3))))+(((IkReal(-9.29506246281975))*((npy)*(npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x533=(sj3)*(sj3);
IkReal x534=(npy)*(npy);
IkReal x535=(npx)*(npx)*(npx);
IkReal x536=((npx)*(x534));
IkReal x537=((npx)*(x533));
IkReal x538=((IkReal(0.430336000000000))*(npy)*(x533));
IkReal x539=((((IkReal(4.00000000000000))*(npy)*((npx)*(npx))))+(((IkReal(4.00000000000000))*((npy)*(npy)*(npy)))));
IkReal x540=((((IkReal(-1.00000000000000))*(x539)))+(x538));
IkReal x541=((((IkReal(8.00000000000000))*(x535)))+(((IkReal(8.00000000000000))*(x536)))+(((IkReal(-0.860672000000000))*(x537))));
IkReal x542=((((IkReal(-1.00000000000000))*(x538)))+(x539));
op[0]=x540;
op[1]=x541;
op[2]=x540;
op[3]=((((IkReal(16.0000000000000))*(x535)))+(((IkReal(16.0000000000000))*(x536)))+(((IkReal(-1.72134400000000))*(x537))));
op[4]=x542;
op[5]=x541;
op[6]=x542;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x543=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x543)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x543))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((npy)*(sj3)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x544=((npy)*(sj6));
IkReal x545=((IkReal(41.0000000000000))*(sj3));
IkReal x546=((cj6)*(npx));
IkReal x547=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x548=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(npx)*(sj6)*(x544)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x544)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x546)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x546))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x544)))+(((IkReal(125.000000000000))*(x546))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(npx)*(sj6)*(x544)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x544)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x546)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x546)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x544)))+(((IkReal(125.000000000000))*(x546)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(npx)*(sj6)*(x544)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x544)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x546)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x546)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x544)))+(((IkReal(125.000000000000))*(x546)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x549=IKcos(j4);
IkReal x550=IKsin(j4);
IkReal x551=((IkReal(0.328000000000000))*(sj3));
IkReal x552=((IkReal(1.00000000000000))*(cj6));
IkReal x553=((npx)*(sj6));
IkReal x554=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x552)))+(((IkReal(-1.00000000000000))*(x553)))+(((x550)*(x551))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x552)))+(x554)+(((x549)*(x551))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x550)*(x552)))+(((cj6)*(npy)*(x549)))+(((x550)*(x554)))+(((x549)*(x553))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x550)*(x553)))+(((IkReal(-1.00000000000000))*(npy)*(x550)*(x552)))+(x551)+(((x549)*(x554)))+(((IkReal(-1.00000000000000))*(npx)*(x549)*(x552))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x555=((npy)*(sj6));
IkReal x556=((IkReal(5125.00000000000))*(sj3));
IkReal x557=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x555)*(x557)))+(((IkReal(15625.0000000000))*((x557)*(x557))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x555)*(x555)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x555)))+(((IkReal(125.000000000000))*(x557))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x555)*(x557)))+(((IkReal(15625.0000000000))*((x557)*(x557))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x555)*(x555))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x555)))+(((IkReal(125.000000000000))*(x557)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x555)*(x557)))+(((IkReal(15625.0000000000))*((x557)*(x557))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x555)*(x555))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x555)))+(((IkReal(125.000000000000))*(x557)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x558=IKcos(j4);
IkReal x559=IKsin(j4);
IkReal x560=((IkReal(0.328000000000000))*(sj3));
IkReal x561=((IkReal(1.00000000000000))*(cj6));
IkReal x562=((npx)*(sj6));
IkReal x563=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x561)))+(((IkReal(-1.00000000000000))*(x562)))+(((x559)*(x560))));
evalcond[1]=((((x558)*(x560)))+(x563)+(((IkReal(-1.00000000000000))*(npx)*(x561))));
evalcond[2]=((((x558)*(x562)))+(((IkReal(-1.00000000000000))*(npx)*(x559)*(x561)))+(((cj6)*(npy)*(x558)))+(((x559)*(x563))));
evalcond[3]=((((x558)*(x563)))+(((IkReal(-1.00000000000000))*(npy)*(x559)*(x561)))+(x560)+(((IkReal(-1.00000000000000))*(x559)*(x562)))+(((IkReal(-1.00000000000000))*(npx)*(x558)*(x561))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x564=((IkReal(125.000000000000))*(npy));
IkReal x565=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst20)*(((((sj6)*(x565)))+(((cj6)*(x564))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(sj6)*(x564)))+(((cj6)*(x565))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((sj6)*(x565)))+(((cj6)*(x564)))))), ((gconst20)*(((((IkReal(-1.00000000000000))*(sj6)*(x564)))+(((cj6)*(x565)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x566=IKcos(j4);
IkReal x567=IKsin(j4);
IkReal x568=((IkReal(0.328000000000000))*(sj3));
IkReal x569=((IkReal(1.00000000000000))*(cj6));
IkReal x570=((npx)*(sj6));
IkReal x571=((npy)*(sj6));
evalcond[0]=((((x567)*(x568)))+(((IkReal(-1.00000000000000))*(x570)))+(((IkReal(-1.00000000000000))*(npy)*(x569))));
evalcond[1]=((((x566)*(x568)))+(x571)+(((IkReal(-1.00000000000000))*(npx)*(x569))));
evalcond[2]=((((x567)*(x571)))+(((cj6)*(npy)*(x566)))+(((IkReal(-1.00000000000000))*(npx)*(x567)*(x569)))+(((x566)*(x570))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x566)*(x569)))+(((IkReal(-1.00000000000000))*(x567)*(x570)))+(((IkReal(-1.00000000000000))*(npy)*(x567)*(x569)))+(x568)+(((x566)*(x571))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
IkReal x572=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x572;
evalcond[3]=x572;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-9.29506246281975))*(npy)*((npx)*(npx))))+(((npy)*((sj3)*(sj3))))+(((IkReal(-9.29506246281975))*((npy)*(npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x573=(sj3)*(sj3);
IkReal x574=(npy)*(npy);
IkReal x575=(npx)*(npx)*(npx);
IkReal x576=((npx)*(x574));
IkReal x577=((npx)*(x573));
IkReal x578=((IkReal(0.430336000000000))*(npy)*(x573));
IkReal x579=((((IkReal(4.00000000000000))*(npy)*((npx)*(npx))))+(((IkReal(4.00000000000000))*((npy)*(npy)*(npy)))));
IkReal x580=((((IkReal(-1.00000000000000))*(x579)))+(x578));
IkReal x581=((((IkReal(8.00000000000000))*(x575)))+(((IkReal(8.00000000000000))*(x576)))+(((IkReal(-0.860672000000000))*(x577))));
IkReal x582=((((IkReal(-1.00000000000000))*(x578)))+(x579));
op[0]=x580;
op[1]=x581;
op[2]=x580;
op[3]=((((IkReal(-1.72134400000000))*(x577)))+(((IkReal(16.0000000000000))*(x575)))+(((IkReal(16.0000000000000))*(x576))));
op[4]=x582;
op[5]=x581;
op[6]=x582;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x583=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x583)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x583))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x584=((npy)*(sj6));
IkReal x585=((IkReal(41.0000000000000))*(sj3));
IkReal x586=((cj6)*(npx));
IkReal x587=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x588=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x584)*(x585)))+(((x585)*(x586))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x584)*(x585)))+(((x585)*(x586)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x584)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x584)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x586)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x586))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x586)))+(((IkReal(125.000000000000))*(x584))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x584)*(x585)))+(((x585)*(x586))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x584)*(x585)))+(((x585)*(x586)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x584)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x584)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x586)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x586)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x586)))+(((IkReal(125.000000000000))*(x584)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x584)*(x585)))+(((x585)*(x586))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x584)*(x585)))+(((x585)*(x586)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x584)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x584)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x586)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x586)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x586)))+(((IkReal(125.000000000000))*(x584)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x589=IKcos(j4);
IkReal x590=IKsin(j4);
IkReal x591=((IkReal(0.328000000000000))*(sj3));
IkReal x592=((cj6)*(npx));
IkReal x593=((IkReal(1.00000000000000))*(npy));
IkReal x594=((sj6)*(x589));
IkReal x595=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x595)))+(((IkReal(-1.00000000000000))*(cj6)*(x593)))+(((x590)*(x591))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x589)*(x591)))+(((IkReal(-1.00000000000000))*(x592)))+(((npy)*(sj6))));
evalcond[2]=((((npx)*(x594)))+(((cj6)*(npy)*(x589)))+(((IkReal(-1.00000000000000))*(sj6)*(x590)*(x593)))+(((x590)*(x592))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(x590)*(x593)))+(((IkReal(-1.00000000000000))*(x590)*(x595)))+(((IkReal(-1.00000000000000))*(x593)*(x594)))+(x591)+(((x589)*(x592))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x596=((npy)*(sj6));
IkReal x597=((IkReal(5125.00000000000))*(sj3));
IkReal x598=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x597)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x597))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x597)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x597)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x596)*(x596))))+(((IkReal(-31250.0000000000))*(x596)*(x598)))+(((IkReal(15625.0000000000))*((x598)*(x598))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x596)))+(((IkReal(-125.000000000000))*(x598))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x597)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x597))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x597)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x597)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x596)*(x596))))+(((IkReal(-31250.0000000000))*(x596)*(x598)))+(((IkReal(15625.0000000000))*((x598)*(x598))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x596)))+(((IkReal(-125.000000000000))*(x598)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x597)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x597))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x597)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x597)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x596)*(x596))))+(((IkReal(-31250.0000000000))*(x596)*(x598)))+(((IkReal(15625.0000000000))*((x598)*(x598))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x596)))+(((IkReal(-125.000000000000))*(x598)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x599=IKcos(j4);
IkReal x600=IKsin(j4);
IkReal x601=((IkReal(0.328000000000000))*(sj3));
IkReal x602=((cj6)*(npx));
IkReal x603=((IkReal(1.00000000000000))*(npy));
IkReal x604=((sj6)*(x599));
IkReal x605=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x603)))+(((x600)*(x601)))+(((IkReal(-1.00000000000000))*(x605))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x602)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x599)*(x601))));
evalcond[2]=((((x600)*(x602)))+(((npx)*(x604)))+(((cj6)*(npy)*(x599)))+(((IkReal(-1.00000000000000))*(sj6)*(x600)*(x603))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(x600)*(x603)))+(((IkReal(-1.00000000000000))*(x603)*(x604)))+(((IkReal(-1.00000000000000))*(x600)*(x605)))+(x601)+(((x599)*(x602))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x606=((IkReal(125.000000000000))*(npy));
IkReal x607=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst21)*(((((sj6)*(x607)))+(((cj6)*(x606))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((sj6)*(x606)))+(((IkReal(-1.00000000000000))*(cj6)*(x607))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst21)*(((((sj6)*(x607)))+(((cj6)*(x606)))))), ((gconst21)*(((((sj6)*(x606)))+(((IkReal(-1.00000000000000))*(cj6)*(x607)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x608=IKcos(j4);
IkReal x609=IKsin(j4);
IkReal x610=((IkReal(0.328000000000000))*(sj3));
IkReal x611=((cj6)*(npx));
IkReal x612=((IkReal(1.00000000000000))*(npy));
IkReal x613=((sj6)*(x608));
IkReal x614=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x612)))+(((IkReal(-1.00000000000000))*(x614)))+(((x609)*(x610))));
evalcond[1]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x611)))+(((IkReal(-1.00000000000000))*(x608)*(x610))));
evalcond[2]=((((cj6)*(npy)*(x608)))+(((npx)*(x613)))+(((x609)*(x611)))+(((IkReal(-1.00000000000000))*(sj6)*(x609)*(x612))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x612)*(x613)))+(((x608)*(x611)))+(((IkReal(-1.00000000000000))*(x609)*(x614)))+(((IkReal(-1.00000000000000))*(cj6)*(x609)*(x612)))+(x610));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((IkReal(3.04878048780488))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((IkReal(0.328000000000000))*(cj3)*(cj5))))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x615=((IkReal(125.000000000000))*(sj5));
gconst0=IKsign(((((x615)*((npy)*(npy))))+(((x615)*((npx)*(npx))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x616=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x616));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x616))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x617=((IkReal(125.000000000000))*(cj4));
gconst3=IKsign(((((IkReal(-1.00000000000000))*(x617)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(x617)*((npx)*(npx))))));
IkReal x618=((IkReal(1.00000000000000))*(cj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x618)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(x618)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x619=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x619));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x619))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x620=((IkReal(41.0000000000000))*(gconst4)*(sj3));
if( IKabs(((npx)*(x620))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x620))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x620)), ((npy)*(x620)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x621=IKsin(j6);
IkReal x622=IKcos(j6);
IkReal x623=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(x621)*(x623)))+(((IkReal(0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npy)*(x622))));
evalcond[1]=((((npy)*(x621)))+(((IkReal(-1.00000000000000))*(x622)*(x623))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x624=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x624));
evalcond[3]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x624)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-125.000000000000))*((npy)*(npy))))+(((IkReal(-125.000000000000))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x625=((IkReal(41.0000000000000))*(gconst5)*(sj3));
if( IKabs(((npx)*(x625))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x625))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x625)), ((npy)*(x625)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x626=IKsin(j6);
IkReal x627=IKcos(j6);
IkReal x628=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x626)*(x628)))+(((IkReal(-1.00000000000000))*(npy)*(x627))));
evalcond[1]=((((npy)*(x626)))+(((IkReal(-1.00000000000000))*(x627)*(x628))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x629=(cj4)*(cj4);
IkReal x630=((IkReal(41.0000000000000))*(sj3));
IkReal x631=((cj4)*(sj4));
if( IKabs(((gconst3)*(((((npy)*(x629)*(x630)))+(((IkReal(-1.00000000000000))*(npx)*(x630)*(x631))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x630)*(x631)))+(((IkReal(-1.00000000000000))*(npx)*(x629)*(x630))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst3)*(((((npy)*(x629)*(x630)))+(((IkReal(-1.00000000000000))*(npx)*(x630)*(x631)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x630)*(x631)))+(((IkReal(-1.00000000000000))*(npx)*(x629)*(x630)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x632=IKsin(j6);
IkReal x633=IKcos(j6);
IkReal x634=((IkReal(1.00000000000000))*(npx));
IkReal x635=((IkReal(0.328000000000000))*(sj3));
IkReal x636=((IkReal(1.00000000000000))*(npy));
IkReal x637=((npy)*(x632));
IkReal x638=((sj4)*(x633));
IkReal x639=((cj4)*(x633));
evalcond[0]=((((sj4)*(x635)))+(((IkReal(-1.00000000000000))*(x633)*(x636)))+(((IkReal(-1.00000000000000))*(x632)*(x634))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x633)*(x634)))+(((cj4)*(x635)))+(x637));
evalcond[2]=((((sj4)*(x637)))+(((npy)*(x639)))+(((IkReal(-1.00000000000000))*(x634)*(x638)))+(((cj4)*(npx)*(x632))));
evalcond[3]=((((cj4)*(x637)))+(((IkReal(-1.00000000000000))*(x634)*(x639)))+(((IkReal(-1.00000000000000))*(x636)*(x638)))+(x635)+(((IkReal(-1.00000000000000))*(sj4)*(x632)*(x634))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x640=((IkReal(41.0000000000000))*(cj4)*(sj3));
IkReal x641=((IkReal(41.0000000000000))*(sj3)*(sj4));
if( IKabs(((gconst2)*(((((npx)*(x641)))+(((IkReal(-1.00000000000000))*(npy)*(x640))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((npx)*(x640)))+(((npy)*(x641))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst2)*(((((npx)*(x641)))+(((IkReal(-1.00000000000000))*(npy)*(x640)))))), ((gconst2)*(((((npx)*(x640)))+(((npy)*(x641)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x642=IKsin(j6);
IkReal x643=IKcos(j6);
IkReal x644=((IkReal(1.00000000000000))*(npx));
IkReal x645=((IkReal(0.328000000000000))*(sj3));
IkReal x646=((IkReal(1.00000000000000))*(npy));
IkReal x647=((npy)*(x642));
IkReal x648=((sj4)*(x643));
IkReal x649=((cj4)*(x643));
evalcond[0]=((((IkReal(-1.00000000000000))*(x642)*(x644)))+(((sj4)*(x645)))+(((IkReal(-1.00000000000000))*(x643)*(x646))));
evalcond[1]=((((cj4)*(x645)))+(((IkReal(-1.00000000000000))*(x643)*(x644)))+(x647));
evalcond[2]=((((sj4)*(x647)))+(((IkReal(-1.00000000000000))*(x644)*(x648)))+(((cj4)*(npx)*(x642)))+(((npy)*(x649))));
evalcond[3]=((((cj4)*(x647)))+(((IkReal(-1.00000000000000))*(x646)*(x648)))+(((IkReal(-1.00000000000000))*(x644)*(x649)))+(((IkReal(-1.00000000000000))*(sj4)*(x642)*(x644)))+(x645));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x650=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x650;
evalcond[3]=x650;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
IkReal x651=((IkReal(125.000000000000))*(cj4));
gconst7=IKsign(((((x651)*((npx)*(npx))))+(((x651)*((npy)*(npy))))));
dummyeval[0]=((((cj4)*((npx)*(npx))))+(((cj4)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x652=x650;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x652;
evalcond[3]=x652;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x653=((IkReal(41.0000000000000))*(gconst8)*(sj3));
if( IKabs(((npx)*(x653))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x653))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x653)), ((npy)*(x653)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x654=IKsin(j6);
IkReal x655=IKcos(j6);
IkReal x656=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x655)))+(((IkReal(0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x654)*(x656))));
evalcond[1]=((((npy)*(x654)))+(((IkReal(-1.00000000000000))*(x655)*(x656))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x657=x650;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x657;
evalcond[3]=x657;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-125.000000000000))*((npy)*(npy))))+(((IkReal(-125.000000000000))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x658=((IkReal(41.0000000000000))*(gconst9)*(sj3));
if( IKabs(((npx)*(x658))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x658))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x658)), ((npy)*(x658)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x659=IKsin(j6);
IkReal x660=IKcos(j6);
IkReal x661=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x659)*(x661)))+(((IkReal(-1.00000000000000))*(npy)*(x660))));
evalcond[1]=((((npy)*(x659)))+(((IkReal(-1.00000000000000))*(x660)*(x661))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x662=(cj4)*(cj4);
IkReal x663=((IkReal(41.0000000000000))*(sj3));
IkReal x664=((cj4)*(sj4));
if( IKabs(((gconst7)*(((((npy)*(x662)*(x663)))+(((npx)*(x663)*(x664))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(npx)*(x662)*(x663)))+(((npy)*(x663)*(x664))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst7)*(((((npy)*(x662)*(x663)))+(((npx)*(x663)*(x664)))))), ((gconst7)*(((((IkReal(-1.00000000000000))*(npx)*(x662)*(x663)))+(((npy)*(x663)*(x664)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x665=IKsin(j6);
IkReal x666=IKcos(j6);
IkReal x667=((IkReal(1.00000000000000))*(npx));
IkReal x668=((IkReal(0.328000000000000))*(sj3));
IkReal x669=((IkReal(1.00000000000000))*(npy));
IkReal x670=((npy)*(x665));
IkReal x671=((sj4)*(x666));
IkReal x672=((cj4)*(x666));
evalcond[0]=((((IkReal(-1.00000000000000))*(x665)*(x667)))+(((sj4)*(x668)))+(((IkReal(-1.00000000000000))*(x666)*(x669))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x668)))+(x670)+(((IkReal(-1.00000000000000))*(x666)*(x667))));
evalcond[2]=((((npx)*(x671)))+(((IkReal(-1.00000000000000))*(sj4)*(x665)*(x669)))+(((npy)*(x672)))+(((cj4)*(npx)*(x665))));
evalcond[3]=((((npx)*(x672)))+(((IkReal(-1.00000000000000))*(cj4)*(x665)*(x669)))+(((IkReal(-1.00000000000000))*(sj4)*(x665)*(x667)))+(((IkReal(-1.00000000000000))*(x669)*(x671)))+(x668));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x673=((IkReal(41.0000000000000))*(cj4)*(sj3));
IkReal x674=((IkReal(41.0000000000000))*(sj3)*(sj4));
if( IKabs(((gconst6)*(((((npx)*(x674)))+(((npy)*(x673))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(npx)*(x673)))+(((npy)*(x674))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst6)*(((((npx)*(x674)))+(((npy)*(x673)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(npx)*(x673)))+(((npy)*(x674)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x675=IKsin(j6);
IkReal x676=IKcos(j6);
IkReal x677=((IkReal(1.00000000000000))*(npx));
IkReal x678=((IkReal(0.328000000000000))*(sj3));
IkReal x679=((IkReal(1.00000000000000))*(npy));
IkReal x680=((npy)*(x675));
IkReal x681=((sj4)*(x676));
IkReal x682=((cj4)*(x676));
evalcond[0]=((((IkReal(-1.00000000000000))*(x675)*(x677)))+(((IkReal(-1.00000000000000))*(x676)*(x679)))+(((sj4)*(x678))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x678)))+(((IkReal(-1.00000000000000))*(x676)*(x677)))+(x680));
evalcond[2]=((((cj4)*(npx)*(x675)))+(((npy)*(x682)))+(((IkReal(-1.00000000000000))*(sj4)*(x675)*(x679)))+(((npx)*(x681))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj4)*(x675)*(x677)))+(((IkReal(-1.00000000000000))*(x679)*(x681)))+(((IkReal(-1.00000000000000))*(cj4)*(x675)*(x679)))+(x678)+(((npx)*(x682))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x683=((IkReal(40.3750000000000))*(sj5));
IkReal x684=((IkReal(41.0000000000000))*(sj3));
IkReal x685=((cj4)*(cj5));
IkReal x686=((IkReal(41.0000000000000))*(cj3)*(sj5));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(x683)))+(((IkReal(-1.00000000000000))*(npy)*(x686)))+(((IkReal(-1.00000000000000))*(npy)*(x684)*(x685)))+(((npx)*(sj4)*(x684))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((npx)*(x684)*(x685)))+(((npy)*(sj4)*(x684)))+(((npx)*(x683)))+(((npx)*(x686))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(npy)*(x683)))+(((IkReal(-1.00000000000000))*(npy)*(x686)))+(((IkReal(-1.00000000000000))*(npy)*(x684)*(x685)))+(((npx)*(sj4)*(x684)))))), ((gconst1)*(((((npx)*(x684)*(x685)))+(((npy)*(sj4)*(x684)))+(((npx)*(x683)))+(((npx)*(x686)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x687=IKcos(j6);
IkReal x688=IKsin(j6);
IkReal x689=((IkReal(0.328000000000000))*(cj3));
IkReal x690=((IkReal(1.00000000000000))*(sj4));
IkReal x691=((npz)*(sj5));
IkReal x692=((IkReal(0.328000000000000))*(sj3));
IkReal x693=((cj4)*(cj5));
IkReal x694=((IkReal(1.00000000000000))*(npx));
IkReal x695=((npy)*(x688));
IkReal x696=((npy)*(x687));
IkReal x697=((npx)*(x687));
IkReal x698=((npx)*(x688));
evalcond[0]=((((sj4)*(x692)))+(((IkReal(-1.00000000000000))*(x688)*(x694)))+(((IkReal(-1.00000000000000))*(x696))));
evalcond[1]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x695)))+(((IkReal(-1.00000000000000))*(x689)))+(((cj5)*(npz)))+(((sj5)*(x697))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x687)*(x694)))+(((IkReal(0.323000000000000))*(sj5)))+(((sj5)*(x689)))+(((x692)*(x693)))+(x695));
evalcond[3]=((((cj4)*(x698)))+(((cj4)*(x696)))+(((sj4)*(x691)))+(((cj5)*(sj4)*(x695)))+(((IkReal(-1.00000000000000))*(cj5)*(x690)*(x697))));
evalcond[4]=((((cj4)*(x691)))+(((x693)*(x695)))+(x692)+(((IkReal(-1.00000000000000))*(x690)*(x696)))+(((IkReal(-1.00000000000000))*(x690)*(x698)))+(((IkReal(-1.00000000000000))*(x687)*(x693)*(x694))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x699=((IkReal(41.0000000000000))*(npy));
IkReal x700=((IkReal(41.0000000000000))*(npx));
IkReal x701=((IkReal(125.000000000000))*(cj5)*(npz));
IkReal x702=((sj3)*(sj4)*(sj5));
if( IKabs(((gconst0)*(((((npy)*(x701)))+(((x700)*(x702)))+(((IkReal(-40.3750000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj3)*(x699))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(npx)*(x701)))+(((IkReal(40.3750000000000))*(npx)))+(((cj3)*(x700)))+(((x699)*(x702))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((npy)*(x701)))+(((x700)*(x702)))+(((IkReal(-40.3750000000000))*(npy)))+(((IkReal(-1.00000000000000))*(cj3)*(x699)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(npx)*(x701)))+(((IkReal(40.3750000000000))*(npx)))+(((cj3)*(x700)))+(((x699)*(x702)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x703=IKcos(j6);
IkReal x704=IKsin(j6);
IkReal x705=((IkReal(0.328000000000000))*(cj3));
IkReal x706=((IkReal(1.00000000000000))*(sj4));
IkReal x707=((npz)*(sj5));
IkReal x708=((IkReal(0.328000000000000))*(sj3));
IkReal x709=((cj4)*(cj5));
IkReal x710=((IkReal(1.00000000000000))*(npx));
IkReal x711=((npy)*(x704));
IkReal x712=((npy)*(x703));
IkReal x713=((npx)*(x703));
IkReal x714=((npx)*(x704));
evalcond[0]=((((IkReal(-1.00000000000000))*(x712)))+(((IkReal(-1.00000000000000))*(x704)*(x710)))+(((sj4)*(x708))));
evalcond[1]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x711)))+(((sj5)*(x713)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(x705))));
evalcond[2]=((((sj5)*(x705)))+(((IkReal(0.323000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x703)*(x710)))+(x711)+(((x708)*(x709))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj5)*(x706)*(x713)))+(((cj5)*(sj4)*(x711)))+(((cj4)*(x714)))+(((cj4)*(x712)))+(((sj4)*(x707))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x706)*(x714)))+(((IkReal(-1.00000000000000))*(x706)*(x712)))+(((cj4)*(x707)))+(((x709)*(x711)))+(((IkReal(-1.00000000000000))*(x703)*(x709)*(x710)))+(x708));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x715=(sj5)*(sj5);
if( IKabs(((npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x716=((IkReal(1.00000000000000))*(IKatan2(((npx)*(sj5)), ((IkReal(-1.00000000000000))*(npy)*(sj5)))));
if( (((((x715)*((npx)*(npx))))+(((x715)*((npy)*(npy)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x715)*((npx)*(npx))))+(((x715)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x715)*((npx)*(npx))))+(((x715)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x715)*((npx)*(npx))))+(((x715)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x715)*((npx)*(npx))))+(((x715)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x717=IKasin(((((IKabs(IKabs(IKsqrt(((((x715)*((npx)*(npx))))+(((x715)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x715)*((npx)*(npx))))+(((x715)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x717)))+(((IkReal(-1.00000000000000))*(x716))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x716)))+(x717));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=((((cj6)*(npy)*(sj3)))+(((npx)*(sj3)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x718=((IkReal(1.00000000000000))*(npy));
IkReal x719=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x718)))+(((IkReal(-1.00000000000000))*(sj6)*(x719))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.651000000000000))*(cj5))));
evalcond[4]=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x718)))+(((cj5)*(npz)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(0.651000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x719)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x720=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x720));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x720))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x721=IKcos(j4);
IkReal x722=IKsin(j4);
IkReal x723=((IkReal(1.00000000000000))*(npx));
IkReal x724=((cj5)*(x721));
evalcond[0]=((((npy)*(sj6)*(x724)))+(((IkReal(-1.00000000000000))*(sj6)*(x722)*(x723)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x722)))+(((npz)*(sj5)*(x721)))+(((IkReal(-1.00000000000000))*(cj6)*(x723)*(x724))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x725=((IkReal(1.00000000000000))*(npy));
IkReal x726=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x725)))+(((IkReal(-1.00000000000000))*(sj6)*(x726))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.00500000000000000))*(cj5))));
evalcond[4]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x725)))+(((cj5)*(npz)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x726)))+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x727=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x727));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x727))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x728=IKcos(j4);
IkReal x729=IKsin(j4);
IkReal x730=((IkReal(1.00000000000000))*(npx));
IkReal x731=((cj5)*(x728));
evalcond[0]=((((npy)*(sj6)*(x731)))+(((IkReal(-1.00000000000000))*(sj6)*(x729)*(x730)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x729)))+(((IkReal(-1.00000000000000))*(cj6)*(x730)*(x731)))+(((npz)*(sj5)*(x728))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x732=((IkReal(0.328000000000000))*(cj3));
IkReal x733=((cj6)*(npx));
IkReal x734=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x734)))+(((IkReal(-1.00000000000000))*(x732)))+(x733));
evalcond[3]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(x733)))+(x734)+(x732));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x735=((IkReal(1.00000000000000))*(cj6));
IkReal x736=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x735)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(-0.651000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x736))));
evalcond[5]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x735)))+(x736));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x737=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x737));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x737))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x738=IKsin(j4);
IkReal x739=((IkReal(1.00000000000000))*(x738));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x739)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x739)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x740=((IkReal(1.00000000000000))*(cj6));
IkReal x741=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x740)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(0.00500000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x741))));
evalcond[5]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x740)))+(x741));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x742=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x742));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x742))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x743=IKsin(j4);
IkReal x744=((IkReal(1.00000000000000))*(x743));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x744)))+(((npz)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x744))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst11)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst11)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x745=IKsin(j4);
IkReal x746=IKcos(j4);
IkReal x747=((IkReal(0.328000000000000))*(sj3));
IkReal x748=((npx)*(sj6));
IkReal x749=((cj6)*(npy));
IkReal x750=((IkReal(1.00000000000000))*(x745));
evalcond[0]=((((x745)*(x747)))+(((IkReal(-1.00000000000000))*(x748)))+(((IkReal(-1.00000000000000))*(x749))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x746)*(x747)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[2]=((((x746)*(x749)))+(((x746)*(x748)))+(((npz)*(x745))));
evalcond[3]=((x747)+(((IkReal(-1.00000000000000))*(x749)*(x750)))+(((npz)*(x746)))+(((IkReal(-1.00000000000000))*(x748)*(x750))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst10)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst10)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x751=IKsin(j4);
IkReal x752=IKcos(j4);
IkReal x753=((IkReal(0.328000000000000))*(sj3));
IkReal x754=((npx)*(sj6));
IkReal x755=((cj6)*(npy));
IkReal x756=((IkReal(1.00000000000000))*(x751));
evalcond[0]=((((x751)*(x753)))+(((IkReal(-1.00000000000000))*(x755)))+(((IkReal(-1.00000000000000))*(x754))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x752)*(x753))));
evalcond[2]=((((npz)*(x751)))+(((x752)*(x754)))+(((x752)*(x755))));
evalcond[3]=((((npz)*(x752)))+(((IkReal(-1.00000000000000))*(x754)*(x756)))+(((IkReal(-1.00000000000000))*(x755)*(x756)))+(x753));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x757=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x757;
evalcond[3]=x757;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x758=((IkReal(1.00000000000000))*(npx));
IkReal x759=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x758)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x758))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x759;
evalcond[5]=x759;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x760=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x760));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x760))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x761=IKsin(j4);
IkReal x762=((IkReal(1.00000000000000))*(x761));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x762)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x762))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x763=((IkReal(1.00000000000000))*(npx));
IkReal x764=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x763)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x763))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x764;
evalcond[5]=x764;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x765=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x765));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x765))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x766=IKsin(j4);
IkReal x767=((IkReal(1.00000000000000))*(x766));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x767)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x767))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst13)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst13)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x768=IKcos(j4);
IkReal x769=IKsin(j4);
IkReal x770=((IkReal(0.328000000000000))*(sj3));
IkReal x771=((IkReal(1.00000000000000))*(npz));
IkReal x772=((npx)*(sj6));
IkReal x773=((cj6)*(npy));
IkReal x774=((IkReal(1.00000000000000))*(x769));
evalcond[0]=((((x769)*(x770)))+(((IkReal(-1.00000000000000))*(x773)))+(((IkReal(-1.00000000000000))*(x772))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x771)))+(((x768)*(x770))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x769)*(x771)))+(((x768)*(x772)))+(((x768)*(x773))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x768)*(x771)))+(((IkReal(-1.00000000000000))*(x772)*(x774)))+(x770)+(((IkReal(-1.00000000000000))*(x773)*(x774))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst12)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst12)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x775=IKcos(j4);
IkReal x776=IKsin(j4);
IkReal x777=((IkReal(0.328000000000000))*(sj3));
IkReal x778=((IkReal(1.00000000000000))*(npz));
IkReal x779=((npx)*(sj6));
IkReal x780=((cj6)*(npy));
IkReal x781=((IkReal(1.00000000000000))*(x776));
evalcond[0]=((((x776)*(x777)))+(((IkReal(-1.00000000000000))*(x780)))+(((IkReal(-1.00000000000000))*(x779))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x778)))+(((x775)*(x777))));
evalcond[2]=((((x775)*(x780)))+(((IkReal(-1.00000000000000))*(x776)*(x778)))+(((x775)*(x779))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x775)*(x778)))+(x777)+(((IkReal(-1.00000000000000))*(x780)*(x781)))+(((IkReal(-1.00000000000000))*(x779)*(x781))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x782=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x782));
evalcond[3]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x782)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x783=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x783)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x783))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((npy)*(sj3)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x784=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x784))));
evalcond[3]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(-0.651000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x784)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x785=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x785));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x785))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x786=IKcos(j4);
IkReal x787=IKsin(j4);
IkReal x788=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((npy)*(sj6)*(x786)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x787)))+(((IkReal(-1.00000000000000))*(sj6)*(x787)*(x788)))+(((IkReal(-1.00000000000000))*(cj6)*(x786)*(x788))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x789=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x789))));
evalcond[3]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.00500000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x789)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x790=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x790));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x790))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x791=IKcos(j4);
IkReal x792=IKsin(j4);
IkReal x793=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((npy)*(sj6)*(x791)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x792)))+(((IkReal(-1.00000000000000))*(sj6)*(x792)*(x793)))+(((IkReal(-1.00000000000000))*(cj6)*(x791)*(x793))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x794=((npy)*(sj6));
IkReal x795=((IkReal(41.0000000000000))*(sj3));
IkReal x796=((cj6)*(npx));
IkReal x797=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x798=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x795)*(x796)))+(((x794)*(x795))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x795)*(x796)))+(((x794)*(x795)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x796)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x796)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x794)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x794))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x796)))+(((IkReal(-125.000000000000))*(x794))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x795)*(x796)))+(((x794)*(x795))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x795)*(x796)))+(((x794)*(x795)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x796)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x796)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x794)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x794)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x796)))+(((IkReal(-125.000000000000))*(x794)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x795)*(x796)))+(((x794)*(x795))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x795)*(x796)))+(((x794)*(x795)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x796)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x796)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x794)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x794)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x796)))+(((IkReal(-125.000000000000))*(x794)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x799=IKcos(j4);
IkReal x800=IKsin(j4);
IkReal x801=((IkReal(0.328000000000000))*(sj3));
IkReal x802=((IkReal(1.00000000000000))*(cj6));
IkReal x803=((npx)*(sj6));
IkReal x804=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x803)))+(((x800)*(x801)))+(((IkReal(-1.00000000000000))*(npy)*(x802))));
evalcond[1]=((((x799)*(x801)))+(x804)+(((IkReal(-1.00000000000000))*(npx)*(x802))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x800)*(x802)))+(((x800)*(x804)))+(((x799)*(x803)))+(((cj6)*(npy)*(x799))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x799)*(x802)))+(((IkReal(-1.00000000000000))*(npy)*(x800)*(x802)))+(((IkReal(-1.00000000000000))*(x800)*(x803)))+(((x799)*(x804)))+(x801));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x805=((npy)*(sj6));
IkReal x806=((IkReal(5125.00000000000))*(sj3));
IkReal x807=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x806)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x806))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x806)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x806)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x805)*(x805))))+(((IkReal(-31250.0000000000))*(x805)*(x807)))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x807)*(x807)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x807)))+(((IkReal(-125.000000000000))*(x805))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x806)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x806))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x806)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x806)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x805)*(x805))))+(((IkReal(-31250.0000000000))*(x805)*(x807)))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x807)*(x807))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x807)))+(((IkReal(-125.000000000000))*(x805)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x806)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x806))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x806)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x806)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x805)*(x805))))+(((IkReal(-31250.0000000000))*(x805)*(x807)))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x807)*(x807))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x807)))+(((IkReal(-125.000000000000))*(x805)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x808=IKcos(j4);
IkReal x809=IKsin(j4);
IkReal x810=((IkReal(0.328000000000000))*(sj3));
IkReal x811=((IkReal(1.00000000000000))*(cj6));
IkReal x812=((npx)*(sj6));
IkReal x813=((npy)*(sj6));
evalcond[0]=((((x809)*(x810)))+(((IkReal(-1.00000000000000))*(npy)*(x811)))+(((IkReal(-1.00000000000000))*(x812))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x811)))+(((x808)*(x810)))+(x813));
evalcond[2]=((((x809)*(x813)))+(((x808)*(x812)))+(((IkReal(-1.00000000000000))*(npx)*(x809)*(x811)))+(((cj6)*(npy)*(x808))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npy)*(x809)*(x811)))+(((x808)*(x813)))+(((IkReal(-1.00000000000000))*(x809)*(x812)))+(((IkReal(-1.00000000000000))*(npx)*(x808)*(x811)))+(x810));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x814=((IkReal(125.000000000000))*(npy));
IkReal x815=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst14)*(((((sj6)*(x815)))+(((cj6)*(x814))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(sj6)*(x814)))+(((cj6)*(x815))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((sj6)*(x815)))+(((cj6)*(x814)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(sj6)*(x814)))+(((cj6)*(x815)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x816=IKcos(j4);
IkReal x817=IKsin(j4);
IkReal x818=((IkReal(0.328000000000000))*(sj3));
IkReal x819=((IkReal(1.00000000000000))*(cj6));
IkReal x820=((npx)*(sj6));
IkReal x821=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x819)))+(((x817)*(x818)))+(((IkReal(-1.00000000000000))*(x820))));
evalcond[1]=((((x816)*(x818)))+(((IkReal(-1.00000000000000))*(npx)*(x819)))+(x821));
evalcond[2]=((((cj6)*(npy)*(x816)))+(((x817)*(x821)))+(((IkReal(-1.00000000000000))*(npx)*(x817)*(x819)))+(((x816)*(x820))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x817)*(x820)))+(((IkReal(-1.00000000000000))*(npy)*(x817)*(x819)))+(((x816)*(x821)))+(((IkReal(-1.00000000000000))*(npx)*(x816)*(x819)))+(x818));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x822=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x822;
evalcond[3]=x822;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x823=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x823)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x823))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x824=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x825=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x825))));
evalcond[3]=x824;
evalcond[4]=x824;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x825)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x826=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x826));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x826))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x827=IKcos(j4);
IkReal x828=IKsin(j4);
IkReal x829=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((cj6)*(npx)*(x827)))+(((IkReal(-1.00000000000000))*(npx)*(x828)*(x829)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x828)))+(((IkReal(-1.00000000000000))*(npy)*(x827)*(x829))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x830=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x831=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x831))));
evalcond[3]=x830;
evalcond[4]=x830;
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x831))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x832=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x832));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x832))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x833=IKcos(j4);
IkReal x834=IKsin(j4);
IkReal x835=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((cj6)*(npx)*(x833)))+(((IkReal(-1.00000000000000))*(npx)*(x834)*(x835)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x834)))+(((IkReal(-1.00000000000000))*(npy)*(x833)*(x835))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x836=((npy)*(sj6));
IkReal x837=((IkReal(41.0000000000000))*(sj3));
IkReal x838=((cj6)*(npx));
IkReal x839=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x840=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x836)*(x837)))+(((x837)*(x838))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x836)*(x837)))+(((x837)*(x838)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x838)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x836)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x836)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x838))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x838)))+(((IkReal(125.000000000000))*(x836))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x836)*(x837)))+(((x837)*(x838))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x836)*(x837)))+(((x837)*(x838)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x838)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x836)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x836)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x838)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x838)))+(((IkReal(125.000000000000))*(x836)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x836)*(x837)))+(((x837)*(x838))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x836)*(x837)))+(((x837)*(x838)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x838)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x836)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x836)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x838)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x838)))+(((IkReal(125.000000000000))*(x836)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x841=IKcos(j4);
IkReal x842=IKsin(j4);
IkReal x843=((IkReal(0.328000000000000))*(sj3));
IkReal x844=((cj6)*(npx));
IkReal x845=((IkReal(1.00000000000000))*(npy));
IkReal x846=((sj6)*(x841));
IkReal x847=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x847)))+(((x842)*(x843)))+(((IkReal(-1.00000000000000))*(cj6)*(x845))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x841)*(x843)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x844))));
evalcond[2]=((((cj6)*(npy)*(x841)))+(((npx)*(x846)))+(((IkReal(-1.00000000000000))*(sj6)*(x842)*(x845)))+(((x842)*(x844))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x842)*(x847)))+(((IkReal(-1.00000000000000))*(x845)*(x846)))+(x843)+(((IkReal(-1.00000000000000))*(cj6)*(x842)*(x845)))+(((x841)*(x844))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x848=((npy)*(sj6));
IkReal x849=((IkReal(5125.00000000000))*(sj3));
IkReal x850=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x849)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x849))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x849)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x849)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x848)*(x850)))+(((IkReal(15625.0000000000))*((x850)*(x850))))+(((IkReal(15625.0000000000))*((x848)*(x848))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x850)))+(((IkReal(125.000000000000))*(x848))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x849)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x849))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x849)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x849)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x848)*(x850)))+(((IkReal(15625.0000000000))*((x850)*(x850))))+(((IkReal(15625.0000000000))*((x848)*(x848))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x850)))+(((IkReal(125.000000000000))*(x848)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x849)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x849))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x849)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x849)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x848)*(x850)))+(((IkReal(15625.0000000000))*((x850)*(x850))))+(((IkReal(15625.0000000000))*((x848)*(x848))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x850)))+(((IkReal(125.000000000000))*(x848)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x851=IKcos(j4);
IkReal x852=IKsin(j4);
IkReal x853=((IkReal(0.328000000000000))*(sj3));
IkReal x854=((cj6)*(npx));
IkReal x855=((IkReal(1.00000000000000))*(npy));
IkReal x856=((sj6)*(x851));
IkReal x857=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x857)))+(((IkReal(-1.00000000000000))*(cj6)*(x855)))+(((x852)*(x853))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x854)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x851)*(x853))));
evalcond[2]=((((cj6)*(npy)*(x851)))+(((npx)*(x856)))+(((x852)*(x854)))+(((IkReal(-1.00000000000000))*(sj6)*(x852)*(x855))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x852)*(x857)))+(((x851)*(x854)))+(((IkReal(-1.00000000000000))*(x855)*(x856)))+(x853)+(((IkReal(-1.00000000000000))*(cj6)*(x852)*(x855))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x858=((IkReal(125.000000000000))*(npy));
IkReal x859=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst15)*(((((cj6)*(x858)))+(((sj6)*(x859))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(cj6)*(x859)))+(((sj6)*(x858))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((cj6)*(x858)))+(((sj6)*(x859)))))), ((gconst15)*(((((IkReal(-1.00000000000000))*(cj6)*(x859)))+(((sj6)*(x858)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x860=IKcos(j4);
IkReal x861=IKsin(j4);
IkReal x862=((IkReal(0.328000000000000))*(sj3));
IkReal x863=((cj6)*(npx));
IkReal x864=((IkReal(1.00000000000000))*(npy));
IkReal x865=((sj6)*(x860));
IkReal x866=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x866)))+(((IkReal(-1.00000000000000))*(cj6)*(x864)))+(((x861)*(x862))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x863)))+(((IkReal(-1.00000000000000))*(x860)*(x862)))+(((npy)*(sj6))));
evalcond[2]=((((cj6)*(npy)*(x860)))+(((IkReal(-1.00000000000000))*(sj6)*(x861)*(x864)))+(((npx)*(x865)))+(((x861)*(x863))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x861)*(x866)))+(((IkReal(-1.00000000000000))*(x864)*(x865)))+(((IkReal(-1.00000000000000))*(cj6)*(x861)*(x864)))+(((x860)*(x863)))+(x862));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x867=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x868=((IkReal(125.000000000000))*(npy));
IkReal x869=((IkReal(0.0243902439024390))*(x867));
IkReal x870=((IkReal(125.000000000000))*(npx));
if( IKabs(((x869)*(((((cj6)*(x868)))+(((sj6)*(x870))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x869)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x868)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x870))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x869)*(((((cj6)*(x868)))+(((sj6)*(x870)))))))+IKsqr(((x869)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x868)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x870)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x869)*(((((cj6)*(x868)))+(((sj6)*(x870)))))), ((x869)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x868)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x870)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x871=IKcos(j4);
IkReal x872=IKsin(j4);
IkReal x873=((npy)*(sj6));
IkReal x874=((IkReal(1.00000000000000))*(npx));
IkReal x875=((IkReal(0.328000000000000))*(cj3));
IkReal x876=((IkReal(0.328000000000000))*(sj3));
IkReal x877=((cj6)*(x871));
IkReal x878=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x879=((sj5)*(x871));
IkReal x880=((cj5)*(x872));
IkReal x881=((cj5)*(x871));
evalcond[0]=((((x872)*(x876)))+(((IkReal(-1.00000000000000))*(sj6)*(x874)))+(((IkReal(-1.00000000000000))*(x878))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x876)*(x879)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((cj5)*(x875))));
evalcond[2]=((((sj5)*(x875)))+(((x876)*(x881)))+(((IkReal(0.323000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x874)))+(x873));
evalcond[3]=((((npx)*(sj6)*(x871)))+(((npz)*(sj5)*(x872)))+(((IkReal(-1.00000000000000))*(cj6)*(x874)*(x880)))+(((npy)*(x877)))+(((x873)*(x880))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x872)*(x878)))+(((IkReal(-1.00000000000000))*(cj5)*(x874)*(x877)))+(x876)+(((npz)*(x879)))+(((x873)*(x881)))+(((IkReal(-1.00000000000000))*(sj6)*(x872)*(x874))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x882=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x883=((IkReal(0.0243902439024390))*(x882));
if( IKabs(((x883)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x883)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x883)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))))+IKsqr(((x883)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x883)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((x883)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x884=IKcos(j4);
IkReal x885=IKsin(j4);
IkReal x886=((npy)*(sj6));
IkReal x887=((IkReal(1.00000000000000))*(npx));
IkReal x888=((IkReal(0.328000000000000))*(cj3));
IkReal x889=((IkReal(0.328000000000000))*(sj3));
IkReal x890=((cj6)*(x884));
IkReal x891=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x892=((sj5)*(x884));
IkReal x893=((cj5)*(x885));
IkReal x894=((cj5)*(x884));
evalcond[0]=((((IkReal(-1.00000000000000))*(x891)))+(((x885)*(x889)))+(((IkReal(-1.00000000000000))*(sj6)*(x887))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x889)*(x892)))+(((cj5)*(x888))));
evalcond[2]=((((IkReal(0.323000000000000))*(sj5)))+(((sj5)*(x888)))+(((x889)*(x894)))+(x886)+(((IkReal(-1.00000000000000))*(cj6)*(x887))));
evalcond[3]=((((x886)*(x893)))+(((npz)*(sj5)*(x885)))+(((npy)*(x890)))+(((npx)*(sj6)*(x884)))+(((IkReal(-1.00000000000000))*(cj6)*(x887)*(x893))));
evalcond[4]=((((x886)*(x894)))+(((IkReal(-1.00000000000000))*(sj6)*(x885)*(x887)))+(((IkReal(-1.00000000000000))*(cj5)*(x887)*(x890)))+(((npz)*(x892)))+(((IkReal(-1.00000000000000))*(x885)*(x891)))+(x889));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x895=((IkReal(125.000000000000))*(cj6));
IkReal x896=((cj5)*(sj6));
IkReal x897=((npz)*(sj5));
IkReal x898=((IkReal(125.000000000000))*(npx));
IkReal x899=((cj5)*(npy));
IkReal x900=((IkReal(41.0000000000000))*(sj3));
if( IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x895)))+(((sj6)*(x898))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((cj6)*(npy)*(x900)))+(((npx)*(sj6)*(x900))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x900)))+(((npx)*(sj6)*(x900)))))):(IkReal)1.0e30))*(((((x895)*(x896)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npy)*(x895)*(x897)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x896)*(x898)))+(((IkReal(-1.00000000000000))*(sj6)*(x897)*(x898)))+(((IkReal(-1.00000000000000))*(x895)*(x896)*((npy)*(npy))))+(((cj6)*(npx)*(x895)*(x899))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x895)))+(((sj6)*(x898)))))))+IKsqr(((((IKabs(((((cj6)*(npy)*(x900)))+(((npx)*(sj6)*(x900))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x900)))+(((npx)*(sj6)*(x900)))))):(IkReal)1.0e30))*(((((x895)*(x896)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npy)*(x895)*(x897)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x896)*(x898)))+(((IkReal(-1.00000000000000))*(sj6)*(x897)*(x898)))+(((IkReal(-1.00000000000000))*(x895)*(x896)*((npy)*(npy))))+(((cj6)*(npx)*(x895)*(x899)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x895)))+(((sj6)*(x898)))))), ((((IKabs(((((cj6)*(npy)*(x900)))+(((npx)*(sj6)*(x900))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x900)))+(((npx)*(sj6)*(x900)))))):(IkReal)1.0e30))*(((((x895)*(x896)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npy)*(x895)*(x897)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x896)*(x898)))+(((IkReal(-1.00000000000000))*(sj6)*(x897)*(x898)))+(((IkReal(-1.00000000000000))*(x895)*(x896)*((npy)*(npy))))+(((cj6)*(npx)*(x895)*(x899)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x901=IKcos(j4);
IkReal x902=IKsin(j4);
IkReal x903=((npy)*(sj6));
IkReal x904=((IkReal(1.00000000000000))*(npx));
IkReal x905=((IkReal(0.328000000000000))*(cj3));
IkReal x906=((IkReal(0.328000000000000))*(sj3));
IkReal x907=((cj6)*(x901));
IkReal x908=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x909=((sj5)*(x901));
IkReal x910=((cj5)*(x902));
IkReal x911=((cj5)*(x901));
evalcond[0]=((((IkReal(-1.00000000000000))*(x908)))+(((x902)*(x906)))+(((IkReal(-1.00000000000000))*(sj6)*(x904))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((cj5)*(x905)))+(((IkReal(-1.00000000000000))*(x906)*(x909))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x904)))+(((IkReal(0.323000000000000))*(sj5)))+(((sj5)*(x905)))+(((x906)*(x911)))+(x903));
evalcond[3]=((((npz)*(sj5)*(x902)))+(((x903)*(x910)))+(((npx)*(sj6)*(x901)))+(((IkReal(-1.00000000000000))*(cj6)*(x904)*(x910)))+(((npy)*(x907))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(x904)*(x907)))+(((IkReal(-1.00000000000000))*(x902)*(x908)))+(((IkReal(-1.00000000000000))*(sj6)*(x902)*(x904)))+(((x903)*(x911)))+(((npz)*(x909)))+(x906));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x912=(sj5)*(sj5);
if( IKabs(((npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x913=((IkReal(1.00000000000000))*(IKatan2(((npx)*(sj5)), ((IkReal(-1.00000000000000))*(npy)*(sj5)))));
if( (((((x912)*((npy)*(npy))))+(((x912)*((npx)*(npx)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x912)*((npy)*(npy))))+(((x912)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x912)*((npy)*(npy))))+(((x912)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x912)*((npy)*(npy))))+(((x912)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x912)*((npy)*(npy))))+(((x912)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x914=IKasin(((((IKabs(IKabs(IKsqrt(((((x912)*((npy)*(npy))))+(((x912)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x912)*((npy)*(npy))))+(((x912)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(x914))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x913)))+(x914));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=((((cj6)*(npy)*(sj3)))+(((npx)*(sj3)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x915=((IkReal(1.00000000000000))*(npy));
IkReal x916=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x916)))+(((IkReal(-1.00000000000000))*(cj6)*(x915))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.651000000000000))*(cj5))));
evalcond[4]=((IkReal(-0.651000000000000))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x915)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(0.651000000000000))*(sj5)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x916))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x917=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x917));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x917))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x918=IKcos(j4);
IkReal x919=IKsin(j4);
IkReal x920=((IkReal(1.00000000000000))*(npx));
IkReal x921=((cj5)*(x918));
evalcond[0]=((((npy)*(sj6)*(x921)))+(((IkReal(-1.00000000000000))*(sj6)*(x919)*(x920)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x919)))+(((npz)*(sj5)*(x918)))+(((IkReal(-1.00000000000000))*(cj6)*(x920)*(x921))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x922=((IkReal(1.00000000000000))*(npy));
IkReal x923=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x922)))+(((IkReal(-1.00000000000000))*(sj6)*(x923))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.00500000000000000))*(cj5))));
evalcond[4]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x922)))+(((cj5)*(npz)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x923)))+(((npy)*(sj6)))+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x924=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x924));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x924))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x925=IKcos(j4);
IkReal x926=IKsin(j4);
IkReal x927=((IkReal(1.00000000000000))*(npx));
IkReal x928=((cj5)*(x925));
evalcond[0]=((((npy)*(sj6)*(x928)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x926)))+(((IkReal(-1.00000000000000))*(cj6)*(x927)*(x928)))+(((IkReal(-1.00000000000000))*(sj6)*(x926)*(x927)))+(((npz)*(sj5)*(x925))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x929=((IkReal(0.328000000000000))*(cj3));
IkReal x930=((cj6)*(npx));
IkReal x931=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x929)))+(((IkReal(-1.00000000000000))*(x931)))+(x930));
evalcond[3]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(x930)))+(x931)+(x929));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x932=((IkReal(1.00000000000000))*(cj6));
IkReal x933=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x932)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(-0.651000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x933))));
evalcond[5]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x932)))+(x933));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x934=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x934));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x934))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x935=IKsin(j4);
IkReal x936=((IkReal(1.00000000000000))*(x935));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x936)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x936)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x937=((IkReal(1.00000000000000))*(cj6));
IkReal x938=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x937)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(0.00500000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x938))));
evalcond[5]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x937)))+(x938));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x939=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x939));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x939))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x940=IKsin(j4);
IkReal x941=((IkReal(1.00000000000000))*(x940));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x941)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x941)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst11)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst11)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x942=IKsin(j4);
IkReal x943=IKcos(j4);
IkReal x944=((IkReal(0.328000000000000))*(sj3));
IkReal x945=((npx)*(sj6));
IkReal x946=((cj6)*(npy));
IkReal x947=((IkReal(1.00000000000000))*(x942));
evalcond[0]=((((IkReal(-1.00000000000000))*(x945)))+(((IkReal(-1.00000000000000))*(x946)))+(((x942)*(x944))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x943)*(x944))));
evalcond[2]=((((npz)*(x942)))+(((x943)*(x945)))+(((x943)*(x946))));
evalcond[3]=((((npz)*(x943)))+(((IkReal(-1.00000000000000))*(x945)*(x947)))+(((IkReal(-1.00000000000000))*(x946)*(x947)))+(x944));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst10)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst10)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x948=IKsin(j4);
IkReal x949=IKcos(j4);
IkReal x950=((IkReal(0.328000000000000))*(sj3));
IkReal x951=((npx)*(sj6));
IkReal x952=((cj6)*(npy));
IkReal x953=((IkReal(1.00000000000000))*(x948));
evalcond[0]=((((IkReal(-1.00000000000000))*(x952)))+(((IkReal(-1.00000000000000))*(x951)))+(((x948)*(x950))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x949)*(x950))));
evalcond[2]=((((npz)*(x948)))+(((x949)*(x952)))+(((x949)*(x951))));
evalcond[3]=((((npz)*(x949)))+(((IkReal(-1.00000000000000))*(x951)*(x953)))+(((IkReal(-1.00000000000000))*(x952)*(x953)))+(x950));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x954=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x954;
evalcond[3]=x954;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x955=((IkReal(1.00000000000000))*(npx));
IkReal x956=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x955)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x955))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x956;
evalcond[5]=x956;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x957=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x957));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x957))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x958=IKsin(j4);
IkReal x959=((IkReal(1.00000000000000))*(x958));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x959)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x959)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x960=((IkReal(1.00000000000000))*(npx));
IkReal x961=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x960)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x960))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x961;
evalcond[5]=x961;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x962=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x962));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x962))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x963=IKsin(j4);
IkReal x964=((IkReal(1.00000000000000))*(x963));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x964)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x964)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst13)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst13)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x965=IKcos(j4);
IkReal x966=IKsin(j4);
IkReal x967=((IkReal(0.328000000000000))*(sj3));
IkReal x968=((IkReal(1.00000000000000))*(npz));
IkReal x969=((npx)*(sj6));
IkReal x970=((cj6)*(npy));
IkReal x971=((IkReal(1.00000000000000))*(x966));
evalcond[0]=((((IkReal(-1.00000000000000))*(x970)))+(((IkReal(-1.00000000000000))*(x969)))+(((x966)*(x967))));
evalcond[1]=((((x965)*(x967)))+(((IkReal(-1.00000000000000))*(x968))));
evalcond[2]=((((x965)*(x970)))+(((IkReal(-1.00000000000000))*(x966)*(x968)))+(((x965)*(x969))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x969)*(x971)))+(((IkReal(-1.00000000000000))*(x965)*(x968)))+(((IkReal(-1.00000000000000))*(x970)*(x971)))+(x967));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst12)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst12)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x972=IKcos(j4);
IkReal x973=IKsin(j4);
IkReal x974=((IkReal(0.328000000000000))*(sj3));
IkReal x975=((IkReal(1.00000000000000))*(npz));
IkReal x976=((npx)*(sj6));
IkReal x977=((cj6)*(npy));
IkReal x978=((IkReal(1.00000000000000))*(x973));
evalcond[0]=((((IkReal(-1.00000000000000))*(x977)))+(((IkReal(-1.00000000000000))*(x976)))+(((x973)*(x974))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x975)))+(((x972)*(x974))));
evalcond[2]=((((x972)*(x976)))+(((x972)*(x977)))+(((IkReal(-1.00000000000000))*(x973)*(x975))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x972)*(x975)))+(((IkReal(-1.00000000000000))*(x976)*(x978)))+(((IkReal(-1.00000000000000))*(x977)*(x978)))+(x974));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x979=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x979));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x979))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x980=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x980)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x980))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((npy)*(sj3)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x981=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x981))));
evalcond[3]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(-0.651000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x981)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x982=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x982));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x982))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x983=IKcos(j4);
IkReal x984=IKsin(j4);
IkReal x985=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((npy)*(sj6)*(x983)))+(((IkReal(-1.00000000000000))*(cj6)*(x983)*(x985)))+(((IkReal(-1.00000000000000))*(sj6)*(x984)*(x985)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x984))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x986=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x986))));
evalcond[3]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.00500000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x986)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x987=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x987));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x987))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x988=IKcos(j4);
IkReal x989=IKsin(j4);
IkReal x990=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x988)*(x990)))+(((IkReal(-1.00000000000000))*(sj6)*(x989)*(x990)))+(((npy)*(sj6)*(x988)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x989))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x991=((npy)*(sj6));
IkReal x992=((IkReal(41.0000000000000))*(sj3));
IkReal x993=((cj6)*(npx));
IkReal x994=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x995=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((x991)*(x992)))+(((IkReal(-1.00000000000000))*(x992)*(x993))))) != 0)?((IkReal)1/(((((x991)*(x992)))+(((IkReal(-1.00000000000000))*(x992)*(x993)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x991)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x993)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x993)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x991))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x991)))+(((IkReal(125.000000000000))*(x993))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x991)*(x992)))+(((IkReal(-1.00000000000000))*(x992)*(x993))))) != 0)?((IkReal)1/(((((x991)*(x992)))+(((IkReal(-1.00000000000000))*(x992)*(x993)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x991)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x993)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x993)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x991)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x991)))+(((IkReal(125.000000000000))*(x993)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((x991)*(x992)))+(((IkReal(-1.00000000000000))*(x992)*(x993))))) != 0)?((IkReal)1/(((((x991)*(x992)))+(((IkReal(-1.00000000000000))*(x992)*(x993)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x991)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x993)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x993)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x991)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x991)))+(((IkReal(125.000000000000))*(x993)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x996=IKcos(j4);
IkReal x997=IKsin(j4);
IkReal x998=((IkReal(0.328000000000000))*(sj3));
IkReal x999=((IkReal(1.00000000000000))*(cj6));
IkReal x1000=((npx)*(sj6));
IkReal x1001=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1000)))+(((x997)*(x998)))+(((IkReal(-1.00000000000000))*(npy)*(x999))));
evalcond[1]=((x1001)+(((x996)*(x998)))+(((IkReal(-1.00000000000000))*(npx)*(x999))));
evalcond[2]=((((x1000)*(x996)))+(((IkReal(-1.00000000000000))*(npx)*(x997)*(x999)))+(((x1001)*(x997)))+(((cj6)*(npy)*(x996))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x996)*(x999)))+(((x1001)*(x996)))+(((IkReal(-1.00000000000000))*(npy)*(x997)*(x999)))+(((IkReal(-1.00000000000000))*(x1000)*(x997)))+(x998));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1002=((npy)*(sj6));
IkReal x1003=((IkReal(5125.00000000000))*(sj3));
IkReal x1004=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1003)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1003))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1003)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1003)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x1002)*(x1002))))+(((IkReal(15625.0000000000))*((x1004)*(x1004))))+(((IkReal(-31250.0000000000))*(x1002)*(x1004)))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x1004)))+(((IkReal(-125.000000000000))*(x1002))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1003)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1003))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1003)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1003)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x1002)*(x1002))))+(((IkReal(15625.0000000000))*((x1004)*(x1004))))+(((IkReal(-31250.0000000000))*(x1002)*(x1004)))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x1004)))+(((IkReal(-125.000000000000))*(x1002)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1003)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1003))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1003)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1003)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x1002)*(x1002))))+(((IkReal(15625.0000000000))*((x1004)*(x1004))))+(((IkReal(-31250.0000000000))*(x1002)*(x1004)))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x1004)))+(((IkReal(-125.000000000000))*(x1002)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1005=IKcos(j4);
IkReal x1006=IKsin(j4);
IkReal x1007=((IkReal(0.328000000000000))*(sj3));
IkReal x1008=((IkReal(1.00000000000000))*(cj6));
IkReal x1009=((npx)*(sj6));
IkReal x1010=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1009)))+(((x1006)*(x1007)))+(((IkReal(-1.00000000000000))*(npy)*(x1008))));
evalcond[1]=((x1010)+(((x1005)*(x1007)))+(((IkReal(-1.00000000000000))*(npx)*(x1008))));
evalcond[2]=((((cj6)*(npy)*(x1005)))+(((x1006)*(x1010)))+(((x1005)*(x1009)))+(((IkReal(-1.00000000000000))*(npx)*(x1006)*(x1008))));
evalcond[3]=((x1007)+(((IkReal(-1.00000000000000))*(npy)*(x1006)*(x1008)))+(((IkReal(-1.00000000000000))*(x1006)*(x1009)))+(((x1005)*(x1010)))+(((IkReal(-1.00000000000000))*(npx)*(x1005)*(x1008))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1011=((IkReal(125.000000000000))*(npy));
IkReal x1012=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst14)*(((((sj6)*(x1012)))+(((cj6)*(x1011))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((cj6)*(x1012)))+(((IkReal(-1.00000000000000))*(sj6)*(x1011))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((sj6)*(x1012)))+(((cj6)*(x1011)))))), ((gconst14)*(((((cj6)*(x1012)))+(((IkReal(-1.00000000000000))*(sj6)*(x1011)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1013=IKcos(j4);
IkReal x1014=IKsin(j4);
IkReal x1015=((IkReal(0.328000000000000))*(sj3));
IkReal x1016=((IkReal(1.00000000000000))*(cj6));
IkReal x1017=((npx)*(sj6));
IkReal x1018=((npy)*(sj6));
evalcond[0]=((((x1014)*(x1015)))+(((IkReal(-1.00000000000000))*(npy)*(x1016)))+(((IkReal(-1.00000000000000))*(x1017))));
evalcond[1]=((x1018)+(((x1013)*(x1015)))+(((IkReal(-1.00000000000000))*(npx)*(x1016))));
evalcond[2]=((((x1014)*(x1018)))+(((x1013)*(x1017)))+(((cj6)*(npy)*(x1013)))+(((IkReal(-1.00000000000000))*(npx)*(x1014)*(x1016))));
evalcond[3]=((x1015)+(((IkReal(-1.00000000000000))*(npy)*(x1014)*(x1016)))+(((IkReal(-1.00000000000000))*(x1014)*(x1017)))+(((IkReal(-1.00000000000000))*(npx)*(x1013)*(x1016)))+(((x1013)*(x1018))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1019=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x1019;
evalcond[3]=x1019;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1020=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1020)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1020))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x1021=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x1022=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x1022))));
evalcond[3]=x1021;
evalcond[4]=x1021;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x1022)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1023=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x1023));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1023))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x1024=IKcos(j4);
IkReal x1025=IKsin(j4);
IkReal x1026=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((cj6)*(npx)*(x1024)))+(((IkReal(-1.00000000000000))*(npx)*(x1025)*(x1026)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1025)))+(((IkReal(-1.00000000000000))*(npy)*(x1024)*(x1026))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x1027=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x1028=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x1028))));
evalcond[3]=x1027;
evalcond[4]=x1027;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x1028)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x1029=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x1029));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x1029))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x1030=IKcos(j4);
IkReal x1031=IKsin(j4);
IkReal x1032=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(x1031)*(x1032)))+(((cj6)*(npx)*(x1030)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1031)))+(((IkReal(-1.00000000000000))*(npy)*(x1030)*(x1032))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1033=((npy)*(sj6));
IkReal x1034=((IkReal(41.0000000000000))*(sj3));
IkReal x1035=((cj6)*(npx));
IkReal x1036=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x1037=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x1033)*(x1034)))+(((x1034)*(x1035))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1033)*(x1034)))+(((x1034)*(x1035)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(npx)*(sj6)*(x1033)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x1035)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x1033)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x1035))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x1033)))+(((IkReal(-125.000000000000))*(x1035))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x1033)*(x1034)))+(((x1034)*(x1035))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1033)*(x1034)))+(((x1034)*(x1035)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(npx)*(sj6)*(x1033)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x1035)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x1033)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x1035)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x1033)))+(((IkReal(-125.000000000000))*(x1035)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x1033)*(x1034)))+(((x1034)*(x1035))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1033)*(x1034)))+(((x1034)*(x1035)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(npx)*(sj6)*(x1033)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x1035)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x1033)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x1035)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x1033)))+(((IkReal(-125.000000000000))*(x1035)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1038=IKcos(j4);
IkReal x1039=IKsin(j4);
IkReal x1040=((IkReal(0.328000000000000))*(sj3));
IkReal x1041=((cj6)*(npx));
IkReal x1042=((IkReal(1.00000000000000))*(npy));
IkReal x1043=((sj6)*(x1038));
IkReal x1044=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((x1039)*(x1040)))+(((IkReal(-1.00000000000000))*(cj6)*(x1042)))+(((IkReal(-1.00000000000000))*(x1044))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1038)*(x1040)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x1041))));
evalcond[2]=((((x1039)*(x1041)))+(((cj6)*(npy)*(x1038)))+(((IkReal(-1.00000000000000))*(sj6)*(x1039)*(x1042)))+(((npx)*(x1043))));
evalcond[3]=((((x1038)*(x1041)))+(x1040)+(((IkReal(-1.00000000000000))*(cj6)*(x1039)*(x1042)))+(((IkReal(-1.00000000000000))*(x1039)*(x1044)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1045=((npy)*(sj6));
IkReal x1046=((IkReal(5125.00000000000))*(sj3));
IkReal x1047=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1046)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1046))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1046)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1046)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x1045)*(x1045))))+(((IkReal(15625.0000000000))*((x1047)*(x1047))))+(((IkReal(-31250.0000000000))*(x1045)*(x1047)))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x1045)))+(((IkReal(-125.000000000000))*(x1047))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1046)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1046))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1046)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1046)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x1045)*(x1045))))+(((IkReal(15625.0000000000))*((x1047)*(x1047))))+(((IkReal(-31250.0000000000))*(x1045)*(x1047)))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x1045)))+(((IkReal(-125.000000000000))*(x1047)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1046)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1046))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x1046)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x1046)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x1045)*(x1045))))+(((IkReal(15625.0000000000))*((x1047)*(x1047))))+(((IkReal(-31250.0000000000))*(x1045)*(x1047)))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x1045)))+(((IkReal(-125.000000000000))*(x1047)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1048=IKcos(j4);
IkReal x1049=IKsin(j4);
IkReal x1050=((IkReal(0.328000000000000))*(sj3));
IkReal x1051=((cj6)*(npx));
IkReal x1052=((IkReal(1.00000000000000))*(npy));
IkReal x1053=((sj6)*(x1048));
IkReal x1054=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1054)))+(((x1049)*(x1050)))+(((IkReal(-1.00000000000000))*(cj6)*(x1052))));
evalcond[1]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x1051)))+(((IkReal(-1.00000000000000))*(x1048)*(x1050))));
evalcond[2]=((((x1049)*(x1051)))+(((npx)*(x1053)))+(((IkReal(-1.00000000000000))*(sj6)*(x1049)*(x1052)))+(((cj6)*(npy)*(x1048))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1052)*(x1053)))+(x1050)+(((IkReal(-1.00000000000000))*(cj6)*(x1049)*(x1052)))+(((x1048)*(x1051)))+(((IkReal(-1.00000000000000))*(x1049)*(x1054))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1055=((IkReal(125.000000000000))*(npy));
IkReal x1056=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst15)*(((((cj6)*(x1055)))+(((sj6)*(x1056))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((sj6)*(x1055)))+(((IkReal(-1.00000000000000))*(cj6)*(x1056))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((cj6)*(x1055)))+(((sj6)*(x1056)))))), ((gconst15)*(((((sj6)*(x1055)))+(((IkReal(-1.00000000000000))*(cj6)*(x1056)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1057=IKcos(j4);
IkReal x1058=IKsin(j4);
IkReal x1059=((IkReal(0.328000000000000))*(sj3));
IkReal x1060=((cj6)*(npx));
IkReal x1061=((IkReal(1.00000000000000))*(npy));
IkReal x1062=((sj6)*(x1057));
IkReal x1063=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x1061)))+(((IkReal(-1.00000000000000))*(x1063)))+(((x1058)*(x1059))));
evalcond[1]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x1057)*(x1059)))+(((IkReal(-1.00000000000000))*(x1060))));
evalcond[2]=((((npx)*(x1062)))+(((cj6)*(npy)*(x1057)))+(((x1058)*(x1060)))+(((IkReal(-1.00000000000000))*(sj6)*(x1058)*(x1061))));
evalcond[3]=((x1059)+(((IkReal(-1.00000000000000))*(x1058)*(x1063)))+(((x1057)*(x1060)))+(((IkReal(-1.00000000000000))*(x1061)*(x1062)))+(((IkReal(-1.00000000000000))*(cj6)*(x1058)*(x1061))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1064=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x1065=((IkReal(125.000000000000))*(npy));
IkReal x1066=((IkReal(0.0243902439024390))*(x1064));
IkReal x1067=((IkReal(125.000000000000))*(npx));
if( IKabs(((x1066)*(((((sj6)*(x1067)))+(((cj6)*(x1065))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1066)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x1065)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x1067))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1066)*(((((sj6)*(x1067)))+(((cj6)*(x1065)))))))+IKsqr(((x1066)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x1065)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x1067)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1066)*(((((sj6)*(x1067)))+(((cj6)*(x1065)))))), ((x1066)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x1065)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x1067)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1068=IKcos(j4);
IkReal x1069=IKsin(j4);
IkReal x1070=((npy)*(sj6));
IkReal x1071=((IkReal(1.00000000000000))*(npx));
IkReal x1072=((IkReal(0.328000000000000))*(cj3));
IkReal x1073=((IkReal(0.328000000000000))*(sj3));
IkReal x1074=((cj6)*(x1068));
IkReal x1075=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x1076=((sj5)*(x1068));
IkReal x1077=((cj5)*(x1069));
IkReal x1078=((cj5)*(x1068));
evalcond[0]=((((x1069)*(x1073)))+(((IkReal(-1.00000000000000))*(sj6)*(x1071)))+(((IkReal(-1.00000000000000))*(x1075))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1073)*(x1076)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((cj5)*(x1072))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x1071)))+(x1070)+(((IkReal(0.323000000000000))*(sj5)))+(((sj5)*(x1072)))+(((x1073)*(x1078))));
evalcond[3]=((((npx)*(sj6)*(x1068)))+(((x1070)*(x1077)))+(((npz)*(sj5)*(x1069)))+(((IkReal(-1.00000000000000))*(cj6)*(x1071)*(x1077)))+(((npy)*(x1074))));
evalcond[4]=((x1073)+(((IkReal(-1.00000000000000))*(cj5)*(x1071)*(x1074)))+(((x1070)*(x1078)))+(((IkReal(-1.00000000000000))*(sj6)*(x1069)*(x1071)))+(((npz)*(x1076)))+(((IkReal(-1.00000000000000))*(x1069)*(x1075))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1079=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x1080=((IkReal(0.0243902439024390))*(x1079));
if( IKabs(((x1080)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1080)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1080)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))))+IKsqr(((x1080)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1080)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((x1080)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1081=IKcos(j4);
IkReal x1082=IKsin(j4);
IkReal x1083=((npy)*(sj6));
IkReal x1084=((IkReal(1.00000000000000))*(npx));
IkReal x1085=((IkReal(0.328000000000000))*(cj3));
IkReal x1086=((IkReal(0.328000000000000))*(sj3));
IkReal x1087=((cj6)*(x1081));
IkReal x1088=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x1089=((sj5)*(x1081));
IkReal x1090=((cj5)*(x1082));
IkReal x1091=((cj5)*(x1081));
evalcond[0]=((((x1082)*(x1086)))+(((IkReal(-1.00000000000000))*(sj6)*(x1084)))+(((IkReal(-1.00000000000000))*(x1088))));
evalcond[1]=((((cj5)*(x1085)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x1086)*(x1089))));
evalcond[2]=((((sj5)*(x1085)))+(x1083)+(((x1086)*(x1091)))+(((IkReal(0.323000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x1084))));
evalcond[3]=((((x1083)*(x1090)))+(((npy)*(x1087)))+(((npz)*(sj5)*(x1082)))+(((npx)*(sj6)*(x1081)))+(((IkReal(-1.00000000000000))*(cj6)*(x1084)*(x1090))));
evalcond[4]=((((x1083)*(x1091)))+(x1086)+(((npz)*(x1089)))+(((IkReal(-1.00000000000000))*(cj5)*(x1084)*(x1087)))+(((IkReal(-1.00000000000000))*(sj6)*(x1082)*(x1084)))+(((IkReal(-1.00000000000000))*(x1082)*(x1088))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1092=((IkReal(125.000000000000))*(cj6));
IkReal x1093=((cj5)*(sj6));
IkReal x1094=((npz)*(sj5));
IkReal x1095=((IkReal(125.000000000000))*(npx));
IkReal x1096=((cj5)*(npy));
IkReal x1097=((IkReal(41.0000000000000))*(sj3));
if( IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x1092)))+(((sj6)*(x1095))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((cj6)*(npy)*(x1097)))+(((npx)*(sj6)*(x1097))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x1097)))+(((npx)*(sj6)*(x1097)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x1092)*(x1093)*((npy)*(npy))))+(((x1092)*(x1093)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x1093)*(x1095)))+(((IkReal(-1.00000000000000))*(sj6)*(x1094)*(x1095)))+(((cj6)*(npx)*(x1092)*(x1096)))+(((IkReal(-1.00000000000000))*(npy)*(x1092)*(x1094))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x1092)))+(((sj6)*(x1095)))))))+IKsqr(((((IKabs(((((cj6)*(npy)*(x1097)))+(((npx)*(sj6)*(x1097))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x1097)))+(((npx)*(sj6)*(x1097)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x1092)*(x1093)*((npy)*(npy))))+(((x1092)*(x1093)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x1093)*(x1095)))+(((IkReal(-1.00000000000000))*(sj6)*(x1094)*(x1095)))+(((cj6)*(npx)*(x1092)*(x1096)))+(((IkReal(-1.00000000000000))*(npy)*(x1092)*(x1094)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((npy)*(x1092)))+(((sj6)*(x1095)))))), ((((IKabs(((((cj6)*(npy)*(x1097)))+(((npx)*(sj6)*(x1097))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x1097)))+(((npx)*(sj6)*(x1097)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x1092)*(x1093)*((npy)*(npy))))+(((x1092)*(x1093)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x1093)*(x1095)))+(((IkReal(-1.00000000000000))*(sj6)*(x1094)*(x1095)))+(((cj6)*(npx)*(x1092)*(x1096)))+(((IkReal(-1.00000000000000))*(npy)*(x1092)*(x1094)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x1098=IKcos(j4);
IkReal x1099=IKsin(j4);
IkReal x1100=((npy)*(sj6));
IkReal x1101=((IkReal(1.00000000000000))*(npx));
IkReal x1102=((IkReal(0.328000000000000))*(cj3));
IkReal x1103=((IkReal(0.328000000000000))*(sj3));
IkReal x1104=((cj6)*(x1098));
IkReal x1105=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x1106=((sj5)*(x1098));
IkReal x1107=((cj5)*(x1099));
IkReal x1108=((cj5)*(x1098));
evalcond[0]=((((x1099)*(x1103)))+(((IkReal(-1.00000000000000))*(sj6)*(x1101)))+(((IkReal(-1.00000000000000))*(x1105))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1103)*(x1106)))+(((cj5)*(x1102)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5))));
evalcond[2]=((x1100)+(((IkReal(0.323000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x1101)))+(((x1103)*(x1108)))+(((sj5)*(x1102))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(x1101)*(x1107)))+(((npy)*(x1104)))+(((npx)*(sj6)*(x1098)))+(((x1100)*(x1107)))+(((npz)*(sj5)*(x1099))));
evalcond[4]=((x1103)+(((IkReal(-1.00000000000000))*(x1099)*(x1105)))+(((x1100)*(x1108)))+(((IkReal(-1.00000000000000))*(sj6)*(x1099)*(x1101)))+(((IkReal(-1.00000000000000))*(cj5)*(x1101)*(x1104)))+(((npz)*(x1106))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x126=((IkReal(1.00000000000000))*(sj6));
IkReal x127=((IkReal(1.00000000000000))*(sj5));
IkReal x128=((IkReal(1.00000000000000))*(sj3));
IkReal x129=((IkReal(1.00000000000000))*(cj3));
IkReal x130=((IkReal(1.00000000000000))*(cj6));
IkReal x131=((IkReal(1.00000000000000))*(sj4));
IkReal x132=((IkReal(-1.00000000000000))*(sj4));
IkReal x133=((IkReal(-1.00000000000000))*(sj5));
IkReal x134=((((cj6)*(r00)))+(((IkReal(-1.00000000000000))*(r01)*(x126))));
IkReal x135=((((IkReal(-1.00000000000000))*(r11)*(x126)))+(((cj6)*(r10))));
IkReal x136=((((cj6)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x126))));
IkReal x137=((cj5)*(x134));
IkReal x138=((cj5)*(x135));
IkReal x139=((cj5)*(x136));
IkReal x140=((((IkReal(-1.00000000000000))*(r00)*(x126)))+(((IkReal(-1.00000000000000))*(r01)*(x130))));
IkReal x141=((((IkReal(-1.00000000000000))*(r10)*(x126)))+(((IkReal(-1.00000000000000))*(r11)*(x130))));
IkReal x142=((((IkReal(-1.00000000000000))*(r20)*(x126)))+(((IkReal(-1.00000000000000))*(r21)*(x130))));
IkReal x143=((((sj5)*(x134)))+(((cj5)*(r02))));
IkReal x144=((((cj5)*(r12)))+(((sj5)*(x135))));
IkReal x145=((((IkReal(-1.00000000000000))*(r12)*(x127)))+(x138));
IkReal x146=((x139)+(((IkReal(-1.00000000000000))*(r22)*(x127))));
IkReal x147=((((cj5)*(r22)))+(((sj5)*(x136))));
IkReal x148=((((cj4)*(((((r02)*(x133)))+(x137)))))+(((x132)*(x140))));
new_r00=((((IkReal(-1.00000000000000))*(x128)*(x143)))+(((cj3)*(x148))));
new_r01=((((sj4)*(((x137)+(((IkReal(-1.00000000000000))*(r02)*(x127)))))))+(((cj4)*(x140))));
new_r02=((((IkReal(-1.00000000000000))*(x128)*(x148)))+(((IkReal(-1.00000000000000))*(x129)*(x143))));
new_r10=((((IkReal(-1.00000000000000))*(x128)*(x144)))+(((cj3)*(((((cj4)*(((x138)+(((r12)*(x133)))))))+(((x132)*(x141))))))));
new_r11=((((sj4)*(x145)))+(((cj4)*(x141))));
new_r12=((((IkReal(-1.00000000000000))*(x129)*(x144)))+(((IkReal(-1.00000000000000))*(x128)*(((((IkReal(-1.00000000000000))*(x131)*(x141)))+(((cj4)*(x145))))))));
new_r20=((((IkReal(-1.00000000000000))*(x128)*(x147)))+(((cj3)*(((((cj4)*(((((r22)*(x133)))+(x139)))))+(((x132)*(x142))))))));
new_r21=((((sj4)*(x146)))+(((cj4)*(x142))));
new_r22=((((IkReal(-1.00000000000000))*(x128)*(((((IkReal(-1.00000000000000))*(x131)*(x142)))+(((cj4)*(x146)))))))+(((IkReal(-1.00000000000000))*(x129)*(x147))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(((((IkReal(2500001740.49939))*((new_r12)*(new_r12))))+(((IkReal(2500001740.49939))*((new_r02)*(new_r02))))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((IkReal(2500003481.00000))*((new_r12)*(new_r12))))+(((IkReal(2500003481.00000))*((new_r02)*(new_r02))))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x149=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x149));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x149))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x150=IKsin(j0);
IkReal x151=IKcos(j0);
IkReal x152=((IkReal(0.00117999917848486))*(new_r12));
IkReal x153=((IkReal(0.999999303800727))*(x150));
IkReal x154=((new_r02)*(x150));
IkReal x155=((IkReal(0.999999303800727))*(x151));
evalcond[0]=((((new_r12)*(x151)))+(((IkReal(-1.00000000000000))*(x154))));
evalcond[1]=((((x150)*(x152)))+(((IkReal(0.00117999917848486))*(new_r02)*(x151)))+(((IkReal(-1.00000000000000))*(new_r12)*(x155)))+(((new_r02)*(x153))));
evalcond[2]=((((IkReal(0.00117999917848486))*(x154)))+(((IkReal(-1.00000000000000))*(x151)*(x152)))+(((IkReal(-1.00000000000000))*(new_r02)*(x155)))+(((IkReal(-1.00000000000000))*(new_r12)*(x153))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x156=((new_r11)*(sj0));
IkReal x157=((cj0)*(new_r01));
IkReal x158=((new_r10)*(sj0));
IkReal x159=((cj0)*(new_r00));
if( IKabs(((((IkReal(0.00117999917848486))*(x159)))+(((IkReal(0.00117999917848486))*(x158)))+(((IkReal(0.999999303800727))*(x156)))+(((IkReal(0.999999303800727))*(x157))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.00117999917848486))*(x157)))+(((IkReal(0.00117999917848486))*(x156)))+(((IkReal(-0.999999303800727))*(x158)))+(((IkReal(-0.999999303800727))*(x159))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(0.00117999917848486))*(x159)))+(((IkReal(0.00117999917848486))*(x158)))+(((IkReal(0.999999303800727))*(x156)))+(((IkReal(0.999999303800727))*(x157)))))+IKsqr(((((IkReal(0.00117999917848486))*(x157)))+(((IkReal(0.00117999917848486))*(x156)))+(((IkReal(-0.999999303800727))*(x158)))+(((IkReal(-0.999999303800727))*(x159)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(0.00117999917848486))*(x159)))+(((IkReal(0.00117999917848486))*(x158)))+(((IkReal(0.999999303800727))*(x156)))+(((IkReal(0.999999303800727))*(x157)))), ((((IkReal(0.00117999917848486))*(x157)))+(((IkReal(0.00117999917848486))*(x156)))+(((IkReal(-0.999999303800727))*(x158)))+(((IkReal(-0.999999303800727))*(x159)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x160=IKsin(j2);
IkReal x161=IKcos(j2);
IkReal x162=((new_r01)*(sj0));
IkReal x163=((cj0)*(new_r10));
IkReal x164=((new_r10)*(sj0));
IkReal x165=((cj0)*(new_r00));
IkReal x166=((cj0)*(new_r11));
IkReal x167=((new_r00)*(sj0));
IkReal x168=((new_r11)*(sj0));
IkReal x169=((cj0)*(new_r01));
IkReal x170=((IkReal(0.999999303800727))*(x160));
IkReal x171=((IkReal(0.00117999917848486))*(x161));
IkReal x172=((IkReal(0.999999303800727))*(x161));
IkReal x173=((IkReal(0.00117999917848486))*(x160));
IkReal x174=((IkReal(1.00000000000000))*(x161));
IkReal x175=((x171)+(x170));
evalcond[0]=((((IkReal(-1.00000000000000))*(x173)))+(x172)+(x164)+(x165));
evalcond[1]=((((IkReal(-1.00000000000000))*(x175)))+(x168)+(x169));
evalcond[2]=((x175)+(x163)+(((IkReal(-1.00000000000000))*(x167))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x173)))+(x172)+(x166)+(((IkReal(-1.00000000000000))*(x162))));
evalcond[4]=((((IkReal(0.999999303800727))*(x167)))+(((IkReal(-1.00000000000000))*(x160)))+(((IkReal(-0.999999303800727))*(x163)))+(((IkReal(0.00117999917848486))*(x164)))+(((IkReal(0.00117999917848486))*(x165))));
evalcond[5]=((((IkReal(0.999999303800727))*(x162)))+(((IkReal(-1.00000000000000))*(x174)))+(((IkReal(-0.999999303800727))*(x166)))+(((IkReal(0.00117999917848486))*(x168)))+(((IkReal(0.00117999917848486))*(x169))));
evalcond[6]=((x160)+(((IkReal(-0.00117999917848486))*(x166)))+(((IkReal(-0.999999303800727))*(x169)))+(((IkReal(-0.999999303800727))*(x168)))+(((IkReal(0.00117999917848486))*(x162))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x174)))+(((IkReal(-0.00117999917848486))*(x163)))+(((IkReal(-0.999999303800727))*(x165)))+(((IkReal(-0.999999303800727))*(x164)))+(((IkReal(0.00117999917848486))*(x167))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x176=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x176;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x176;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x177=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x177));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x177))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x178=IKsin(j0);
IkReal x179=IKcos(j0);
IkReal x180=((IkReal(0.00117999917848486))*(new_r12));
IkReal x181=((IkReal(0.999999303800727))*(x178));
IkReal x182=((new_r02)*(x178));
IkReal x183=((IkReal(0.999999303800727))*(x179));
evalcond[0]=((((new_r12)*(x179)))+(((IkReal(-1.00000000000000))*(x182))));
evalcond[1]=((((new_r02)*(x181)))+(((x178)*(x180)))+(((IkReal(0.00117999917848486))*(new_r02)*(x179)))+(((IkReal(-1.00000000000000))*(new_r12)*(x183))));
evalcond[2]=((((new_r02)*(x183)))+(((new_r12)*(x181)))+(((x179)*(x180)))+(((IkReal(-0.00117999917848486))*(x182))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x184=((new_r11)*(sj0));
IkReal x185=((IkReal(0.999999303800727))*(cj0));
IkReal x186=((IkReal(0.00117999917848486))*(cj0));
IkReal x187=((new_r10)*(sj0));
if( IKabs(((((IkReal(0.00117999917848486))*(x187)))+(((new_r00)*(x186)))+(((IkReal(-1.00000000000000))*(new_r01)*(x185)))+(((IkReal(-0.999999303800727))*(x184))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.00117999917848486))*(x184)))+(((IkReal(0.999999303800727))*(x187)))+(((new_r00)*(x185)))+(((new_r01)*(x186))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(0.00117999917848486))*(x187)))+(((new_r00)*(x186)))+(((IkReal(-1.00000000000000))*(new_r01)*(x185)))+(((IkReal(-0.999999303800727))*(x184)))))+IKsqr(((((IkReal(0.00117999917848486))*(x184)))+(((IkReal(0.999999303800727))*(x187)))+(((new_r00)*(x185)))+(((new_r01)*(x186)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(0.00117999917848486))*(x187)))+(((new_r00)*(x186)))+(((IkReal(-1.00000000000000))*(new_r01)*(x185)))+(((IkReal(-0.999999303800727))*(x184)))), ((((IkReal(0.00117999917848486))*(x184)))+(((IkReal(0.999999303800727))*(x187)))+(((new_r00)*(x185)))+(((new_r01)*(x186)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x188=IKsin(j2);
IkReal x189=IKcos(j2);
IkReal x190=((new_r01)*(sj0));
IkReal x191=((cj0)*(new_r10));
IkReal x192=((new_r10)*(sj0));
IkReal x193=((cj0)*(new_r00));
IkReal x194=((cj0)*(new_r11));
IkReal x195=((new_r00)*(sj0));
IkReal x196=((new_r11)*(sj0));
IkReal x197=((cj0)*(new_r01));
IkReal x198=((IkReal(0.999999303800727))*(x188));
IkReal x199=((IkReal(0.00117999917848486))*(x189));
IkReal x200=((IkReal(0.999999303800727))*(x189));
IkReal x201=((IkReal(0.00117999917848486))*(x188));
IkReal x202=((IkReal(1.00000000000000))*(x189));
IkReal x203=((x201)+(x200));
evalcond[0]=((x193)+(x192)+(((IkReal(-1.00000000000000))*(x203))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x199)))+(x198)+(x197)+(x196));
evalcond[2]=((((IkReal(-1.00000000000000))*(x195)))+(((IkReal(-1.00000000000000))*(x199)))+(x198)+(x191));
evalcond[3]=((((IkReal(-1.00000000000000))*(x190)))+(x194)+(x203));
evalcond[4]=((((IkReal(0.00117999917848486))*(x193)))+(((IkReal(0.00117999917848486))*(x192)))+(((IkReal(0.999999303800727))*(x195)))+(((IkReal(-1.00000000000000))*(x188)))+(((IkReal(-0.999999303800727))*(x191))));
evalcond[5]=((((IkReal(0.00117999917848486))*(x197)))+(((IkReal(0.00117999917848486))*(x196)))+(((IkReal(0.999999303800727))*(x190)))+(((IkReal(-1.00000000000000))*(x202)))+(((IkReal(-0.999999303800727))*(x194))));
evalcond[6]=((((IkReal(0.00117999917848486))*(x194)))+(((IkReal(0.999999303800727))*(x197)))+(((IkReal(0.999999303800727))*(x196)))+(x188)+(((IkReal(-0.00117999917848486))*(x190))));
evalcond[7]=((((IkReal(0.00117999917848486))*(x191)))+(((IkReal(0.999999303800727))*(x192)))+(((IkReal(0.999999303800727))*(x193)))+(((IkReal(-1.00000000000000))*(x202)))+(((IkReal(-0.00117999917848486))*(x195))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x204=((IkReal(2950002.05378929))*(sj1));
IkReal x205=((IkReal(2500001740.49939))*(sj1));
if( IKabs(((gconst22)*(((((new_r02)*(x204)))+(((IkReal(-1.00000000000000))*(new_r12)*(x205))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(new_r02)*(x205)))+(((IkReal(-1.00000000000000))*(new_r12)*(x204))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst22)*(((((new_r02)*(x204)))+(((IkReal(-1.00000000000000))*(new_r12)*(x205)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(new_r02)*(x205)))+(((IkReal(-1.00000000000000))*(new_r12)*(x204)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[7];
IkReal x206=IKcos(j0);
IkReal x207=IKsin(j0);
IkReal x208=((IkReal(0.00117999917848486))*(sj1));
IkReal x209=((IkReal(0.00117999917848486))*(cj1));
IkReal x210=((IkReal(1.00000000000000))*(cj1));
IkReal x211=((IkReal(0.999999303800727))*(cj1));
IkReal x212=((IkReal(0.999999303800727))*(sj1));
IkReal x213=((new_r02)*(x207));
IkReal x214=((new_r12)*(x206));
IkReal x215=((new_r12)*(x207));
IkReal x216=((new_r02)*(x206));
evalcond[0]=((x212)+(x215)+(x216));
evalcond[1]=((x214)+(x208)+(((IkReal(-1.00000000000000))*(x213))));
evalcond[2]=((((IkReal(-0.999999303800727))*(x214)))+(((IkReal(0.00117999917848486))*(x215)))+(((IkReal(0.00117999917848486))*(x216)))+(((IkReal(0.999999303800727))*(x213))));
evalcond[3]=((((x209)*(x213)))+(((IkReal(-1.00000000000000))*(x211)*(x215)))+(((IkReal(-1.00000000000000))*(x211)*(x216)))+(((IkReal(-1.00000000000000))*(new_r22)*(sj1)))+(((IkReal(-1.00000000000000))*(x209)*(x214))));
evalcond[4]=((((new_r10)*(x206)*(x208)))+(((IkReal(-1.00000000000000))*(new_r00)*(x207)*(x208)))+(((new_r00)*(x206)*(x212)))+(((IkReal(-1.00000000000000))*(new_r20)*(x210)))+(((new_r10)*(x207)*(x212))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r01)*(x207)*(x208)))+(((new_r11)*(x207)*(x212)))+(((new_r01)*(x206)*(x212)))+(((IkReal(-1.00000000000000))*(new_r21)*(x210)))+(((new_r11)*(x206)*(x208))));
evalcond[6]=((IkReal(1.00000000000000))+(((x208)*(x214)))+(((x212)*(x216)))+(((x212)*(x215)))+(((IkReal(-1.00000000000000))*(new_r22)*(x210)))+(((IkReal(-1.00000000000000))*(x208)*(x213))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x217=((IkReal(0.00117999917848486))*(new_r02));
IkReal x218=((cj0)*(new_r12));
IkReal x219=((new_r12)*(sj0));
IkReal x220=((IkReal(0.999999303800727))*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((x219)+(((cj0)*(new_r02))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(x218));
evalcond[6]=((((cj0)*(x217)))+(((IkReal(-0.999999303800727))*(x218)))+(((sj0)*(x220)))+(((IkReal(0.00117999917848486))*(x219))));
evalcond[7]=((((IkReal(-0.999999303800727))*(x219)))+(((IkReal(-1.00000000000000))*(cj0)*(x220)))+(((IkReal(-0.00117999917848486))*(x218)))+(((sj0)*(x217))));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x221=((new_r11)*(sj0));
IkReal x222=((cj0)*(new_r01));
IkReal x223=((new_r10)*(sj0));
IkReal x224=((cj0)*(new_r00));
if( IKabs(((((IkReal(0.999999303800727))*(x221)))+(((IkReal(0.999999303800727))*(x222)))+(((IkReal(0.00117999917848486))*(x223)))+(((IkReal(0.00117999917848486))*(x224))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.00117999917848486))*(x221)))+(((IkReal(0.00117999917848486))*(x222)))+(((IkReal(-0.999999303800727))*(x223)))+(((IkReal(-0.999999303800727))*(x224))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(0.999999303800727))*(x221)))+(((IkReal(0.999999303800727))*(x222)))+(((IkReal(0.00117999917848486))*(x223)))+(((IkReal(0.00117999917848486))*(x224)))))+IKsqr(((((IkReal(0.00117999917848486))*(x221)))+(((IkReal(0.00117999917848486))*(x222)))+(((IkReal(-0.999999303800727))*(x223)))+(((IkReal(-0.999999303800727))*(x224)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(0.999999303800727))*(x221)))+(((IkReal(0.999999303800727))*(x222)))+(((IkReal(0.00117999917848486))*(x223)))+(((IkReal(0.00117999917848486))*(x224)))), ((((IkReal(0.00117999917848486))*(x221)))+(((IkReal(0.00117999917848486))*(x222)))+(((IkReal(-0.999999303800727))*(x223)))+(((IkReal(-0.999999303800727))*(x224)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x225=IKsin(j2);
IkReal x226=IKcos(j2);
IkReal x227=((new_r01)*(sj0));
IkReal x228=((cj0)*(new_r10));
IkReal x229=((new_r10)*(sj0));
IkReal x230=((cj0)*(new_r00));
IkReal x231=((cj0)*(new_r11));
IkReal x232=((new_r00)*(sj0));
IkReal x233=((new_r11)*(sj0));
IkReal x234=((cj0)*(new_r01));
IkReal x235=((IkReal(0.999999303800727))*(x225));
IkReal x236=((IkReal(0.00117999917848486))*(x226));
IkReal x237=((IkReal(0.999999303800727))*(x226));
IkReal x238=((IkReal(0.00117999917848486))*(x225));
IkReal x239=((IkReal(1.00000000000000))*(x226));
IkReal x240=((x236)+(x235));
evalcond[0]=((((IkReal(-1.00000000000000))*(x238)))+(x229)+(x230)+(x237));
evalcond[1]=((x233)+(x234)+(((IkReal(-1.00000000000000))*(x240))));
evalcond[2]=((x228)+(x240)+(((IkReal(-1.00000000000000))*(x232))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x238)))+(x231)+(x237)+(((IkReal(-1.00000000000000))*(x227))));
evalcond[4]=((((IkReal(0.00117999917848486))*(x230)))+(((IkReal(0.00117999917848486))*(x229)))+(((IkReal(0.999999303800727))*(x232)))+(((IkReal(-0.999999303800727))*(x228)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[5]=((((IkReal(0.999999303800727))*(x227)))+(((IkReal(0.00117999917848486))*(x233)))+(((IkReal(0.00117999917848486))*(x234)))+(((IkReal(-1.00000000000000))*(x239)))+(((IkReal(-0.999999303800727))*(x231))));
evalcond[6]=((((IkReal(0.00117999917848486))*(x227)))+(x225)+(((IkReal(-0.999999303800727))*(x233)))+(((IkReal(-0.999999303800727))*(x234)))+(((IkReal(-0.00117999917848486))*(x231))));
evalcond[7]=((((IkReal(0.00117999917848486))*(x232)))+(((IkReal(-1.00000000000000))*(x239)))+(((IkReal(-0.999999303800727))*(x229)))+(((IkReal(-0.00117999917848486))*(x228)))+(((IkReal(-0.999999303800727))*(x230))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x241=((IkReal(1.00000000000000))+(new_r22));
IkReal x242=((IkReal(0.00117999917848486))*(new_r02));
IkReal x243=((cj0)*(new_r12));
IkReal x244=((new_r12)*(sj0));
IkReal x245=((IkReal(0.999999303800727))*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x241;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((x244)+(((cj0)*(new_r02))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(x243));
evalcond[6]=((((cj0)*(x242)))+(((IkReal(-0.999999303800727))*(x243)))+(((sj0)*(x245)))+(((IkReal(0.00117999917848486))*(x244))));
evalcond[7]=((((cj0)*(x245)))+(((IkReal(-1.00000000000000))*(sj0)*(x242)))+(((IkReal(0.999999303800727))*(x244)))+(((IkReal(0.00117999917848486))*(x243))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x241;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x246=((new_r11)*(sj0));
IkReal x247=((IkReal(0.999999303800727))*(cj0));
IkReal x248=((IkReal(0.00117999917848486))*(cj0));
IkReal x249=((new_r10)*(sj0));
if( IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(x247)))+(((IkReal(-0.999999303800727))*(x246)))+(((new_r00)*(x248)))+(((IkReal(0.00117999917848486))*(x249))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r00)*(x247)))+(((new_r01)*(x248)))+(((IkReal(0.999999303800727))*(x249)))+(((IkReal(0.00117999917848486))*(x246))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(x247)))+(((IkReal(-0.999999303800727))*(x246)))+(((new_r00)*(x248)))+(((IkReal(0.00117999917848486))*(x249)))))+IKsqr(((((new_r00)*(x247)))+(((new_r01)*(x248)))+(((IkReal(0.999999303800727))*(x249)))+(((IkReal(0.00117999917848486))*(x246)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r01)*(x247)))+(((IkReal(-0.999999303800727))*(x246)))+(((new_r00)*(x248)))+(((IkReal(0.00117999917848486))*(x249)))), ((((new_r00)*(x247)))+(((new_r01)*(x248)))+(((IkReal(0.999999303800727))*(x249)))+(((IkReal(0.00117999917848486))*(x246)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x250=IKsin(j2);
IkReal x251=IKcos(j2);
IkReal x252=((new_r01)*(sj0));
IkReal x253=((cj0)*(new_r10));
IkReal x254=((new_r10)*(sj0));
IkReal x255=((cj0)*(new_r00));
IkReal x256=((cj0)*(new_r11));
IkReal x257=((new_r00)*(sj0));
IkReal x258=((new_r11)*(sj0));
IkReal x259=((cj0)*(new_r01));
IkReal x260=((IkReal(0.999999303800727))*(x250));
IkReal x261=((IkReal(0.00117999917848486))*(x251));
IkReal x262=((IkReal(0.999999303800727))*(x251));
IkReal x263=((IkReal(0.00117999917848486))*(x250));
IkReal x264=((IkReal(1.00000000000000))*(x251));
IkReal x265=((x263)+(x262));
evalcond[0]=((x254)+(x255)+(((IkReal(-1.00000000000000))*(x265))));
evalcond[1]=((x258)+(x259)+(x260)+(((IkReal(-1.00000000000000))*(x261))));
evalcond[2]=((x253)+(x260)+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(x257))));
evalcond[3]=((x256)+(x265)+(((IkReal(-1.00000000000000))*(x252))));
evalcond[4]=((((IkReal(0.999999303800727))*(x257)))+(((IkReal(0.00117999917848486))*(x254)))+(((IkReal(0.00117999917848486))*(x255)))+(((IkReal(-0.999999303800727))*(x253)))+(((IkReal(-1.00000000000000))*(x250))));
evalcond[5]=((((IkReal(0.999999303800727))*(x252)))+(((IkReal(0.00117999917848486))*(x258)))+(((IkReal(0.00117999917848486))*(x259)))+(((IkReal(-0.999999303800727))*(x256)))+(((IkReal(-1.00000000000000))*(x264))));
evalcond[6]=((((IkReal(0.999999303800727))*(x259)))+(((IkReal(0.999999303800727))*(x258)))+(((IkReal(0.00117999917848486))*(x256)))+(x250)+(((IkReal(-0.00117999917848486))*(x252))));
evalcond[7]=((((IkReal(0.999999303800727))*(x255)))+(((IkReal(0.999999303800727))*(x254)))+(((IkReal(0.00117999917848486))*(x253)))+(((IkReal(-0.00117999917848486))*(x257)))+(((IkReal(-1.00000000000000))*(x264))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x266=((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30);
IkReal x267=((IkReal(50000.0348099879))*(sj1));
if( IKabs(((IkReal(2.00000000000000e-5))*(x266)*(((((IkReal(59.0000000000000))*(cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(cj0)*(new_r10)*(x267)))+(((new_r00)*(sj0)*(x267))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x266))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(2.00000000000000e-5))*(x266)*(((((IkReal(59.0000000000000))*(cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(cj0)*(new_r10)*(x267)))+(((new_r00)*(sj0)*(x267)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x266)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(2.00000000000000e-5))*(x266)*(((((IkReal(59.0000000000000))*(cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(cj0)*(new_r10)*(x267)))+(((new_r00)*(sj0)*(x267)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x266)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x268=IKcos(j2);
IkReal x269=IKsin(j2);
IkReal x270=((IkReal(1.00000000000000))*(sj1));
IkReal x271=((new_r01)*(sj0));
IkReal x272=((cj0)*(new_r10));
IkReal x273=((IkReal(0.00117999917848486))*(sj0));
IkReal x274=((IkReal(0.00117999917848486))*(cj1));
IkReal x275=((cj0)*(new_r00));
IkReal x276=((cj0)*(new_r11));
IkReal x277=((IkReal(0.999999303800727))*(cj1));
IkReal x278=((new_r00)*(sj0));
IkReal x279=((cj0)*(new_r01));
IkReal x280=((new_r11)*(sj0));
IkReal x281=((new_r10)*(sj0));
IkReal x282=((IkReal(1.00000000000000))*(x268));
evalcond[0]=((new_r20)+(((sj1)*(x268))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x269)*(x270)))+(new_r21));
evalcond[2]=((((IkReal(-0.00117999917848486))*(x269)))+(x275)+(x281)+(((x268)*(x277))));
evalcond[3]=((((IkReal(-0.00117999917848486))*(x268)))+(((IkReal(-1.00000000000000))*(x269)*(x277)))+(x279)+(x280));
evalcond[4]=((((IkReal(-1.00000000000000))*(x278)))+(x272)+(((IkReal(0.999999303800727))*(x269)))+(((x268)*(x274))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x271)))+(((IkReal(-1.00000000000000))*(x269)*(x274)))+(x276)+(((IkReal(0.999999303800727))*(x268))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x269)))+(((IkReal(-0.999999303800727))*(x272)))+(((IkReal(0.999999303800727))*(x278)))+(((IkReal(0.00117999917848486))*(x275)))+(((new_r10)*(x273))));
evalcond[7]=((((IkReal(-0.999999303800727))*(x276)))+(((IkReal(-1.00000000000000))*(x282)))+(((IkReal(0.999999303800727))*(x271)))+(((new_r11)*(x273)))+(((IkReal(0.00117999917848486))*(x279))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x277)*(x280)))+(((IkReal(-1.00000000000000))*(x274)*(x276)))+(((x271)*(x274)))+(((IkReal(-1.00000000000000))*(x277)*(x279)))+(((IkReal(-1.00000000000000))*(new_r21)*(x270)))+(x269));
evalcond[9]=((((IkReal(-1.00000000000000))*(x272)*(x274)))+(((IkReal(-1.00000000000000))*(x277)*(x281)))+(((cj1)*(new_r00)*(x273)))+(((IkReal(-1.00000000000000))*(new_r20)*(x270)))+(((IkReal(-1.00000000000000))*(x282)))+(((IkReal(-1.00000000000000))*(x275)*(x277))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x283=((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30);
IkReal x284=((IkReal(50000.0348099879))*(sj1));
if( IKabs(((IkReal(0.0169491525423729))*(x283)*(((((cj0)*(new_r00)*(x284)))+(((IkReal(-50000.0000000000))*(cj1)*(new_r20)))+(((new_r10)*(sj0)*(x284))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x283))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0169491525423729))*(x283)*(((((cj0)*(new_r00)*(x284)))+(((IkReal(-50000.0000000000))*(cj1)*(new_r20)))+(((new_r10)*(sj0)*(x284)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x283)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(0.0169491525423729))*(x283)*(((((cj0)*(new_r00)*(x284)))+(((IkReal(-50000.0000000000))*(cj1)*(new_r20)))+(((new_r10)*(sj0)*(x284)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x283)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x285=IKcos(j2);
IkReal x286=IKsin(j2);
IkReal x287=((IkReal(1.00000000000000))*(sj1));
IkReal x288=((new_r01)*(sj0));
IkReal x289=((cj0)*(new_r10));
IkReal x290=((IkReal(0.00117999917848486))*(sj0));
IkReal x291=((IkReal(0.00117999917848486))*(cj1));
IkReal x292=((cj0)*(new_r00));
IkReal x293=((cj0)*(new_r11));
IkReal x294=((IkReal(0.999999303800727))*(cj1));
IkReal x295=((new_r00)*(sj0));
IkReal x296=((cj0)*(new_r01));
IkReal x297=((new_r11)*(sj0));
IkReal x298=((new_r10)*(sj0));
IkReal x299=((IkReal(1.00000000000000))*(x285));
evalcond[0]=((new_r20)+(((sj1)*(x285))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x286)*(x287))));
evalcond[2]=((x298)+(x292)+(((IkReal(-0.00117999917848486))*(x286)))+(((x285)*(x294))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x286)*(x294)))+(x296)+(x297)+(((IkReal(-0.00117999917848486))*(x285))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x295)))+(((IkReal(0.999999303800727))*(x286)))+(x289)+(((x285)*(x291))));
evalcond[5]=((((IkReal(0.999999303800727))*(x285)))+(((IkReal(-1.00000000000000))*(x286)*(x291)))+(x293)+(((IkReal(-1.00000000000000))*(x288))));
evalcond[6]=((((IkReal(-0.999999303800727))*(x289)))+(((new_r10)*(x290)))+(((IkReal(0.00117999917848486))*(x292)))+(((IkReal(-1.00000000000000))*(x286)))+(((IkReal(0.999999303800727))*(x295))));
evalcond[7]=((((IkReal(0.999999303800727))*(x288)))+(((new_r11)*(x290)))+(((IkReal(-1.00000000000000))*(x299)))+(((IkReal(0.00117999917848486))*(x296)))+(((IkReal(-0.999999303800727))*(x293))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x291)*(x293)))+(x286)+(((IkReal(-1.00000000000000))*(new_r21)*(x287)))+(((IkReal(-1.00000000000000))*(x294)*(x297)))+(((IkReal(-1.00000000000000))*(x294)*(x296)))+(((x288)*(x291))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x289)*(x291)))+(((IkReal(-1.00000000000000))*(x299)))+(((IkReal(-1.00000000000000))*(new_r20)*(x287)))+(((IkReal(-1.00000000000000))*(x294)*(x298)))+(((IkReal(-1.00000000000000))*(x292)*(x294)))+(((cj1)*(new_r00)*(x290))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst25)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst25)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst25)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst25)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x300=IKcos(j2);
IkReal x301=IKsin(j2);
IkReal x302=((IkReal(1.00000000000000))*(sj1));
IkReal x303=((new_r01)*(sj0));
IkReal x304=((cj0)*(new_r10));
IkReal x305=((IkReal(0.00117999917848486))*(sj0));
IkReal x306=((IkReal(0.00117999917848486))*(cj1));
IkReal x307=((cj0)*(new_r00));
IkReal x308=((cj0)*(new_r11));
IkReal x309=((IkReal(0.999999303800727))*(cj1));
IkReal x310=((new_r00)*(sj0));
IkReal x311=((cj0)*(new_r01));
IkReal x312=((new_r11)*(sj0));
IkReal x313=((new_r10)*(sj0));
IkReal x314=((IkReal(1.00000000000000))*(x300));
evalcond[0]=((new_r20)+(((sj1)*(x300))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x301)*(x302)))+(new_r21));
evalcond[2]=((x307)+(x313)+(((x300)*(x309)))+(((IkReal(-0.00117999917848486))*(x301))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x301)*(x309)))+(x311)+(x312)+(((IkReal(-0.00117999917848486))*(x300))));
evalcond[4]=((x304)+(((IkReal(0.999999303800727))*(x301)))+(((IkReal(-1.00000000000000))*(x310)))+(((x300)*(x306))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x301)*(x306)))+(((IkReal(-1.00000000000000))*(x303)))+(x308)+(((IkReal(0.999999303800727))*(x300))));
evalcond[6]=((((new_r10)*(x305)))+(((IkReal(-0.999999303800727))*(x304)))+(((IkReal(-1.00000000000000))*(x301)))+(((IkReal(0.999999303800727))*(x310)))+(((IkReal(0.00117999917848486))*(x307))));
evalcond[7]=((((new_r11)*(x305)))+(((IkReal(-0.999999303800727))*(x308)))+(((IkReal(-1.00000000000000))*(x314)))+(((IkReal(0.00117999917848486))*(x311)))+(((IkReal(0.999999303800727))*(x303))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x302)))+(((x303)*(x306)))+(x301)+(((IkReal(-1.00000000000000))*(x306)*(x308)))+(((IkReal(-1.00000000000000))*(x309)*(x311)))+(((IkReal(-1.00000000000000))*(x309)*(x312))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r20)*(x302)))+(((cj1)*(new_r00)*(x305)))+(((IkReal(-1.00000000000000))*(x314)))+(((IkReal(-1.00000000000000))*(x307)*(x309)))+(((IkReal(-1.00000000000000))*(x304)*(x306)))+(((IkReal(-1.00000000000000))*(x309)*(x313))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x315=((IkReal(2500000000.00000))*(sj1));
IkReal x316=((IkReal(2950000.00000000))*(sj1));
if( IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(new_r12)*(x315)))+(((new_r02)*(x316))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(new_r02)*(x315)))+(((IkReal(-1.00000000000000))*(new_r12)*(x316))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst23)*(((((IkReal(-1.00000000000000))*(new_r12)*(x315)))+(((new_r02)*(x316)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(new_r02)*(x315)))+(((IkReal(-1.00000000000000))*(new_r12)*(x316)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[7];
IkReal x317=IKcos(j0);
IkReal x318=IKsin(j0);
IkReal x319=((IkReal(0.00117999917848486))*(sj1));
IkReal x320=((IkReal(0.00117999917848486))*(cj1));
IkReal x321=((IkReal(1.00000000000000))*(cj1));
IkReal x322=((IkReal(0.999999303800727))*(cj1));
IkReal x323=((IkReal(0.999999303800727))*(sj1));
IkReal x324=((new_r02)*(x318));
IkReal x325=((new_r12)*(x317));
IkReal x326=((new_r12)*(x318));
IkReal x327=((new_r02)*(x317));
evalcond[0]=((x326)+(x327)+(x323));
evalcond[1]=((((IkReal(-1.00000000000000))*(x324)))+(x325)+(x319));
evalcond[2]=((((IkReal(0.00117999917848486))*(x326)))+(((IkReal(0.00117999917848486))*(x327)))+(((IkReal(0.999999303800727))*(x324)))+(((IkReal(-0.999999303800727))*(x325))));
evalcond[3]=((((x320)*(x324)))+(((IkReal(-1.00000000000000))*(x322)*(x326)))+(((IkReal(-1.00000000000000))*(x322)*(x327)))+(((IkReal(-1.00000000000000))*(x320)*(x325)))+(((IkReal(-1.00000000000000))*(new_r22)*(sj1))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r00)*(x318)*(x319)))+(((new_r10)*(x318)*(x323)))+(((new_r00)*(x317)*(x323)))+(((new_r10)*(x317)*(x319)))+(((IkReal(-1.00000000000000))*(new_r20)*(x321))));
evalcond[5]=((((new_r11)*(x318)*(x323)))+(((new_r01)*(x317)*(x323)))+(((IkReal(-1.00000000000000))*(new_r21)*(x321)))+(((new_r11)*(x317)*(x319)))+(((IkReal(-1.00000000000000))*(new_r01)*(x318)*(x319))));
evalcond[6]=((IkReal(1.00000000000000))+(((x323)*(x327)))+(((x323)*(x326)))+(((IkReal(-1.00000000000000))*(new_r22)*(x321)))+(((IkReal(-1.00000000000000))*(x319)*(x324)))+(((x319)*(x325))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x328=((IkReal(0.00117999917848486))*(new_r02));
IkReal x329=((cj0)*(new_r12));
IkReal x330=((new_r12)*(sj0));
IkReal x331=((IkReal(0.999999303800727))*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((x330)+(((cj0)*(new_r02))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(x329));
evalcond[6]=((((IkReal(0.00117999917848486))*(x330)))+(((cj0)*(x328)))+(((IkReal(-0.999999303800727))*(x329)))+(((sj0)*(x331))));
evalcond[7]=((((IkReal(-0.999999303800727))*(x330)))+(((IkReal(-1.00000000000000))*(cj0)*(x331)))+(((sj0)*(x328)))+(((IkReal(-0.00117999917848486))*(x329))));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x332=((new_r11)*(sj0));
IkReal x333=((cj0)*(new_r01));
IkReal x334=((new_r10)*(sj0));
IkReal x335=((cj0)*(new_r00));
if( IKabs(((((IkReal(0.00117999917848486))*(x335)))+(((IkReal(0.00117999917848486))*(x334)))+(((IkReal(0.999999303800727))*(x332)))+(((IkReal(0.999999303800727))*(x333))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-0.999999303800727))*(x334)))+(((IkReal(-0.999999303800727))*(x335)))+(((IkReal(0.00117999917848486))*(x333)))+(((IkReal(0.00117999917848486))*(x332))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(0.00117999917848486))*(x335)))+(((IkReal(0.00117999917848486))*(x334)))+(((IkReal(0.999999303800727))*(x332)))+(((IkReal(0.999999303800727))*(x333)))))+IKsqr(((((IkReal(-0.999999303800727))*(x334)))+(((IkReal(-0.999999303800727))*(x335)))+(((IkReal(0.00117999917848486))*(x333)))+(((IkReal(0.00117999917848486))*(x332)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(0.00117999917848486))*(x335)))+(((IkReal(0.00117999917848486))*(x334)))+(((IkReal(0.999999303800727))*(x332)))+(((IkReal(0.999999303800727))*(x333)))), ((((IkReal(-0.999999303800727))*(x334)))+(((IkReal(-0.999999303800727))*(x335)))+(((IkReal(0.00117999917848486))*(x333)))+(((IkReal(0.00117999917848486))*(x332)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x336=IKsin(j2);
IkReal x337=IKcos(j2);
IkReal x338=((new_r01)*(sj0));
IkReal x339=((cj0)*(new_r10));
IkReal x340=((new_r10)*(sj0));
IkReal x341=((cj0)*(new_r00));
IkReal x342=((cj0)*(new_r11));
IkReal x343=((new_r00)*(sj0));
IkReal x344=((new_r11)*(sj0));
IkReal x345=((cj0)*(new_r01));
IkReal x346=((IkReal(0.999999303800727))*(x336));
IkReal x347=((IkReal(0.00117999917848486))*(x337));
IkReal x348=((IkReal(0.999999303800727))*(x337));
IkReal x349=((IkReal(0.00117999917848486))*(x336));
IkReal x350=((IkReal(1.00000000000000))*(x337));
IkReal x351=((x346)+(x347));
evalcond[0]=((x340)+(x341)+(x348)+(((IkReal(-1.00000000000000))*(x349))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x351)))+(x344)+(x345));
evalcond[2]=((x339)+(x351)+(((IkReal(-1.00000000000000))*(x343))));
evalcond[3]=((x342)+(x348)+(((IkReal(-1.00000000000000))*(x338)))+(((IkReal(-1.00000000000000))*(x349))));
evalcond[4]=((((IkReal(0.999999303800727))*(x343)))+(((IkReal(-0.999999303800727))*(x339)))+(((IkReal(-1.00000000000000))*(x336)))+(((IkReal(0.00117999917848486))*(x340)))+(((IkReal(0.00117999917848486))*(x341))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x350)))+(((IkReal(0.00117999917848486))*(x344)))+(((IkReal(0.00117999917848486))*(x345)))+(((IkReal(-0.999999303800727))*(x342)))+(((IkReal(0.999999303800727))*(x338))));
evalcond[6]=((((IkReal(-0.00117999917848486))*(x342)))+(((IkReal(0.00117999917848486))*(x338)))+(x336)+(((IkReal(-0.999999303800727))*(x345)))+(((IkReal(-0.999999303800727))*(x344))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x350)))+(((IkReal(0.00117999917848486))*(x343)))+(((IkReal(-0.999999303800727))*(x340)))+(((IkReal(-0.999999303800727))*(x341)))+(((IkReal(-0.00117999917848486))*(x339))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x352=((IkReal(1.00000000000000))+(new_r22));
IkReal x353=((IkReal(0.00117999917848486))*(new_r02));
IkReal x354=((cj0)*(new_r12));
IkReal x355=((new_r12)*(sj0));
IkReal x356=((IkReal(0.999999303800727))*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x352;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((x355)+(((cj0)*(new_r02))));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(x354));
evalcond[6]=((((cj0)*(x353)))+(((sj0)*(x356)))+(((IkReal(-0.999999303800727))*(x354)))+(((IkReal(0.00117999917848486))*(x355))));
evalcond[7]=((((IkReal(-1.00000000000000))*(sj0)*(x353)))+(((IkReal(0.999999303800727))*(x355)))+(((cj0)*(x356)))+(((IkReal(0.00117999917848486))*(x354))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x352;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x357=((new_r11)*(sj0));
IkReal x358=((IkReal(0.999999303800727))*(cj0));
IkReal x359=((IkReal(0.00117999917848486))*(cj0));
IkReal x360=((new_r10)*(sj0));
if( IKabs(((((IkReal(0.00117999917848486))*(x360)))+(((IkReal(-1.00000000000000))*(new_r01)*(x358)))+(((IkReal(-0.999999303800727))*(x357)))+(((new_r00)*(x359))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(x359)))+(((IkReal(0.999999303800727))*(x360)))+(((IkReal(0.00117999917848486))*(x357)))+(((new_r00)*(x358))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(0.00117999917848486))*(x360)))+(((IkReal(-1.00000000000000))*(new_r01)*(x358)))+(((IkReal(-0.999999303800727))*(x357)))+(((new_r00)*(x359)))))+IKsqr(((((new_r01)*(x359)))+(((IkReal(0.999999303800727))*(x360)))+(((IkReal(0.00117999917848486))*(x357)))+(((new_r00)*(x358)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(0.00117999917848486))*(x360)))+(((IkReal(-1.00000000000000))*(new_r01)*(x358)))+(((IkReal(-0.999999303800727))*(x357)))+(((new_r00)*(x359)))), ((((new_r01)*(x359)))+(((IkReal(0.999999303800727))*(x360)))+(((IkReal(0.00117999917848486))*(x357)))+(((new_r00)*(x358)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x361=IKsin(j2);
IkReal x362=IKcos(j2);
IkReal x363=((new_r01)*(sj0));
IkReal x364=((cj0)*(new_r10));
IkReal x365=((new_r10)*(sj0));
IkReal x366=((cj0)*(new_r00));
IkReal x367=((cj0)*(new_r11));
IkReal x368=((new_r00)*(sj0));
IkReal x369=((new_r11)*(sj0));
IkReal x370=((cj0)*(new_r01));
IkReal x371=((IkReal(0.999999303800727))*(x361));
IkReal x372=((IkReal(0.00117999917848486))*(x362));
IkReal x373=((IkReal(0.999999303800727))*(x362));
IkReal x374=((IkReal(0.00117999917848486))*(x361));
IkReal x375=((IkReal(1.00000000000000))*(x362));
IkReal x376=((x374)+(x373));
evalcond[0]=((((IkReal(-1.00000000000000))*(x376)))+(x365)+(x366));
evalcond[1]=((((IkReal(-1.00000000000000))*(x372)))+(x371)+(x370)+(x369));
evalcond[2]=((((IkReal(-1.00000000000000))*(x368)))+(((IkReal(-1.00000000000000))*(x372)))+(x371)+(x364));
evalcond[3]=((((IkReal(-1.00000000000000))*(x363)))+(x376)+(x367));
evalcond[4]=((((IkReal(-1.00000000000000))*(x361)))+(((IkReal(0.999999303800727))*(x368)))+(((IkReal(0.00117999917848486))*(x365)))+(((IkReal(0.00117999917848486))*(x366)))+(((IkReal(-0.999999303800727))*(x364))));
evalcond[5]=((((IkReal(0.999999303800727))*(x363)))+(((IkReal(-1.00000000000000))*(x375)))+(((IkReal(0.00117999917848486))*(x369)))+(((IkReal(0.00117999917848486))*(x370)))+(((IkReal(-0.999999303800727))*(x367))));
evalcond[6]=((((IkReal(0.999999303800727))*(x369)))+(((IkReal(-0.00117999917848486))*(x363)))+(((IkReal(0.999999303800727))*(x370)))+(((IkReal(0.00117999917848486))*(x367)))+(x361));
evalcond[7]=((((IkReal(0.999999303800727))*(x366)))+(((IkReal(0.999999303800727))*(x365)))+(((IkReal(-0.00117999917848486))*(x368)))+(((IkReal(-1.00000000000000))*(x375)))+(((IkReal(0.00117999917848486))*(x364))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x377=((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30);
IkReal x378=((IkReal(50000.0348099879))*(sj1));
if( IKabs(((IkReal(2.00000000000000e-5))*(x377)*(((((IkReal(59.0000000000000))*(cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(cj0)*(new_r10)*(x378)))+(((new_r00)*(sj0)*(x378))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x377))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(2.00000000000000e-5))*(x377)*(((((IkReal(59.0000000000000))*(cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(cj0)*(new_r10)*(x378)))+(((new_r00)*(sj0)*(x378)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x377)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(2.00000000000000e-5))*(x377)*(((((IkReal(59.0000000000000))*(cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(cj0)*(new_r10)*(x378)))+(((new_r00)*(sj0)*(x378)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x377)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x379=IKcos(j2);
IkReal x380=IKsin(j2);
IkReal x381=((IkReal(1.00000000000000))*(sj1));
IkReal x382=((new_r01)*(sj0));
IkReal x383=((cj0)*(new_r10));
IkReal x384=((IkReal(0.00117999917848486))*(sj0));
IkReal x385=((IkReal(0.00117999917848486))*(cj1));
IkReal x386=((cj0)*(new_r00));
IkReal x387=((cj0)*(new_r11));
IkReal x388=((IkReal(0.999999303800727))*(cj1));
IkReal x389=((new_r00)*(sj0));
IkReal x390=((cj0)*(new_r01));
IkReal x391=((new_r11)*(sj0));
IkReal x392=((new_r10)*(sj0));
IkReal x393=((IkReal(1.00000000000000))*(x379));
evalcond[0]=((((sj1)*(x379)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x380)*(x381)))+(new_r21));
evalcond[2]=((((IkReal(-0.00117999917848486))*(x380)))+(x386)+(x392)+(((x379)*(x388))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x380)*(x388)))+(((IkReal(-0.00117999917848486))*(x379)))+(x391)+(x390));
evalcond[4]=((x383)+(((IkReal(-1.00000000000000))*(x389)))+(((x379)*(x385)))+(((IkReal(0.999999303800727))*(x380))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x380)*(x385)))+(((IkReal(0.999999303800727))*(x379)))+(x387)+(((IkReal(-1.00000000000000))*(x382))));
evalcond[6]=((((IkReal(-0.999999303800727))*(x383)))+(((IkReal(0.00117999917848486))*(x386)))+(((new_r10)*(x384)))+(((IkReal(-1.00000000000000))*(x380)))+(((IkReal(0.999999303800727))*(x389))));
evalcond[7]=((((IkReal(-0.999999303800727))*(x387)))+(((IkReal(-1.00000000000000))*(x393)))+(((new_r11)*(x384)))+(((IkReal(0.00117999917848486))*(x390)))+(((IkReal(0.999999303800727))*(x382))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x388)*(x391)))+(((IkReal(-1.00000000000000))*(x388)*(x390)))+(x380)+(((IkReal(-1.00000000000000))*(new_r21)*(x381)))+(((x382)*(x385)))+(((IkReal(-1.00000000000000))*(x385)*(x387))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x393)))+(((IkReal(-1.00000000000000))*(new_r20)*(x381)))+(((IkReal(-1.00000000000000))*(x388)*(x392)))+(((cj1)*(new_r00)*(x384)))+(((IkReal(-1.00000000000000))*(x386)*(x388)))+(((IkReal(-1.00000000000000))*(x383)*(x385))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x394=((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30);
IkReal x395=((IkReal(50000.0348099879))*(sj1));
if( IKabs(((IkReal(0.0169491525423729))*(x394)*(((((IkReal(-50000.0000000000))*(cj1)*(new_r20)))+(((cj0)*(new_r00)*(x395)))+(((new_r10)*(sj0)*(x395))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(x394))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0169491525423729))*(x394)*(((((IkReal(-50000.0000000000))*(cj1)*(new_r20)))+(((cj0)*(new_r00)*(x395)))+(((new_r10)*(sj0)*(x395)))))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(x394)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(0.0169491525423729))*(x394)*(((((IkReal(-50000.0000000000))*(cj1)*(new_r20)))+(((cj0)*(new_r00)*(x395)))+(((new_r10)*(sj0)*(x395)))))), ((IkReal(-1.00000000000000))*(new_r20)*(x394)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x396=IKcos(j2);
IkReal x397=IKsin(j2);
IkReal x398=((IkReal(1.00000000000000))*(sj1));
IkReal x399=((new_r01)*(sj0));
IkReal x400=((cj0)*(new_r10));
IkReal x401=((IkReal(0.00117999917848486))*(sj0));
IkReal x402=((IkReal(0.00117999917848486))*(cj1));
IkReal x403=((cj0)*(new_r00));
IkReal x404=((cj0)*(new_r11));
IkReal x405=((IkReal(0.999999303800727))*(cj1));
IkReal x406=((new_r00)*(sj0));
IkReal x407=((cj0)*(new_r01));
IkReal x408=((new_r11)*(sj0));
IkReal x409=((new_r10)*(sj0));
IkReal x410=((IkReal(1.00000000000000))*(x396));
evalcond[0]=((((sj1)*(x396)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x397)*(x398)))+(new_r21));
evalcond[2]=((((IkReal(-0.00117999917848486))*(x397)))+(x403)+(x409)+(((x396)*(x405))));
evalcond[3]=((((IkReal(-0.00117999917848486))*(x396)))+(x407)+(x408)+(((IkReal(-1.00000000000000))*(x397)*(x405))));
evalcond[4]=((((IkReal(0.999999303800727))*(x397)))+(x400)+(((IkReal(-1.00000000000000))*(x406)))+(((x396)*(x402))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x399)))+(((IkReal(0.999999303800727))*(x396)))+(x404)+(((IkReal(-1.00000000000000))*(x397)*(x402))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x397)))+(((IkReal(0.00117999917848486))*(x403)))+(((IkReal(0.999999303800727))*(x406)))+(((IkReal(-0.999999303800727))*(x400)))+(((new_r10)*(x401))));
evalcond[7]=((((IkReal(0.00117999917848486))*(x407)))+(((IkReal(0.999999303800727))*(x399)))+(((IkReal(-0.999999303800727))*(x404)))+(((new_r11)*(x401)))+(((IkReal(-1.00000000000000))*(x410))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x398)))+(((IkReal(-1.00000000000000))*(x402)*(x404)))+(x397)+(((x399)*(x402)))+(((IkReal(-1.00000000000000))*(x405)*(x407)))+(((IkReal(-1.00000000000000))*(x405)*(x408))));
evalcond[9]=((((cj1)*(new_r00)*(x401)))+(((IkReal(-1.00000000000000))*(x403)*(x405)))+(((IkReal(-1.00000000000000))*(x400)*(x402)))+(((IkReal(-1.00000000000000))*(x405)*(x409)))+(((IkReal(-1.00000000000000))*(x410)))+(((IkReal(-1.00000000000000))*(new_r20)*(x398))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst25)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst25)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst25)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst25)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x411=IKcos(j2);
IkReal x412=IKsin(j2);
IkReal x413=((IkReal(1.00000000000000))*(sj1));
IkReal x414=((new_r01)*(sj0));
IkReal x415=((cj0)*(new_r10));
IkReal x416=((IkReal(0.00117999917848486))*(sj0));
IkReal x417=((IkReal(0.00117999917848486))*(cj1));
IkReal x418=((cj0)*(new_r00));
IkReal x419=((cj0)*(new_r11));
IkReal x420=((IkReal(0.999999303800727))*(cj1));
IkReal x421=((new_r00)*(sj0));
IkReal x422=((cj0)*(new_r01));
IkReal x423=((new_r11)*(sj0));
IkReal x424=((new_r10)*(sj0));
IkReal x425=((IkReal(1.00000000000000))*(x411));
evalcond[0]=((((sj1)*(x411)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x412)*(x413)))+(new_r21));
evalcond[2]=((((x411)*(x420)))+(x418)+(x424)+(((IkReal(-0.00117999917848486))*(x412))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x412)*(x420)))+(x423)+(x422)+(((IkReal(-0.00117999917848486))*(x411))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x421)))+(((x411)*(x417)))+(((IkReal(0.999999303800727))*(x412)))+(x415));
evalcond[5]=((((IkReal(-1.00000000000000))*(x412)*(x417)))+(((IkReal(0.999999303800727))*(x411)))+(x419)+(((IkReal(-1.00000000000000))*(x414))));
evalcond[6]=((((IkReal(0.00117999917848486))*(x418)))+(((IkReal(0.999999303800727))*(x421)))+(((IkReal(-0.999999303800727))*(x415)))+(((new_r10)*(x416)))+(((IkReal(-1.00000000000000))*(x412))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x425)))+(((IkReal(0.999999303800727))*(x414)))+(((IkReal(-0.999999303800727))*(x419)))+(((new_r11)*(x416)))+(((IkReal(0.00117999917848486))*(x422))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x417)*(x419)))+(((IkReal(-1.00000000000000))*(x420)*(x422)))+(((IkReal(-1.00000000000000))*(x420)*(x423)))+(((x414)*(x417)))+(x412)+(((IkReal(-1.00000000000000))*(new_r21)*(x413))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x420)*(x424)))+(((IkReal(-1.00000000000000))*(x425)))+(((cj1)*(new_r00)*(x416)))+(((IkReal(-1.00000000000000))*(new_r20)*(x413)))+(((IkReal(-1.00000000000000))*(x418)*(x420)))+(((IkReal(-1.00000000000000))*(x415)*(x417))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst24)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst24)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst24)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst24)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((((sj1)*(IKcos(j2))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign(((((IkReal(2500003481.00000))*((new_r12)*(new_r12))))+(((IkReal(2500003481.00000))*((new_r02)*(new_r02))))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(-2500003481.00000))*(new_r02)*(new_r10)))+(((IkReal(2500003481.00000))*(new_r00)*(new_r12)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x426=((IkReal(2950002.05378929))*(sj2));
IkReal x427=((IkReal(2500001740.49939))*(sj1));
IkReal x428=((IkReal(2500001740.49939))*(cj1)*(cj2));
if( IKabs(((gconst27)*(((((IkReal(-1.00000000000000))*(new_r00)*(x427)))+(((IkReal(-1.00000000000000))*(new_r02)*(x426)))+(((new_r02)*(x428))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((new_r10)*(x427)))+(((new_r12)*(x426)))+(((IkReal(-1.00000000000000))*(new_r12)*(x428))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst27)*(((((IkReal(-1.00000000000000))*(new_r00)*(x427)))+(((IkReal(-1.00000000000000))*(new_r02)*(x426)))+(((new_r02)*(x428)))))), ((gconst27)*(((((new_r10)*(x427)))+(((new_r12)*(x426)))+(((IkReal(-1.00000000000000))*(new_r12)*(x428)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[15];
IkReal x429=IKcos(j0);
IkReal x430=IKsin(j0);
IkReal x431=((IkReal(1.00000000000000))*(cj2));
IkReal x432=((IkReal(0.00117999917848486))*(sj1));
IkReal x433=((IkReal(0.00117999917848486))*(cj1));
IkReal x434=((IkReal(0.999999303800727))*(cj1));
IkReal x435=((IkReal(1.00000000000000))*(new_r21));
IkReal x436=((IkReal(1.00000000000000))*(sj1));
IkReal x437=((IkReal(0.999999303800727))*(sj1));
IkReal x438=((IkReal(1.00000000000000))*(cj1));
IkReal x439=((new_r10)*(x429));
IkReal x440=((new_r10)*(x430));
IkReal x441=((new_r02)*(x430));
IkReal x442=((new_r00)*(x429));
IkReal x443=((new_r12)*(x430));
IkReal x444=((new_r12)*(x429));
IkReal x445=((new_r11)*(x429));
IkReal x446=((new_r01)*(x429));
IkReal x447=((new_r01)*(x430));
IkReal x448=((new_r02)*(x429));
IkReal x449=((new_r00)*(x430));
IkReal x450=((new_r11)*(x430));
evalcond[0]=((x437)+(x448)+(x443));
evalcond[1]=((((IkReal(-1.00000000000000))*(x441)))+(x432)+(x444));
evalcond[2]=((x440)+(x442)+(((cj2)*(x434)))+(((IkReal(-0.00117999917848486))*(sj2))));
evalcond[3]=((((IkReal(-0.00117999917848486))*(cj2)))+(x446)+(x450)+(((IkReal(-1.00000000000000))*(sj2)*(x434))));
evalcond[4]=((((IkReal(0.999999303800727))*(sj2)))+(((IkReal(-1.00000000000000))*(x449)))+(x439)+(((cj2)*(x433))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x447)))+(((IkReal(0.999999303800727))*(cj2)))+(x445)+(((IkReal(-1.00000000000000))*(sj2)*(x433))));
evalcond[6]=((((IkReal(-0.999999303800727))*(x444)))+(((IkReal(0.999999303800727))*(x441)))+(((IkReal(0.00117999917848486))*(x448)))+(((IkReal(0.00117999917848486))*(x443))));
evalcond[7]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-0.999999303800727))*(x439)))+(((IkReal(0.999999303800727))*(x449)))+(((IkReal(0.00117999917848486))*(x440)))+(((IkReal(0.00117999917848486))*(x442))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x431)))+(((IkReal(-0.999999303800727))*(x445)))+(((IkReal(0.999999303800727))*(x447)))+(((IkReal(0.00117999917848486))*(x450)))+(((IkReal(0.00117999917848486))*(x446))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x433)*(x444)))+(((IkReal(-1.00000000000000))*(x434)*(x443)))+(((IkReal(-1.00000000000000))*(x434)*(x448)))+(((x433)*(x441)))+(((IkReal(-1.00000000000000))*(new_r22)*(x436))));
evalcond[10]=((((IkReal(-1.00000000000000))*(x432)*(x449)))+(((IkReal(-1.00000000000000))*(new_r20)*(x438)))+(((x437)*(x442)))+(((x437)*(x440)))+(((x432)*(x439))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x432)*(x447)))+(((IkReal(-1.00000000000000))*(cj1)*(x435)))+(((x437)*(x446)))+(((x432)*(x445)))+(((x437)*(x450))));
evalcond[12]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x432)*(x441)))+(((x437)*(x448)))+(((x437)*(x443)))+(((x432)*(x444)))+(((IkReal(-1.00000000000000))*(new_r22)*(x438))));
evalcond[13]=((((IkReal(-1.00000000000000))*(sj1)*(x435)))+(sj2)+(((IkReal(-1.00000000000000))*(x433)*(x445)))+(((IkReal(-1.00000000000000))*(x434)*(x446)))+(((x433)*(x447)))+(((IkReal(-1.00000000000000))*(x434)*(x450))));
evalcond[14]=((((IkReal(-1.00000000000000))*(x431)))+(((IkReal(-1.00000000000000))*(x433)*(x439)))+(((IkReal(-1.00000000000000))*(x434)*(x440)))+(((IkReal(-1.00000000000000))*(x434)*(x442)))+(((IkReal(-1.00000000000000))*(new_r20)*(x436)))+(((x433)*(x449))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x451=((IkReal(2950002.05378929))*(sj1));
IkReal x452=((IkReal(2500001740.49939))*(sj1));
if( IKabs(((gconst26)*(((((new_r02)*(x451)))+(((IkReal(-1.00000000000000))*(new_r12)*(x452))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(new_r02)*(x452)))+(((IkReal(-1.00000000000000))*(new_r12)*(x451))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst26)*(((((new_r02)*(x451)))+(((IkReal(-1.00000000000000))*(new_r12)*(x452)))))), ((gconst26)*(((((IkReal(-1.00000000000000))*(new_r02)*(x452)))+(((IkReal(-1.00000000000000))*(new_r12)*(x451)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[15];
IkReal x453=IKcos(j0);
IkReal x454=IKsin(j0);
IkReal x455=((IkReal(1.00000000000000))*(cj2));
IkReal x456=((IkReal(0.00117999917848486))*(sj1));
IkReal x457=((IkReal(0.00117999917848486))*(cj1));
IkReal x458=((IkReal(0.999999303800727))*(cj1));
IkReal x459=((IkReal(1.00000000000000))*(new_r21));
IkReal x460=((IkReal(1.00000000000000))*(sj1));
IkReal x461=((IkReal(0.999999303800727))*(sj1));
IkReal x462=((IkReal(1.00000000000000))*(cj1));
IkReal x463=((new_r10)*(x453));
IkReal x464=((new_r10)*(x454));
IkReal x465=((new_r02)*(x454));
IkReal x466=((new_r00)*(x453));
IkReal x467=((new_r12)*(x454));
IkReal x468=((new_r12)*(x453));
IkReal x469=((new_r11)*(x453));
IkReal x470=((new_r01)*(x453));
IkReal x471=((new_r01)*(x454));
IkReal x472=((new_r02)*(x453));
IkReal x473=((new_r00)*(x454));
IkReal x474=((new_r11)*(x454));
evalcond[0]=((x461)+(x467)+(x472));
evalcond[1]=((((IkReal(-1.00000000000000))*(x465)))+(x456)+(x468));
evalcond[2]=((((cj2)*(x458)))+(x466)+(x464)+(((IkReal(-0.00117999917848486))*(sj2))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj2)*(x458)))+(((IkReal(-0.00117999917848486))*(cj2)))+(x474)+(x470));
evalcond[4]=((((IkReal(0.999999303800727))*(sj2)))+(((IkReal(-1.00000000000000))*(x473)))+(((cj2)*(x457)))+(x463));
evalcond[5]=((((IkReal(0.999999303800727))*(cj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x457)))+(((IkReal(-1.00000000000000))*(x471)))+(x469));
evalcond[6]=((((IkReal(-0.999999303800727))*(x468)))+(((IkReal(0.00117999917848486))*(x467)))+(((IkReal(0.999999303800727))*(x465)))+(((IkReal(0.00117999917848486))*(x472))));
evalcond[7]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-0.999999303800727))*(x463)))+(((IkReal(0.00117999917848486))*(x466)))+(((IkReal(0.00117999917848486))*(x464)))+(((IkReal(0.999999303800727))*(x473))));
evalcond[8]=((((IkReal(-0.999999303800727))*(x469)))+(((IkReal(-1.00000000000000))*(x455)))+(((IkReal(0.00117999917848486))*(x474)))+(((IkReal(0.00117999917848486))*(x470)))+(((IkReal(0.999999303800727))*(x471))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r22)*(x460)))+(((IkReal(-1.00000000000000))*(x458)*(x472)))+(((IkReal(-1.00000000000000))*(x458)*(x467)))+(((x457)*(x465)))+(((IkReal(-1.00000000000000))*(x457)*(x468))));
evalcond[10]=((((x456)*(x463)))+(((x461)*(x464)))+(((x461)*(x466)))+(((IkReal(-1.00000000000000))*(x456)*(x473)))+(((IkReal(-1.00000000000000))*(new_r20)*(x462))));
evalcond[11]=((((x456)*(x469)))+(((IkReal(-1.00000000000000))*(x456)*(x471)))+(((IkReal(-1.00000000000000))*(cj1)*(x459)))+(((x461)*(x470)))+(((x461)*(x474))));
evalcond[12]=((IkReal(1.00000000000000))+(((x456)*(x468)))+(((x461)*(x467)))+(((IkReal(-1.00000000000000))*(x456)*(x465)))+(((IkReal(-1.00000000000000))*(new_r22)*(x462)))+(((x461)*(x472))));
evalcond[13]=((sj2)+(((IkReal(-1.00000000000000))*(sj1)*(x459)))+(((IkReal(-1.00000000000000))*(x458)*(x474)))+(((IkReal(-1.00000000000000))*(x458)*(x470)))+(((x457)*(x471)))+(((IkReal(-1.00000000000000))*(x457)*(x469))));
evalcond[14]=((((IkReal(-1.00000000000000))*(new_r20)*(x460)))+(((IkReal(-1.00000000000000))*(x455)))+(((IkReal(-1.00000000000000))*(x458)*(x466)))+(((IkReal(-1.00000000000000))*(x458)*(x464)))+(((x457)*(x473)))+(((IkReal(-1.00000000000000))*(x457)*(x463))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - cob3-8 (579bd029824b0599502c32482de93434)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
