/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2015-02-23 15:55:58.073245
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((IkReal(1.00000000000000))*(x8));
x15=((IkReal(1.00000000000000))*(x5));
x16=((IkReal(0.323000000000000))*(x3));
x17=((IkReal(1.00000000000000))*(x13));
x18=((IkReal(1.00000000000000))*(x12));
x19=((IkReal(1.00000000000000))*(x6));
x20=((IkReal(0.323000000000000))*(x6));
x21=((IkReal(1.00000000000000))*(x1));
x22=((IkReal(1.00000000000000))*(x9));
x23=((IkReal(1.00000000000000))*(x3));
x24=((IkReal(1.00000000000000))*(x2));
x25=((x2)*(x7));
x26=((x0)*(x7));
x27=((x0)*(x2));
x28=((x0)*(x3));
x29=((x4)*(x7));
x30=((x1)*(x4));
x31=((x5)*(x7));
x32=((x3)*(x7));
x33=((x24)*(x4));
x34=((x1)*(x19));
x35=((x2)*(x21)*(x4));
x36=((x19)*(x29));
x37=((((IkReal(-1.00000000000000))*(x34)))+(((x3)*(x31))));
x38=((((x21)*(x27)))+(((x23)*(x4))));
x39=((IkReal(-1.00000000000000))*(x38));
x40=((((IkReal(-1.00000000000000))*(x21)*(x3)*(x4)))+(((IkReal(-1.00000000000000))*(x0)*(x24))));
x41=((((IkReal(-1.00000000000000))*(x1)*(x15)))+(((IkReal(-1.00000000000000))*(x19)*(x32))));
x42=((x12)*(x37));
x43=((x39)*(x9));
x44=((((IkReal(-1.00000000000000))*(x15)*(x26)))+(((x6)*(((((IkReal(-1.00000000000000))*(x33)))+(((x1)*(x28))))))));
x45=((((IkReal(-1.00000000000000))*(x15)*(x29)))+(((x6)*(((((x3)*(x30)))+(x27))))));
x46=((((x5)*(((((IkReal(-1.00000000000000))*(x21)*(x28)))+(x33)))))+(((IkReal(-1.00000000000000))*(x19)*(x26))));
x47=((((IkReal(-1.00000000000000))*(x36)))+(((x40)*(x5))));
x48=((((x41)*(x8)))+(((x25)*(x9))));
x49=((((x14)*(x25)))+(((IkReal(-1.00000000000000))*(x41)*(x9))));
x50=((x12)*(x47));
x51=((((x9)*(((((IkReal(-1.00000000000000))*(x35)))+(x28)))))+(((x45)*(x8))));
x52=((((x44)*(x9)))+(((x38)*(x8))));
x53=((x43)+(((x44)*(x8))));
x54=((x13)*(x51));
x55=((((IkReal(-1.00000000000000))*(x22)*(x45)))+(((x14)*(((((IkReal(-1.00000000000000))*(x35)))+(((x0)*(x23))))))));
eerot[0]=((((x11)*(x52)))+(((x10)*(((((x13)*(x53)))+(((x12)*(x46))))))));
eerot[1]=((((x10)*(x52)))+(((x11)*(((((IkReal(-1.00000000000000))*(x18)*(x46)))+(((IkReal(-1.00000000000000))*(x17)*(x53))))))));
eerot[2]=((((x13)*(x46)))+(((x12)*(((((IkReal(-1.00000000000000))*(x14)*(x44)))+(((IkReal(-1.00000000000000))*(x22)*(x39))))))));
eetrans[0]=((((x5)*(((((IkReal(-1.00000000000000))*(x0)*(x1)*(x16)))+(((IkReal(0.323000000000000))*(x2)*(x4)))))))+(((IkReal(-0.328000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x20)*(x26))));
eerot[3]=((((x11)*(x55)))+(((x10)*(((((IkReal(-1.00000000000000))*(x50)))+(((IkReal(-1.00000000000000))*(x54))))))));
eerot[4]=((((x11)*(((x54)+(x50)))))+(((x10)*(x55))));
eerot[5]=((((x13)*(((((IkReal(-1.00000000000000))*(x15)*(x40)))+(x36)))))+(((x12)*(x51))));
eetrans[1]=((((IkReal(0.328000000000000))*(x29)))+(((x20)*(x29)))+(((x5)*(((((x16)*(x30)))+(((IkReal(0.323000000000000))*(x27))))))));
eerot[6]=((((x11)*(x49)))+(((x10)*(((((IkReal(-1.00000000000000))*(x18)*(x37)))+(((IkReal(-1.00000000000000))*(x17)*(x48))))))));
eerot[7]=((((x10)*(x49)))+(((x11)*(((x42)+(((x13)*(x48))))))));
eerot[8]=((((x13)*(((x34)+(((IkReal(-1.00000000000000))*(x15)*(x32)))))))+(((x12)*(x48))));
eetrans[2]=((IkReal(0.300000000000000))+(((x1)*(x20)))+(((IkReal(-1.00000000000000))*(x16)*(x31)))+(((IkReal(0.328000000000000))*(x1))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=px;
new_r10=((IkReal(-1.00000000000000))*(r10));
new_r11=((IkReal(-1.00000000000000))*(r11));
new_r12=((IkReal(-1.00000000000000))*(r12));
new_py=((IkReal(-1.00000000000000))*(py));
new_r20=((IkReal(-1.00000000000000))*(r20));
new_r21=((IkReal(-1.00000000000000))*(r21));
new_r22=((IkReal(-1.00000000000000))*(r22));
new_pz=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.00011798686098))+(((IkReal(4.71947443932644))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal x56=(sj5)*(sj5);
dummyeval[0]=((((x56)*((npx)*(npx))))+(((x56)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x57=(sj5)*(sj5);
dummyeval[0]=((((x57)*((npy)*(npy))))+(((x57)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.651000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1000.00000000000))*((npx)*(npx))))+(((IkReal(-1000.00000000000))*((npy)*(npy))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((IkReal(-0.651000000000000))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x58=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x58));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x58))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x59=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x59));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x59))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x60=IKcos(j4);
IkReal x61=IKsin(j4);
IkReal x62=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x61)))+(((npy)*(sj6)*(x60)))+(((IkReal(-1.00000000000000))*(sj6)*(x61)*(x62)))+(((IkReal(-1.00000000000000))*(cj6)*(x60)*(x62))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
IkReal x225=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=x225;
evalcond[3]=x225;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x226=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x226));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x226))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x227=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x227));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x227))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x228=IKcos(j4);
IkReal x229=IKsin(j4);
IkReal x230=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((cj6)*(npx)*(x228)))+(((IkReal(-1.00000000000000))*(npx)*(x229)*(x230)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x229)))+(((IkReal(-1.00000000000000))*(npy)*(x228)*(x230))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x231=((cj5)*(npz));
if( IKabs(((gconst17)*(((((npy)*(x231)))+(((IkReal(-0.651000000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(npx)*(x231)))+(((IkReal(0.651000000000000))*(npx))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst17)*(((((npy)*(x231)))+(((IkReal(-0.651000000000000))*(npy)))))), ((gconst17)*(((((IkReal(-1.00000000000000))*(npx)*(x231)))+(((IkReal(0.651000000000000))*(npx)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x232=IKcos(j6);
IkReal x233=IKsin(j6);
IkReal x234=((IkReal(1.00000000000000))*(npx));
IkReal x235=((npy)*(x233));
evalcond[0]=((((IkReal(-1.00000000000000))*(x233)*(x234)))+(((IkReal(-1.00000000000000))*(npy)*(x232))));
evalcond[1]=((IkReal(-0.651000000000000))+(((npx)*(sj5)*(x232)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(sj5)*(x235))));
evalcond[2]=((((IkReal(0.651000000000000))*(sj5)))+(x235)+(((IkReal(-1.00000000000000))*(x232)*(x234))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x236=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x236));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x236))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x237=IKcos(j4);
IkReal x238=IKsin(j4);
IkReal x239=((IkReal(1.00000000000000))*(npx));
IkReal x240=((cj5)*(x237));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x239)*(x240)))+(((IkReal(-1.00000000000000))*(sj6)*(x238)*(x239)))+(((npz)*(sj5)*(x237)))+(((npy)*(sj6)*(x240)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x238))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x241=((gconst16)*(sj5));
if( IKabs(((IkReal(651.000000000000))*(npy)*(x241))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-651.000000000000))*(npx)*(x241))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((IkReal(651.000000000000))*(npy)*(x241)), ((IkReal(-651.000000000000))*(npx)*(x241)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x242=IKcos(j6);
IkReal x243=IKsin(j6);
IkReal x244=((IkReal(1.00000000000000))*(npx));
IkReal x245=((npy)*(x243));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x242)))+(((IkReal(-1.00000000000000))*(x243)*(x244))));
evalcond[1]=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x245)))+(((cj5)*(npz)))+(((npx)*(sj5)*(x242))));
evalcond[2]=((((IkReal(0.651000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x242)*(x244)))+(x245));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x246=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x246));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x246))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x247=IKcos(j4);
IkReal x248=IKsin(j4);
IkReal x249=((IkReal(1.00000000000000))*(npx));
IkReal x250=((cj5)*(x247));
evalcond[0]=((((npz)*(sj5)*(x247)))+(((npy)*(sj6)*(x250)))+(((IkReal(-1.00000000000000))*(sj6)*(x248)*(x249)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x248)))+(((IkReal(-1.00000000000000))*(cj6)*(x249)*(x250))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.00500000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(200.000000000000))*((npx)*(npx))))+(((IkReal(200.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((IkReal(0.00500000000000000))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x251=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x251));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x251))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x252=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x252));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x252))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x253=IKcos(j4);
IkReal x254=IKsin(j4);
IkReal x255=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((npy)*(sj6)*(x253)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x254)))+(((IkReal(-1.00000000000000))*(sj6)*(x254)*(x255)))+(((IkReal(-1.00000000000000))*(cj6)*(x253)*(x255))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
IkReal x256=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=x256;
evalcond[3]=x256;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npy) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x257=IKatan2(((IkReal(-1.00000000000000))*(npx)), npy);
j6array[0]=((IkReal(-1.00000000000000))*(x257));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x257))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(npx)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x258=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x258));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x258))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x259=IKcos(j4);
IkReal x260=IKsin(j4);
IkReal x261=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x260)))+(((IkReal(-1.00000000000000))*(npx)*(x260)*(x261)))+(((IkReal(-1.00000000000000))*(npy)*(x259)*(x261)))+(((cj6)*(npx)*(x259))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x262=((cj5)*(npz));
if( IKabs(((gconst19)*(((((npy)*(x262)))+(((IkReal(0.00500000000000000))*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.00500000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x262))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst19)*(((((npy)*(x262)))+(((IkReal(0.00500000000000000))*(npy)))))), ((gconst19)*(((((IkReal(-0.00500000000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x262)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x263=IKcos(j6);
IkReal x264=IKsin(j6);
IkReal x265=((IkReal(1.00000000000000))*(npx));
IkReal x266=((npy)*(x264));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x263)))+(((IkReal(-1.00000000000000))*(x264)*(x265))));
evalcond[1]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x266)))+(((cj5)*(npz)))+(((npx)*(sj5)*(x263))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x263)*(x265)))+(x266)+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x267=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x267));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x267))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x268=IKcos(j4);
IkReal x269=IKsin(j4);
IkReal x270=((IkReal(1.00000000000000))*(npx));
IkReal x271=((cj5)*(x268));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x269)))+(((npy)*(sj6)*(x271)))+(((IkReal(-1.00000000000000))*(sj6)*(x269)*(x270)))+(((IkReal(-1.00000000000000))*(cj6)*(x270)*(x271)))+(((npz)*(sj5)*(x268))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x272=((gconst18)*(sj5));
if( IKabs(((npy)*(x272))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npx)*(x272))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npy)*(x272)), ((IkReal(-1.00000000000000))*(npx)*(x272)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x273=IKcos(j6);
IkReal x274=IKsin(j6);
IkReal x275=((IkReal(1.00000000000000))*(npx));
IkReal x276=((npy)*(x274));
evalcond[0]=((((IkReal(-1.00000000000000))*(x274)*(x275)))+(((IkReal(-1.00000000000000))*(npy)*(x273))));
evalcond[1]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x276)))+(((cj5)*(npz)))+(((npx)*(sj5)*(x273))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x273)*(x275)))+(x276)+(((IkReal(-0.00500000000000000))*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x277=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x277));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x277))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x278=IKcos(j4);
IkReal x279=IKsin(j4);
IkReal x280=((IkReal(1.00000000000000))*(npx));
IkReal x281=((cj5)*(x278));
evalcond[0]=((((npz)*(sj5)*(x278)))+(((IkReal(-1.00000000000000))*(cj6)*(x280)*(x281)))+(((npy)*(sj6)*(x281)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x279)))+(((IkReal(-1.00000000000000))*(sj6)*(x279)*(x280))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
IkReal x282=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x282));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x282))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-9.29506246281975))*(npy)*((npx)*(npx))))+(((npy)*((sj3)*(sj3))))+(((IkReal(-9.29506246281975))*((npy)*(npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x283=(sj3)*(sj3);
IkReal x284=(npy)*(npy);
IkReal x285=(npx)*(npx)*(npx);
IkReal x286=((npx)*(x284));
IkReal x287=((npx)*(x283));
IkReal x288=((IkReal(0.430336000000000))*(npy)*(x283));
IkReal x289=((((IkReal(4.00000000000000))*(npy)*((npx)*(npx))))+(((IkReal(4.00000000000000))*((npy)*(npy)*(npy)))));
IkReal x290=((x288)+(((IkReal(-1.00000000000000))*(x289))));
IkReal x291=((((IkReal(-0.860672000000000))*(x287)))+(((IkReal(8.00000000000000))*(x285)))+(((IkReal(8.00000000000000))*(x286))));
IkReal x292=((x289)+(((IkReal(-1.00000000000000))*(x288))));
op[0]=x290;
op[1]=x291;
op[2]=x290;
op[3]=((((IkReal(16.0000000000000))*(x286)))+(((IkReal(16.0000000000000))*(x285)))+(((IkReal(-1.72134400000000))*(x287))));
op[4]=x292;
op[5]=x291;
op[6]=x292;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x293=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x293)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x293))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((npy)*(sj3)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x294=((npy)*(sj6));
IkReal x295=((IkReal(41.0000000000000))*(sj3));
IkReal x296=((cj6)*(npx));
IkReal x297=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x298=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x295)*(x296)))+(((x294)*(x295))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x295)*(x296)))+(((x294)*(x295)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x296)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x294)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x294)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x296))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x296)))+(((IkReal(-125.000000000000))*(x294))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x295)*(x296)))+(((x294)*(x295))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x295)*(x296)))+(((x294)*(x295)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x296)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x294)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x294)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x296)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x296)))+(((IkReal(-125.000000000000))*(x294)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x295)*(x296)))+(((x294)*(x295))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x295)*(x296)))+(((x294)*(x295)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x296)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x294)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x294)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x296)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x296)))+(((IkReal(-125.000000000000))*(x294)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x299=IKcos(j4);
IkReal x300=IKsin(j4);
IkReal x301=((IkReal(0.328000000000000))*(sj3));
IkReal x302=((IkReal(1.00000000000000))*(cj6));
IkReal x303=((npx)*(sj6));
IkReal x304=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x303)))+(((IkReal(-1.00000000000000))*(npy)*(x302)))+(((x300)*(x301))));
evalcond[1]=((((x299)*(x301)))+(x304)+(((IkReal(-1.00000000000000))*(npx)*(x302))));
evalcond[2]=((((x299)*(x303)))+(((cj6)*(npy)*(x299)))+(((IkReal(-1.00000000000000))*(npx)*(x300)*(x302)))+(((x300)*(x304))));
evalcond[3]=((((x299)*(x304)))+(((IkReal(-1.00000000000000))*(npx)*(x299)*(x302)))+(x301)+(((IkReal(-1.00000000000000))*(npy)*(x300)*(x302)))+(((IkReal(-1.00000000000000))*(x300)*(x303))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x305=((npy)*(sj6));
IkReal x306=((IkReal(5125.00000000000))*(sj3));
IkReal x307=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x306)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x306))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x306)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x306)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x305)*(x305))))+(((IkReal(-31250.0000000000))*(x305)*(x307)))+(((IkReal(15625.0000000000))*((x307)*(x307))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x307)))+(((IkReal(-125.000000000000))*(x305))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x306)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x306))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x306)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x306)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x305)*(x305))))+(((IkReal(-31250.0000000000))*(x305)*(x307)))+(((IkReal(15625.0000000000))*((x307)*(x307))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x307)))+(((IkReal(-125.000000000000))*(x305)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x306)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x306))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x306)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x306)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x305)*(x305))))+(((IkReal(-31250.0000000000))*(x305)*(x307)))+(((IkReal(15625.0000000000))*((x307)*(x307))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x307)))+(((IkReal(-125.000000000000))*(x305)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x308=IKcos(j4);
IkReal x309=IKsin(j4);
IkReal x310=((IkReal(0.328000000000000))*(sj3));
IkReal x311=((IkReal(1.00000000000000))*(cj6));
IkReal x312=((npx)*(sj6));
IkReal x313=((npy)*(sj6));
evalcond[0]=((((x309)*(x310)))+(((IkReal(-1.00000000000000))*(x312)))+(((IkReal(-1.00000000000000))*(npy)*(x311))));
evalcond[1]=((((x308)*(x310)))+(x313)+(((IkReal(-1.00000000000000))*(npx)*(x311))));
evalcond[2]=((((cj6)*(npy)*(x308)))+(((IkReal(-1.00000000000000))*(npx)*(x309)*(x311)))+(((x308)*(x312)))+(((x309)*(x313))));
evalcond[3]=((((x308)*(x313)))+(x310)+(((IkReal(-1.00000000000000))*(x309)*(x312)))+(((IkReal(-1.00000000000000))*(npx)*(x308)*(x311)))+(((IkReal(-1.00000000000000))*(npy)*(x309)*(x311))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x314=((IkReal(125.000000000000))*(npy));
IkReal x315=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst20)*(((((sj6)*(x315)))+(((cj6)*(x314))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(sj6)*(x314)))+(((cj6)*(x315))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((sj6)*(x315)))+(((cj6)*(x314)))))), ((gconst20)*(((((IkReal(-1.00000000000000))*(sj6)*(x314)))+(((cj6)*(x315)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x316=IKcos(j4);
IkReal x317=IKsin(j4);
IkReal x318=((IkReal(0.328000000000000))*(sj3));
IkReal x319=((IkReal(1.00000000000000))*(cj6));
IkReal x320=((npx)*(sj6));
IkReal x321=((npy)*(sj6));
evalcond[0]=((((x317)*(x318)))+(((IkReal(-1.00000000000000))*(x320)))+(((IkReal(-1.00000000000000))*(npy)*(x319))));
evalcond[1]=((x321)+(((IkReal(-1.00000000000000))*(npx)*(x319)))+(((x316)*(x318))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x317)*(x319)))+(((cj6)*(npy)*(x316)))+(((x317)*(x321)))+(((x316)*(x320))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x317)*(x320)))+(((IkReal(-1.00000000000000))*(npx)*(x316)*(x319)))+(x318)+(((x316)*(x321)))+(((IkReal(-1.00000000000000))*(npy)*(x317)*(x319))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
IkReal x322=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x322;
evalcond[3]=x322;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-9.29506246281975))*(npy)*((npx)*(npx))))+(((npy)*((sj3)*(sj3))))+(((IkReal(-9.29506246281975))*((npy)*(npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x323=(sj3)*(sj3);
IkReal x324=(npy)*(npy);
IkReal x325=(npx)*(npx)*(npx);
IkReal x326=((npx)*(x324));
IkReal x327=((npx)*(x323));
IkReal x328=((IkReal(0.430336000000000))*(npy)*(x323));
IkReal x329=((((IkReal(4.00000000000000))*(npy)*((npx)*(npx))))+(((IkReal(4.00000000000000))*((npy)*(npy)*(npy)))));
IkReal x330=((((IkReal(-1.00000000000000))*(x329)))+(x328));
IkReal x331=((((IkReal(-0.860672000000000))*(x327)))+(((IkReal(8.00000000000000))*(x326)))+(((IkReal(8.00000000000000))*(x325))));
IkReal x332=((((IkReal(-1.00000000000000))*(x328)))+(x329));
op[0]=x330;
op[1]=x331;
op[2]=x330;
op[3]=((((IkReal(16.0000000000000))*(x325)))+(((IkReal(16.0000000000000))*(x326)))+(((IkReal(-1.72134400000000))*(x327))));
op[4]=x332;
op[5]=x331;
op[6]=x332;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x333=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x333)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x333))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x334=((npy)*(sj6));
IkReal x335=((IkReal(41.0000000000000))*(sj3));
IkReal x336=((cj6)*(npx));
IkReal x337=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x338=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((x335)*(x336)))+(((IkReal(-1.00000000000000))*(x334)*(x335))))) != 0)?((IkReal)1/(((((x335)*(x336)))+(((IkReal(-1.00000000000000))*(x334)*(x335)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(npx)*(sj6)*(x336)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x334)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x334)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x336))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x334)))+(((IkReal(-125.000000000000))*(x336))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x335)*(x336)))+(((IkReal(-1.00000000000000))*(x334)*(x335))))) != 0)?((IkReal)1/(((((x335)*(x336)))+(((IkReal(-1.00000000000000))*(x334)*(x335)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(npx)*(sj6)*(x336)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x334)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x334)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x336)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x334)))+(((IkReal(-125.000000000000))*(x336)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((x335)*(x336)))+(((IkReal(-1.00000000000000))*(x334)*(x335))))) != 0)?((IkReal)1/(((((x335)*(x336)))+(((IkReal(-1.00000000000000))*(x334)*(x335)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(npx)*(sj6)*(x336)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x334)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x334)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x336)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x334)))+(((IkReal(-125.000000000000))*(x336)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x339=IKcos(j4);
IkReal x340=IKsin(j4);
IkReal x341=((IkReal(0.328000000000000))*(sj3));
IkReal x342=((cj6)*(npx));
IkReal x343=((IkReal(1.00000000000000))*(npy));
IkReal x344=((sj6)*(x339));
IkReal x345=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x343)))+(((x340)*(x341)))+(((IkReal(-1.00000000000000))*(x345))));
evalcond[1]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x339)*(x341)))+(((IkReal(-1.00000000000000))*(x342))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x340)*(x343)))+(((cj6)*(npy)*(x339)))+(((npx)*(x344)))+(((x340)*(x342))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(x340)*(x343)))+(x341)+(((IkReal(-1.00000000000000))*(x340)*(x345)))+(((IkReal(-1.00000000000000))*(x343)*(x344)))+(((x339)*(x342))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x346=((npy)*(sj6));
IkReal x347=((IkReal(5125.00000000000))*(sj3));
IkReal x348=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x347)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x347))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x347)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x347)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x348)*(x348))))+(((IkReal(-31250.0000000000))*(x346)*(x348)))+(((IkReal(15625.0000000000))*((x346)*(x346))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x348)))+(((IkReal(125.000000000000))*(x346))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x347)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x347))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x347)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x347)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x348)*(x348))))+(((IkReal(-31250.0000000000))*(x346)*(x348)))+(((IkReal(15625.0000000000))*((x346)*(x346))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x348)))+(((IkReal(125.000000000000))*(x346)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x347)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x347))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x347)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x347)))))):(IkReal)1.0e30))*(((((IkReal(15625.0000000000))*((x348)*(x348))))+(((IkReal(-31250.0000000000))*(x346)*(x348)))+(((IkReal(15625.0000000000))*((x346)*(x346))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x348)))+(((IkReal(125.000000000000))*(x346)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x349=IKcos(j4);
IkReal x350=IKsin(j4);
IkReal x351=((IkReal(0.328000000000000))*(sj3));
IkReal x352=((cj6)*(npx));
IkReal x353=((IkReal(1.00000000000000))*(npy));
IkReal x354=((sj6)*(x349));
IkReal x355=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x353)))+(((IkReal(-1.00000000000000))*(x355)))+(((x350)*(x351))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x349)*(x351)))+(((IkReal(-1.00000000000000))*(x352)))+(((npy)*(sj6))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x350)*(x353)))+(((npx)*(x354)))+(((cj6)*(npy)*(x349)))+(((x350)*(x352))));
evalcond[3]=((x351)+(((x349)*(x352)))+(((IkReal(-1.00000000000000))*(x353)*(x354)))+(((IkReal(-1.00000000000000))*(cj6)*(x350)*(x353)))+(((IkReal(-1.00000000000000))*(x350)*(x355))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x356=((IkReal(125.000000000000))*(npy));
IkReal x357=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst21)*(((((sj6)*(x357)))+(((cj6)*(x356))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(cj6)*(x357)))+(((sj6)*(x356))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst21)*(((((sj6)*(x357)))+(((cj6)*(x356)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(cj6)*(x357)))+(((sj6)*(x356)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x358=IKcos(j4);
IkReal x359=IKsin(j4);
IkReal x360=((IkReal(0.328000000000000))*(sj3));
IkReal x361=((cj6)*(npx));
IkReal x362=((IkReal(1.00000000000000))*(npy));
IkReal x363=((sj6)*(x358));
IkReal x364=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x364)))+(((x359)*(x360)))+(((IkReal(-1.00000000000000))*(cj6)*(x362))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x361)))+(((IkReal(-1.00000000000000))*(x358)*(x360)))+(((npy)*(sj6))));
evalcond[2]=((((x359)*(x361)))+(((IkReal(-1.00000000000000))*(sj6)*(x359)*(x362)))+(((cj6)*(npy)*(x358)))+(((npx)*(x363))));
evalcond[3]=((((x358)*(x361)))+(((IkReal(-1.00000000000000))*(x362)*(x363)))+(x360)+(((IkReal(-1.00000000000000))*(x359)*(x364)))+(((IkReal(-1.00000000000000))*(cj6)*(x359)*(x362))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((IkReal(3.04878048780488))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((IkReal(0.328000000000000))*(cj3)*(cj5))))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x365=((IkReal(125.000000000000))*(sj5));
gconst0=IKsign(((((x365)*((npx)*(npx))))+(((x365)*((npy)*(npy))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x366=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x366));
evalcond[3]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x366)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x367=((IkReal(125.000000000000))*(cj4));
gconst3=IKsign(((((IkReal(-1.00000000000000))*(x367)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x367)*((npy)*(npy))))));
IkReal x368=((IkReal(1.00000000000000))*(cj4));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x368)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(x368)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x369=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x369));
evalcond[3]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x369)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x370=((IkReal(41.0000000000000))*(gconst4)*(sj3));
if( IKabs(((npx)*(x370))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x370))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x370)), ((npy)*(x370)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x371=IKsin(j6);
IkReal x372=IKcos(j6);
IkReal x373=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npy)*(x372)))+(((IkReal(-1.00000000000000))*(x371)*(x373))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x372)*(x373)))+(((npy)*(x371))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x374=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x374));
evalcond[3]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x374)))+(npz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-125.000000000000))*((npy)*(npy))))+(((IkReal(-125.000000000000))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x375=((IkReal(41.0000000000000))*(gconst5)*(sj3));
if( IKabs(((npx)*(x375))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x375))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x375)), ((npy)*(x375)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x376=IKsin(j6);
IkReal x377=IKcos(j6);
IkReal x378=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npy)*(x377)))+(((IkReal(-1.00000000000000))*(x376)*(x378))));
evalcond[1]=((((npy)*(x376)))+(((IkReal(-1.00000000000000))*(x377)*(x378))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x379=(cj4)*(cj4);
IkReal x380=((IkReal(41.0000000000000))*(sj3));
IkReal x381=((cj4)*(sj4));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x380)*(x381)))+(((npy)*(x379)*(x380))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x380)*(x381)))+(((IkReal(-1.00000000000000))*(npx)*(x379)*(x380))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(npx)*(x380)*(x381)))+(((npy)*(x379)*(x380)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(npy)*(x380)*(x381)))+(((IkReal(-1.00000000000000))*(npx)*(x379)*(x380)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x382=IKsin(j6);
IkReal x383=IKcos(j6);
IkReal x384=((IkReal(1.00000000000000))*(npx));
IkReal x385=((IkReal(0.328000000000000))*(sj3));
IkReal x386=((IkReal(1.00000000000000))*(npy));
IkReal x387=((npy)*(x382));
IkReal x388=((sj4)*(x383));
IkReal x389=((cj4)*(x383));
evalcond[0]=((((sj4)*(x385)))+(((IkReal(-1.00000000000000))*(x382)*(x384)))+(((IkReal(-1.00000000000000))*(x383)*(x386))));
evalcond[1]=((x387)+(((cj4)*(x385)))+(((IkReal(-1.00000000000000))*(x383)*(x384))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x384)*(x388)))+(((sj4)*(x387)))+(((cj4)*(npx)*(x382)))+(((npy)*(x389))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj4)*(x382)*(x384)))+(((IkReal(-1.00000000000000))*(x384)*(x389)))+(x385)+(((IkReal(-1.00000000000000))*(x386)*(x388)))+(((cj4)*(x387))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x390=((IkReal(41.0000000000000))*(cj4)*(sj3));
IkReal x391=((IkReal(41.0000000000000))*(sj3)*(sj4));
if( IKabs(((gconst2)*(((((npx)*(x391)))+(((IkReal(-1.00000000000000))*(npy)*(x390))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((npy)*(x391)))+(((npx)*(x390))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst2)*(((((npx)*(x391)))+(((IkReal(-1.00000000000000))*(npy)*(x390)))))), ((gconst2)*(((((npy)*(x391)))+(((npx)*(x390)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x392=IKsin(j6);
IkReal x393=IKcos(j6);
IkReal x394=((IkReal(1.00000000000000))*(npx));
IkReal x395=((IkReal(0.328000000000000))*(sj3));
IkReal x396=((IkReal(1.00000000000000))*(npy));
IkReal x397=((npy)*(x392));
IkReal x398=((sj4)*(x393));
IkReal x399=((cj4)*(x393));
evalcond[0]=((((IkReal(-1.00000000000000))*(x393)*(x396)))+(((IkReal(-1.00000000000000))*(x392)*(x394)))+(((sj4)*(x395))));
evalcond[1]=((((cj4)*(x395)))+(x397)+(((IkReal(-1.00000000000000))*(x393)*(x394))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x394)*(x398)))+(((npy)*(x399)))+(((cj4)*(npx)*(x392)))+(((sj4)*(x397))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x394)*(x399)))+(((IkReal(-1.00000000000000))*(sj4)*(x392)*(x394)))+(((cj4)*(x397)))+(x395)+(((IkReal(-1.00000000000000))*(x396)*(x398))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x400=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x400;
evalcond[3]=x400;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
IkReal x401=((IkReal(125.000000000000))*(cj4));
gconst7=IKsign(((((x401)*((npx)*(npx))))+(((x401)*((npy)*(npy))))));
dummyeval[0]=((((cj4)*((npx)*(npx))))+(((cj4)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x402=x400;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x402;
evalcond[3]=x402;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(125.000000000000))*((npx)*(npx))))+(((IkReal(125.000000000000))*((npy)*(npy))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x403=((IkReal(41.0000000000000))*(gconst8)*(sj3));
if( IKabs(((npx)*(x403))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x403))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x403)), ((npy)*(x403)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x404=IKsin(j6);
IkReal x405=IKcos(j6);
IkReal x406=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(x404)*(x406)))+(((IkReal(0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npy)*(x405))));
evalcond[1]=((((npy)*(x404)))+(((IkReal(-1.00000000000000))*(x405)*(x406))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x407=x400;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x407;
evalcond[3]=x407;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-125.000000000000))*((npy)*(npy))))+(((IkReal(-125.000000000000))*((npx)*(npx))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((npy)*(npy))))+(((IkReal(-1.00000000000000))*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x408=((IkReal(41.0000000000000))*(gconst9)*(sj3));
if( IKabs(((npx)*(x408))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(x408))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npx)*(x408)), ((npy)*(x408)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x409=IKsin(j6);
IkReal x410=IKcos(j6);
IkReal x411=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-0.328000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(npy)*(x410)))+(((IkReal(-1.00000000000000))*(x409)*(x411))));
evalcond[1]=((((npy)*(x409)))+(((IkReal(-1.00000000000000))*(x410)*(x411))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x412=(cj4)*(cj4);
IkReal x413=((IkReal(41.0000000000000))*(sj3));
IkReal x414=((cj4)*(sj4));
if( IKabs(((gconst7)*(((((npx)*(x413)*(x414)))+(((npy)*(x412)*(x413))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(npx)*(x412)*(x413)))+(((npy)*(x413)*(x414))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst7)*(((((npx)*(x413)*(x414)))+(((npy)*(x412)*(x413)))))), ((gconst7)*(((((IkReal(-1.00000000000000))*(npx)*(x412)*(x413)))+(((npy)*(x413)*(x414)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x415=IKsin(j6);
IkReal x416=IKcos(j6);
IkReal x417=((IkReal(1.00000000000000))*(npx));
IkReal x418=((IkReal(0.328000000000000))*(sj3));
IkReal x419=((IkReal(1.00000000000000))*(npy));
IkReal x420=((npy)*(x415));
IkReal x421=((sj4)*(x416));
IkReal x422=((cj4)*(x416));
evalcond[0]=((((IkReal(-1.00000000000000))*(x416)*(x419)))+(((IkReal(-1.00000000000000))*(x415)*(x417)))+(((sj4)*(x418))));
evalcond[1]=((x420)+(((IkReal(-1.00000000000000))*(x416)*(x417)))+(((IkReal(-1.00000000000000))*(cj4)*(x418))));
evalcond[2]=((((npx)*(x421)))+(((npy)*(x422)))+(((IkReal(-1.00000000000000))*(sj4)*(x415)*(x419)))+(((cj4)*(npx)*(x415))));
evalcond[3]=((((npx)*(x422)))+(((IkReal(-1.00000000000000))*(sj4)*(x415)*(x417)))+(((IkReal(-1.00000000000000))*(cj4)*(x415)*(x419)))+(x418)+(((IkReal(-1.00000000000000))*(x419)*(x421))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x423=((IkReal(41.0000000000000))*(cj4)*(sj3));
IkReal x424=((IkReal(41.0000000000000))*(sj3)*(sj4));
if( IKabs(((gconst6)*(((((npx)*(x424)))+(((npy)*(x423))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(npx)*(x423)))+(((npy)*(x424))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst6)*(((((npx)*(x424)))+(((npy)*(x423)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(npx)*(x423)))+(((npy)*(x424)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x425=IKsin(j6);
IkReal x426=IKcos(j6);
IkReal x427=((IkReal(1.00000000000000))*(npx));
IkReal x428=((IkReal(0.328000000000000))*(sj3));
IkReal x429=((IkReal(1.00000000000000))*(npy));
IkReal x430=((npy)*(x425));
IkReal x431=((sj4)*(x426));
IkReal x432=((cj4)*(x426));
evalcond[0]=((((sj4)*(x428)))+(((IkReal(-1.00000000000000))*(x426)*(x429)))+(((IkReal(-1.00000000000000))*(x425)*(x427))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x426)*(x427)))+(x430)+(((IkReal(-1.00000000000000))*(cj4)*(x428))));
evalcond[2]=((((npx)*(x431)))+(((cj4)*(npx)*(x425)))+(((npy)*(x432)))+(((IkReal(-1.00000000000000))*(sj4)*(x425)*(x429))));
evalcond[3]=((((npx)*(x432)))+(((IkReal(-1.00000000000000))*(x429)*(x431)))+(x428)+(((IkReal(-1.00000000000000))*(sj4)*(x425)*(x427)))+(((IkReal(-1.00000000000000))*(cj4)*(x425)*(x429))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x433=((IkReal(40.3750000000000))*(sj5));
IkReal x434=((IkReal(41.0000000000000))*(sj3));
IkReal x435=((cj4)*(cj5));
IkReal x436=((IkReal(41.0000000000000))*(cj3)*(sj5));
if( IKabs(((gconst1)*(((((npx)*(sj4)*(x434)))+(((IkReal(-1.00000000000000))*(npy)*(x436)))+(((IkReal(-1.00000000000000))*(npy)*(x433)))+(((IkReal(-1.00000000000000))*(npy)*(x434)*(x435))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((npx)*(x436)))+(((npx)*(x433)))+(((npy)*(sj4)*(x434)))+(((npx)*(x434)*(x435))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst1)*(((((npx)*(sj4)*(x434)))+(((IkReal(-1.00000000000000))*(npy)*(x436)))+(((IkReal(-1.00000000000000))*(npy)*(x433)))+(((IkReal(-1.00000000000000))*(npy)*(x434)*(x435)))))), ((gconst1)*(((((npx)*(x436)))+(((npx)*(x433)))+(((npy)*(sj4)*(x434)))+(((npx)*(x434)*(x435)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x437=IKcos(j6);
IkReal x438=IKsin(j6);
IkReal x439=((IkReal(0.328000000000000))*(cj3));
IkReal x440=((IkReal(1.00000000000000))*(sj4));
IkReal x441=((npz)*(sj5));
IkReal x442=((IkReal(0.328000000000000))*(sj3));
IkReal x443=((cj4)*(cj5));
IkReal x444=((IkReal(1.00000000000000))*(npx));
IkReal x445=((npy)*(x438));
IkReal x446=((npy)*(x437));
IkReal x447=((npx)*(x437));
IkReal x448=((npx)*(x438));
evalcond[0]=((((sj4)*(x442)))+(((IkReal(-1.00000000000000))*(x438)*(x444)))+(((IkReal(-1.00000000000000))*(x446))));
evalcond[1]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x439)))+(((cj5)*(npz)))+(((sj5)*(x447)))+(((IkReal(-1.00000000000000))*(sj5)*(x445))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x437)*(x444)))+(((IkReal(0.323000000000000))*(sj5)))+(x445)+(((x442)*(x443)))+(((sj5)*(x439))));
evalcond[3]=((((sj4)*(x441)))+(((cj4)*(x448)))+(((cj4)*(x446)))+(((IkReal(-1.00000000000000))*(cj5)*(x440)*(x447)))+(((cj5)*(sj4)*(x445))));
evalcond[4]=((((cj4)*(x441)))+(x442)+(((x443)*(x445)))+(((IkReal(-1.00000000000000))*(x440)*(x446)))+(((IkReal(-1.00000000000000))*(x440)*(x448)))+(((IkReal(-1.00000000000000))*(x437)*(x443)*(x444))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x449=((IkReal(41.0000000000000))*(npy));
IkReal x450=((IkReal(41.0000000000000))*(npx));
IkReal x451=((IkReal(125.000000000000))*(cj5)*(npz));
IkReal x452=((sj3)*(sj4)*(sj5));
if( IKabs(((gconst0)*(((((npy)*(x451)))+(((IkReal(-1.00000000000000))*(cj3)*(x449)))+(((IkReal(-40.3750000000000))*(npy)))+(((x450)*(x452))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj3)*(x450)))+(((x449)*(x452)))+(((IkReal(40.3750000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x451))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((npy)*(x451)))+(((IkReal(-1.00000000000000))*(cj3)*(x449)))+(((IkReal(-40.3750000000000))*(npy)))+(((x450)*(x452)))))), ((gconst0)*(((((cj3)*(x450)))+(((x449)*(x452)))+(((IkReal(40.3750000000000))*(npx)))+(((IkReal(-1.00000000000000))*(npx)*(x451)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x453=IKcos(j6);
IkReal x454=IKsin(j6);
IkReal x455=((IkReal(0.328000000000000))*(cj3));
IkReal x456=((IkReal(1.00000000000000))*(sj4));
IkReal x457=((npz)*(sj5));
IkReal x458=((IkReal(0.328000000000000))*(sj3));
IkReal x459=((cj4)*(cj5));
IkReal x460=((IkReal(1.00000000000000))*(npx));
IkReal x461=((npy)*(x454));
IkReal x462=((npy)*(x453));
IkReal x463=((npx)*(x453));
IkReal x464=((npx)*(x454));
evalcond[0]=((((IkReal(-1.00000000000000))*(x462)))+(((IkReal(-1.00000000000000))*(x454)*(x460)))+(((sj4)*(x458))));
evalcond[1]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(x461)))+(((IkReal(-1.00000000000000))*(x455)))+(((cj5)*(npz)))+(((sj5)*(x463))));
evalcond[2]=((((IkReal(0.323000000000000))*(sj5)))+(x461)+(((IkReal(-1.00000000000000))*(x453)*(x460)))+(((x458)*(x459)))+(((sj5)*(x455))));
evalcond[3]=((((cj4)*(x464)))+(((cj4)*(x462)))+(((cj5)*(sj4)*(x461)))+(((sj4)*(x457)))+(((IkReal(-1.00000000000000))*(cj5)*(x456)*(x463))));
evalcond[4]=((((cj4)*(x457)))+(((IkReal(-1.00000000000000))*(x456)*(x462)))+(((IkReal(-1.00000000000000))*(x456)*(x464)))+(x458)+(((IkReal(-1.00000000000000))*(x453)*(x459)*(x460)))+(((x459)*(x461))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x465=(sj5)*(sj5);
if( IKabs(((npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x466=((IkReal(1.00000000000000))*(IKatan2(((npx)*(sj5)), ((IkReal(-1.00000000000000))*(npy)*(sj5)))));
if( (((((x465)*((npx)*(npx))))+(((x465)*((npy)*(npy)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x465)*((npx)*(npx))))+(((x465)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x465)*((npx)*(npx))))+(((x465)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x465)*((npx)*(npx))))+(((x465)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x465)*((npx)*(npx))))+(((x465)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x467=IKasin(((((IKabs(IKabs(IKsqrt(((((x465)*((npx)*(npx))))+(((x465)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x465)*((npx)*(npx))))+(((x465)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x467)))+(((IkReal(-1.00000000000000))*(x466))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x466)))+(x467));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=((((cj6)*(npy)*(sj3)))+(((npx)*(sj3)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x468=((IkReal(1.00000000000000))*(npy));
IkReal x469=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x469)))+(((IkReal(-1.00000000000000))*(cj6)*(x468))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.651000000000000))*(cj5))));
evalcond[4]=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x468)))+(((cj5)*(npz)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(0.651000000000000))*(sj5)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x469))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x470=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x470));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x470))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x471=IKcos(j4);
IkReal x472=IKsin(j4);
IkReal x473=((IkReal(1.00000000000000))*(npx));
IkReal x474=((cj5)*(x471));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x472)*(x473)))+(((npz)*(sj5)*(x471)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x472)))+(((npy)*(sj6)*(x474)))+(((IkReal(-1.00000000000000))*(cj6)*(x473)*(x474))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x475=((IkReal(1.00000000000000))*(npy));
IkReal x476=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x476)))+(((IkReal(-1.00000000000000))*(cj6)*(x475))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.00500000000000000))*(cj5))));
evalcond[4]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x475)))+(((cj5)*(npz)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-0.00500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x476))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x477=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x477));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x477))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x478=IKcos(j4);
IkReal x479=IKsin(j4);
IkReal x480=((IkReal(1.00000000000000))*(npx));
IkReal x481=((cj5)*(x478));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x480)*(x481)))+(((npz)*(sj5)*(x478)))+(((IkReal(-1.00000000000000))*(sj6)*(x479)*(x480)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x479)))+(((npy)*(sj6)*(x481))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x482=((IkReal(0.328000000000000))*(cj3));
IkReal x483=((cj6)*(npx));
IkReal x484=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(x482)))+(((IkReal(-1.00000000000000))*(x484)))+(x483));
evalcond[3]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(x483)))+(x482)+(x484));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x485=((IkReal(1.00000000000000))*(cj6));
IkReal x486=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(sj6)))+(((IkReal(-1.00000000000000))*(npy)*(x485))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(-0.651000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x486))));
evalcond[5]=((IkReal(0.651000000000000))+(x486)+(((IkReal(-1.00000000000000))*(npx)*(x485))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x487=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x487));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x487))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x488=IKsin(j4);
IkReal x489=((IkReal(1.00000000000000))*(x488));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x489)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x489)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x490=((IkReal(1.00000000000000))*(cj6));
IkReal x491=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(sj6)))+(((IkReal(-1.00000000000000))*(npy)*(x490))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(0.00500000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x491))));
evalcond[5]=((IkReal(-0.00500000000000000))+(x491)+(((IkReal(-1.00000000000000))*(npx)*(x490))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x492=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x492));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x492))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x493=IKsin(j4);
IkReal x494=((IkReal(1.00000000000000))*(x493));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x494)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x494)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst11)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst11)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x495=IKsin(j4);
IkReal x496=IKcos(j4);
IkReal x497=((IkReal(0.328000000000000))*(sj3));
IkReal x498=((npx)*(sj6));
IkReal x499=((cj6)*(npy));
IkReal x500=((IkReal(1.00000000000000))*(x495));
evalcond[0]=((((x495)*(x497)))+(((IkReal(-1.00000000000000))*(x498)))+(((IkReal(-1.00000000000000))*(x499))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x496)*(x497)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[2]=((((x496)*(x499)))+(((x496)*(x498)))+(((npz)*(x495))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x499)*(x500)))+(x497)+(((npz)*(x496)))+(((IkReal(-1.00000000000000))*(x498)*(x500))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst10)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst10)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x501=IKsin(j4);
IkReal x502=IKcos(j4);
IkReal x503=((IkReal(0.328000000000000))*(sj3));
IkReal x504=((npx)*(sj6));
IkReal x505=((cj6)*(npy));
IkReal x506=((IkReal(1.00000000000000))*(x501));
evalcond[0]=((((x501)*(x503)))+(((IkReal(-1.00000000000000))*(x505)))+(((IkReal(-1.00000000000000))*(x504))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x502)*(x503))));
evalcond[2]=((((x502)*(x505)))+(((x502)*(x504)))+(((npz)*(x501))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x505)*(x506)))+(x503)+(((IkReal(-1.00000000000000))*(x504)*(x506)))+(((npz)*(x502))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x507=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x507;
evalcond[3]=x507;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x508=((IkReal(1.00000000000000))*(npx));
IkReal x509=((IkReal(-0.651000000000000))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x508))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x508))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x509;
evalcond[5]=x509;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x510=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x510));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x510))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x511=IKsin(j4);
IkReal x512=((IkReal(1.00000000000000))*(x511));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x512)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x512)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x513=((IkReal(1.00000000000000))*(npx));
IkReal x514=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x513)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x513)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x514;
evalcond[5]=x514;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x515=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x515));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x515))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x516=IKsin(j4);
IkReal x517=((IkReal(1.00000000000000))*(x516));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x517)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x517)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst13)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst13)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x518=IKcos(j4);
IkReal x519=IKsin(j4);
IkReal x520=((IkReal(0.328000000000000))*(sj3));
IkReal x521=((IkReal(1.00000000000000))*(npz));
IkReal x522=((npx)*(sj6));
IkReal x523=((cj6)*(npy));
IkReal x524=((IkReal(1.00000000000000))*(x519));
evalcond[0]=((((x519)*(x520)))+(((IkReal(-1.00000000000000))*(x523)))+(((IkReal(-1.00000000000000))*(x522))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x521)))+(((x518)*(x520))));
evalcond[2]=((((x518)*(x523)))+(((x518)*(x522)))+(((IkReal(-1.00000000000000))*(x519)*(x521))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x523)*(x524)))+(((IkReal(-1.00000000000000))*(x518)*(x521)))+(x520)+(((IkReal(-1.00000000000000))*(x522)*(x524))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst12)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst12)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x525=IKcos(j4);
IkReal x526=IKsin(j4);
IkReal x527=((IkReal(0.328000000000000))*(sj3));
IkReal x528=((IkReal(1.00000000000000))*(npz));
IkReal x529=((npx)*(sj6));
IkReal x530=((cj6)*(npy));
IkReal x531=((IkReal(1.00000000000000))*(x526));
evalcond[0]=((((IkReal(-1.00000000000000))*(x530)))+(((IkReal(-1.00000000000000))*(x529)))+(((x526)*(x527))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x528)))+(((x525)*(x527))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x526)*(x528)))+(((x525)*(x529)))+(((x525)*(x530))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x525)*(x528)))+(((IkReal(-1.00000000000000))*(x530)*(x531)))+(((IkReal(-1.00000000000000))*(x529)*(x531)))+(x527));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x532=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x532));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x532))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x533=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x533)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x533))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((npy)*(sj3)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x534=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x534)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(-0.651000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x534)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x535=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x535));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x535))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x536=IKcos(j4);
IkReal x537=IKsin(j4);
IkReal x538=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x537)*(x538)))+(((npy)*(sj6)*(x536)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x537)))+(((IkReal(-1.00000000000000))*(cj6)*(x536)*(x538))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x539=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x539)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.00500000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x539)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x540=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x540));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x540))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x541=IKcos(j4);
IkReal x542=IKsin(j4);
IkReal x543=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((npy)*(sj6)*(x541)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x542)))+(((IkReal(-1.00000000000000))*(sj6)*(x542)*(x543)))+(((IkReal(-1.00000000000000))*(cj6)*(x541)*(x543))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x544=((npy)*(sj6));
IkReal x545=((IkReal(41.0000000000000))*(sj3));
IkReal x546=((cj6)*(npx));
IkReal x547=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x548=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(npx)*(sj6)*(x544)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x544)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x546)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x546))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x544)))+(((IkReal(125.000000000000))*(x546))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(npx)*(sj6)*(x544)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x544)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x546)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x546)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x544)))+(((IkReal(125.000000000000))*(x546)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((x544)*(x545)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(npx)*(sj6)*(x544)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x544)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x546)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x546)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x544)))+(((IkReal(125.000000000000))*(x546)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x549=IKcos(j4);
IkReal x550=IKsin(j4);
IkReal x551=((IkReal(0.328000000000000))*(sj3));
IkReal x552=((IkReal(1.00000000000000))*(cj6));
IkReal x553=((npx)*(sj6));
IkReal x554=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x552)))+(((IkReal(-1.00000000000000))*(x553)))+(((x550)*(x551))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x552)))+(x554)+(((x549)*(x551))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x550)*(x552)))+(((cj6)*(npy)*(x549)))+(((x550)*(x554)))+(((x549)*(x553))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x550)*(x553)))+(((IkReal(-1.00000000000000))*(npy)*(x550)*(x552)))+(x551)+(((x549)*(x554)))+(((IkReal(-1.00000000000000))*(npx)*(x549)*(x552))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x555=((npy)*(sj6));
IkReal x556=((IkReal(5125.00000000000))*(sj3));
IkReal x557=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x555)*(x557)))+(((IkReal(15625.0000000000))*((x557)*(x557))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x555)*(x555)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x555)))+(((IkReal(125.000000000000))*(x557))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x555)*(x557)))+(((IkReal(15625.0000000000))*((x557)*(x557))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x555)*(x555))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x555)))+(((IkReal(125.000000000000))*(x557)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x556)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x556)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x555)*(x557)))+(((IkReal(15625.0000000000))*((x557)*(x557))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x555)*(x555))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x555)))+(((IkReal(125.000000000000))*(x557)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x558=IKcos(j4);
IkReal x559=IKsin(j4);
IkReal x560=((IkReal(0.328000000000000))*(sj3));
IkReal x561=((IkReal(1.00000000000000))*(cj6));
IkReal x562=((npx)*(sj6));
IkReal x563=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x561)))+(((IkReal(-1.00000000000000))*(x562)))+(((x559)*(x560))));
evalcond[1]=((((x558)*(x560)))+(x563)+(((IkReal(-1.00000000000000))*(npx)*(x561))));
evalcond[2]=((((x558)*(x562)))+(((IkReal(-1.00000000000000))*(npx)*(x559)*(x561)))+(((cj6)*(npy)*(x558)))+(((x559)*(x563))));
evalcond[3]=((((x558)*(x563)))+(((IkReal(-1.00000000000000))*(npy)*(x559)*(x561)))+(x560)+(((IkReal(-1.00000000000000))*(x559)*(x562)))+(((IkReal(-1.00000000000000))*(npx)*(x558)*(x561))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x564=((IkReal(125.000000000000))*(npy));
IkReal x565=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst14)*(((((sj6)*(x565)))+(((cj6)*(x564))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(sj6)*(x564)))+(((cj6)*(x565))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((sj6)*(x565)))+(((cj6)*(x564)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(sj6)*(x564)))+(((cj6)*(x565)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x566=IKcos(j4);
IkReal x567=IKsin(j4);
IkReal x568=((IkReal(0.328000000000000))*(sj3));
IkReal x569=((IkReal(1.00000000000000))*(cj6));
IkReal x570=((npx)*(sj6));
IkReal x571=((npy)*(sj6));
evalcond[0]=((((x567)*(x568)))+(((IkReal(-1.00000000000000))*(x570)))+(((IkReal(-1.00000000000000))*(npy)*(x569))));
evalcond[1]=((((x566)*(x568)))+(x571)+(((IkReal(-1.00000000000000))*(npx)*(x569))));
evalcond[2]=((((x567)*(x571)))+(((cj6)*(npy)*(x566)))+(((IkReal(-1.00000000000000))*(npx)*(x567)*(x569)))+(((x566)*(x570))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x566)*(x569)))+(((IkReal(-1.00000000000000))*(x567)*(x570)))+(((IkReal(-1.00000000000000))*(npy)*(x567)*(x569)))+(x568)+(((x566)*(x571))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x572=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x572;
evalcond[3]=x572;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x573=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x573)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x573))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x574=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x575=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x575)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=x574;
evalcond[4]=x574;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x575)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x576=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x576));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x576))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x577=IKcos(j4);
IkReal x578=IKsin(j4);
IkReal x579=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x577)*(x579)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x578)))+(((IkReal(-1.00000000000000))*(npx)*(x578)*(x579)))+(((cj6)*(npx)*(x577))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x580=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x581=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x581)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=x580;
evalcond[4]=x580;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x581)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x582=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x582));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x582))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x583=IKcos(j4);
IkReal x584=IKsin(j4);
IkReal x585=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(x584)*(x585)))+(((cj6)*(npx)*(x583)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x584)))+(((IkReal(-1.00000000000000))*(npy)*(x583)*(x585))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x586=((npy)*(sj6));
IkReal x587=((IkReal(41.0000000000000))*(sj3));
IkReal x588=((cj6)*(npx));
IkReal x589=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x590=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((x587)*(x588)))+(((IkReal(-1.00000000000000))*(x586)*(x587))))) != 0)?((IkReal)1/(((((x587)*(x588)))+(((IkReal(-1.00000000000000))*(x586)*(x587)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x586)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x586)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x588)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x588))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x588)))+(((IkReal(125.000000000000))*(x586))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x587)*(x588)))+(((IkReal(-1.00000000000000))*(x586)*(x587))))) != 0)?((IkReal)1/(((((x587)*(x588)))+(((IkReal(-1.00000000000000))*(x586)*(x587)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x586)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x586)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x588)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x588)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x588)))+(((IkReal(125.000000000000))*(x586)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((x587)*(x588)))+(((IkReal(-1.00000000000000))*(x586)*(x587))))) != 0)?((IkReal)1/(((((x587)*(x588)))+(((IkReal(-1.00000000000000))*(x586)*(x587)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x586)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x586)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x588)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x588)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(x588)))+(((IkReal(125.000000000000))*(x586)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x591=IKcos(j4);
IkReal x592=IKsin(j4);
IkReal x593=((IkReal(0.328000000000000))*(sj3));
IkReal x594=((cj6)*(npx));
IkReal x595=((IkReal(1.00000000000000))*(npy));
IkReal x596=((sj6)*(x591));
IkReal x597=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x597)))+(((IkReal(-1.00000000000000))*(cj6)*(x595)))+(((x592)*(x593))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x594)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x591)*(x593))));
evalcond[2]=((((npx)*(x596)))+(((IkReal(-1.00000000000000))*(sj6)*(x592)*(x595)))+(((cj6)*(npy)*(x591)))+(((x592)*(x594))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x592)*(x597)))+(((IkReal(-1.00000000000000))*(cj6)*(x592)*(x595)))+(x593)+(((IkReal(-1.00000000000000))*(x595)*(x596)))+(((x591)*(x594))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x598=((npy)*(sj6));
IkReal x599=((IkReal(5125.00000000000))*(sj3));
IkReal x600=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x599)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x599))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x599)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x599)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x598)*(x600)))+(((IkReal(15625.0000000000))*((x598)*(x598))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x600)*(x600)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x598)))+(((IkReal(-125.000000000000))*(x600))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x599)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x599))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x599)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x599)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x598)*(x600)))+(((IkReal(15625.0000000000))*((x598)*(x598))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x600)*(x600))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x598)))+(((IkReal(-125.000000000000))*(x600)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x599)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x599))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x599)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x599)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x598)*(x600)))+(((IkReal(15625.0000000000))*((x598)*(x598))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))+(((IkReal(15625.0000000000))*((x600)*(x600))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x598)))+(((IkReal(-125.000000000000))*(x600)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x601=IKcos(j4);
IkReal x602=IKsin(j4);
IkReal x603=((IkReal(0.328000000000000))*(sj3));
IkReal x604=((cj6)*(npx));
IkReal x605=((IkReal(1.00000000000000))*(npy));
IkReal x606=((sj6)*(x601));
IkReal x607=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x605)))+(((IkReal(-1.00000000000000))*(x607)))+(((x602)*(x603))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x604)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x601)*(x603))));
evalcond[2]=((((cj6)*(npy)*(x601)))+(((npx)*(x606)))+(((x602)*(x604)))+(((IkReal(-1.00000000000000))*(sj6)*(x602)*(x605))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x602)*(x607)))+(((x601)*(x604)))+(((IkReal(-1.00000000000000))*(cj6)*(x602)*(x605)))+(((IkReal(-1.00000000000000))*(x605)*(x606)))+(x603));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x608=((IkReal(125.000000000000))*(npy));
IkReal x609=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst15)*(((((sj6)*(x609)))+(((cj6)*(x608))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((sj6)*(x608)))+(((IkReal(-1.00000000000000))*(cj6)*(x609))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((sj6)*(x609)))+(((cj6)*(x608)))))), ((gconst15)*(((((sj6)*(x608)))+(((IkReal(-1.00000000000000))*(cj6)*(x609)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x610=IKcos(j4);
IkReal x611=IKsin(j4);
IkReal x612=((IkReal(0.328000000000000))*(sj3));
IkReal x613=((cj6)*(npx));
IkReal x614=((IkReal(1.00000000000000))*(npy));
IkReal x615=((sj6)*(x610));
IkReal x616=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x614)))+(((x611)*(x612)))+(((IkReal(-1.00000000000000))*(x616))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x610)*(x612)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x613))));
evalcond[2]=((((cj6)*(npy)*(x610)))+(((x611)*(x613)))+(((npx)*(x615)))+(((IkReal(-1.00000000000000))*(sj6)*(x611)*(x614))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x614)*(x615)))+(((IkReal(-1.00000000000000))*(x611)*(x616)))+(((IkReal(-1.00000000000000))*(cj6)*(x611)*(x614)))+(x612)+(((x610)*(x613))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x617=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x618=((IkReal(125.000000000000))*(npy));
IkReal x619=((IkReal(0.0243902439024390))*(x617));
IkReal x620=((IkReal(125.000000000000))*(npx));
if( IKabs(((x619)*(((((cj6)*(x618)))+(((sj6)*(x620))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x619)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x618)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x620))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x619)*(((((cj6)*(x618)))+(((sj6)*(x620)))))))+IKsqr(((x619)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x618)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x620)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x619)*(((((cj6)*(x618)))+(((sj6)*(x620)))))), ((x619)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj6)*(x618)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x620)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x621=IKcos(j4);
IkReal x622=IKsin(j4);
IkReal x623=((npy)*(sj6));
IkReal x624=((IkReal(1.00000000000000))*(npx));
IkReal x625=((IkReal(0.328000000000000))*(cj3));
IkReal x626=((IkReal(0.328000000000000))*(sj3));
IkReal x627=((cj6)*(x621));
IkReal x628=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x629=((sj5)*(x621));
IkReal x630=((cj5)*(x622));
IkReal x631=((cj5)*(x621));
evalcond[0]=((((IkReal(-1.00000000000000))*(x628)))+(((IkReal(-1.00000000000000))*(sj6)*(x624)))+(((x622)*(x626))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((cj5)*(x625)))+(((IkReal(0.323000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x626)*(x629))));
evalcond[2]=((((sj5)*(x625)))+(((IkReal(0.323000000000000))*(sj5)))+(x623)+(((IkReal(-1.00000000000000))*(cj6)*(x624)))+(((x626)*(x631))));
evalcond[3]=((((npx)*(sj6)*(x621)))+(((npy)*(x627)))+(((npz)*(sj5)*(x622)))+(((IkReal(-1.00000000000000))*(cj6)*(x624)*(x630)))+(((x623)*(x630))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(x624)*(x627)))+(((IkReal(-1.00000000000000))*(x622)*(x628)))+(((npz)*(x629)))+(((IkReal(-1.00000000000000))*(sj6)*(x622)*(x624)))+(x626)+(((x623)*(x631))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x632=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x633=((IkReal(0.0243902439024390))*(x632));
if( IKabs(((x633)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x633)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x633)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))))+IKsqr(((x633)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x633)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((x633)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x634=IKcos(j4);
IkReal x635=IKsin(j4);
IkReal x636=((npy)*(sj6));
IkReal x637=((IkReal(1.00000000000000))*(npx));
IkReal x638=((IkReal(0.328000000000000))*(cj3));
IkReal x639=((IkReal(0.328000000000000))*(sj3));
IkReal x640=((cj6)*(x634));
IkReal x641=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x642=((sj5)*(x634));
IkReal x643=((cj5)*(x635));
IkReal x644=((cj5)*(x634));
evalcond[0]=((((x635)*(x639)))+(((IkReal(-1.00000000000000))*(x641)))+(((IkReal(-1.00000000000000))*(sj6)*(x637))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x639)*(x642)))+(((IkReal(-1.00000000000000))*(npz)))+(((cj5)*(x638)))+(((IkReal(0.323000000000000))*(cj5))));
evalcond[2]=((((x639)*(x644)))+(((sj5)*(x638)))+(((IkReal(0.323000000000000))*(sj5)))+(x636)+(((IkReal(-1.00000000000000))*(cj6)*(x637))));
evalcond[3]=((((npx)*(sj6)*(x634)))+(((x636)*(x643)))+(((npz)*(sj5)*(x635)))+(((IkReal(-1.00000000000000))*(cj6)*(x637)*(x643)))+(((npy)*(x640))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj6)*(x635)*(x637)))+(((x636)*(x644)))+(((npz)*(x642)))+(((IkReal(-1.00000000000000))*(x635)*(x641)))+(x639)+(((IkReal(-1.00000000000000))*(cj5)*(x637)*(x640))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x645=((IkReal(125.000000000000))*(cj6));
IkReal x646=((cj5)*(sj6));
IkReal x647=((npz)*(sj5));
IkReal x648=((IkReal(125.000000000000))*(npx));
IkReal x649=((cj5)*(npy));
IkReal x650=((IkReal(41.0000000000000))*(sj3));
if( IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x648)))+(((npy)*(x645))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((cj6)*(npy)*(x650)))+(((npx)*(sj6)*(x650))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x650)))+(((npx)*(sj6)*(x650)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x646)*(x648)))+(((IkReal(-1.00000000000000))*(sj6)*(x647)*(x648)))+(((cj6)*(npx)*(x645)*(x649)))+(((IkReal(-1.00000000000000))*(npy)*(x645)*(x647)))+(((x645)*(x646)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x645)*(x646)*((npy)*(npy)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x648)))+(((npy)*(x645)))))))+IKsqr(((((IKabs(((((cj6)*(npy)*(x650)))+(((npx)*(sj6)*(x650))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x650)))+(((npx)*(sj6)*(x650)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x646)*(x648)))+(((IkReal(-1.00000000000000))*(sj6)*(x647)*(x648)))+(((cj6)*(npx)*(x645)*(x649)))+(((IkReal(-1.00000000000000))*(npy)*(x645)*(x647)))+(((x645)*(x646)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x645)*(x646)*((npy)*(npy))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x648)))+(((npy)*(x645)))))), ((((IKabs(((((cj6)*(npy)*(x650)))+(((npx)*(sj6)*(x650))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x650)))+(((npx)*(sj6)*(x650)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x646)*(x648)))+(((IkReal(-1.00000000000000))*(sj6)*(x647)*(x648)))+(((cj6)*(npx)*(x645)*(x649)))+(((IkReal(-1.00000000000000))*(npy)*(x645)*(x647)))+(((x645)*(x646)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(x645)*(x646)*((npy)*(npy))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x651=IKcos(j4);
IkReal x652=IKsin(j4);
IkReal x653=((npy)*(sj6));
IkReal x654=((IkReal(1.00000000000000))*(npx));
IkReal x655=((IkReal(0.328000000000000))*(cj3));
IkReal x656=((IkReal(0.328000000000000))*(sj3));
IkReal x657=((cj6)*(x651));
IkReal x658=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x659=((sj5)*(x651));
IkReal x660=((cj5)*(x652));
IkReal x661=((cj5)*(x651));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x654)))+(((x652)*(x656)))+(((IkReal(-1.00000000000000))*(x658))));
evalcond[1]=((((cj5)*(x655)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x656)*(x659)))+(((IkReal(0.323000000000000))*(cj5))));
evalcond[2]=((((IkReal(0.323000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x654)))+(((x656)*(x661)))+(((sj5)*(x655)))+(x653));
evalcond[3]=((((npy)*(x657)))+(((npz)*(sj5)*(x652)))+(((npx)*(sj6)*(x651)))+(((x653)*(x660)))+(((IkReal(-1.00000000000000))*(cj6)*(x654)*(x660))));
evalcond[4]=((((npz)*(x659)))+(((IkReal(-1.00000000000000))*(sj6)*(x652)*(x654)))+(((IkReal(-1.00000000000000))*(cj5)*(x654)*(x657)))+(x656)+(((x653)*(x661)))+(((IkReal(-1.00000000000000))*(x652)*(x658))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x662=(sj5)*(sj5);
if( IKabs(((npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x663=((IkReal(1.00000000000000))*(IKatan2(((npx)*(sj5)), ((IkReal(-1.00000000000000))*(npy)*(sj5)))));
if( (((((x662)*((npx)*(npx))))+(((x662)*((npy)*(npy)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x662)*((npx)*(npx))))+(((x662)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x662)*((npx)*(npx))))+(((x662)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x662)*((npx)*(npx))))+(((x662)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x662)*((npx)*(npx))))+(((x662)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x664=IKasin(((((IKabs(IKabs(IKsqrt(((((x662)*((npx)*(npx))))+(((x662)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x662)*((npx)*(npx))))+(((x662)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(-0.323000000000000))+(((cj5)*(npz)))+(((IkReal(-0.328000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x664)))+(((IkReal(-1.00000000000000))*(x663))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x663)))+(x664));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=((((cj6)*(npy)*(sj3)))+(((npx)*(sj3)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x665=((IkReal(1.00000000000000))*(npy));
IkReal x666=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x666)))+(((IkReal(-1.00000000000000))*(cj6)*(x665))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.651000000000000))*(cj5))));
evalcond[4]=((IkReal(-0.651000000000000))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x665)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(0.651000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x666)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x667=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x667));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x667))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x668=IKcos(j4);
IkReal x669=IKsin(j4);
IkReal x670=((IkReal(1.00000000000000))*(npx));
IkReal x671=((cj5)*(x668));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x669)))+(((npy)*(sj6)*(x671)))+(((IkReal(-1.00000000000000))*(cj6)*(x670)*(x671)))+(((npz)*(sj5)*(x668)))+(((IkReal(-1.00000000000000))*(sj6)*(x669)*(x670))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x672=((IkReal(1.00000000000000))*(npy));
IkReal x673=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x673)))+(((IkReal(-1.00000000000000))*(cj6)*(x672))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.00500000000000000))*(cj5))));
evalcond[4]=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x672)))+(((cj5)*(npz)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-0.00500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x673))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x674=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))));
j4array[0]=((IkReal(-1.00000000000000))*(x674));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x674))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x675=IKcos(j4);
IkReal x676=IKsin(j4);
IkReal x677=((IkReal(1.00000000000000))*(npx));
IkReal x678=((cj5)*(x675));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x676)))+(((IkReal(-1.00000000000000))*(sj6)*(x676)*(x677)))+(((IkReal(-1.00000000000000))*(cj6)*(x677)*(x678)))+(((npz)*(sj5)*(x675)))+(((npy)*(sj6)*(x678))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x679=((IkReal(0.328000000000000))*(cj3));
IkReal x680=((cj6)*(npx));
IkReal x681=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(-0.323000000000000))+(x680)+(((IkReal(-1.00000000000000))*(x681)))+(((IkReal(-1.00000000000000))*(x679))));
evalcond[3]=((IkReal(0.323000000000000))+(x679)+(x681)+(((IkReal(-1.00000000000000))*(x680))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x682=((IkReal(1.00000000000000))*(cj6));
IkReal x683=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x682)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(-0.651000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x683))));
evalcond[5]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x682)))+(x683));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x684=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x684));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x684))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x685=IKsin(j4);
IkReal x686=((IkReal(1.00000000000000))*(x685));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x686)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x686)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x687=((IkReal(1.00000000000000))*(cj6));
IkReal x688=((npy)*(sj6));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npy)*(x687)))+(((IkReal(-1.00000000000000))*(npx)*(sj6))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=((IkReal(0.00500000000000000))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(x688))));
evalcond[5]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x687)))+(x688));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(npz) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x689=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), npz);
j4array[0]=((IkReal(-1.00000000000000))*(x689));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x689))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x690=IKsin(j4);
IkReal x691=((IkReal(1.00000000000000))*(x690));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x691)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x691)))+(((npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst11)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst11)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst11)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x692=IKsin(j4);
IkReal x693=IKcos(j4);
IkReal x694=((IkReal(0.328000000000000))*(sj3));
IkReal x695=((npx)*(sj6));
IkReal x696=((cj6)*(npy));
IkReal x697=((IkReal(1.00000000000000))*(x692));
evalcond[0]=((((x692)*(x694)))+(((IkReal(-1.00000000000000))*(x695)))+(((IkReal(-1.00000000000000))*(x696))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x693)*(x694)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[2]=((((npz)*(x692)))+(((x693)*(x696)))+(((x693)*(x695))));
evalcond[3]=((((npz)*(x693)))+(((IkReal(-1.00000000000000))*(x696)*(x697)))+(((IkReal(-1.00000000000000))*(x695)*(x697)))+(x694));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-125.000000000000))*(gconst10)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(-125.000000000000))*(gconst10)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x698=IKsin(j4);
IkReal x699=IKcos(j4);
IkReal x700=((IkReal(0.328000000000000))*(sj3));
IkReal x701=((npx)*(sj6));
IkReal x702=((cj6)*(npy));
IkReal x703=((IkReal(1.00000000000000))*(x698));
evalcond[0]=((((IkReal(-1.00000000000000))*(x701)))+(((IkReal(-1.00000000000000))*(x702)))+(((x698)*(x700))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x699)*(x700))));
evalcond[2]=((((npz)*(x698)))+(((x699)*(x701)))+(((x699)*(x702))));
evalcond[3]=((((npz)*(x699)))+(((IkReal(-1.00000000000000))*(x702)*(x703)))+(x700)+(((IkReal(-1.00000000000000))*(x701)*(x703))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x704=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x704;
evalcond[3]=x704;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x705=((IkReal(1.00000000000000))*(npx));
IkReal x706=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x705)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x705))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x706;
evalcond[5]=x706;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x707=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x707));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x707))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x708=IKsin(j4);
IkReal x709=((IkReal(1.00000000000000))*(x708));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x709)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x709)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x710=((IkReal(1.00000000000000))*(npx));
IkReal x711=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(cj6)*(x710)))+(((npy)*(sj6))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x710))));
evalcond[3]=((IkReal(-1.00000000000000))*(npz));
evalcond[4]=x711;
evalcond[5]=x711;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x712=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((IkReal(-1.00000000000000))*(npz)));
j4array[0]=((IkReal(-1.00000000000000))*(x712));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x712))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x713=IKsin(j4);
IkReal x714=((IkReal(1.00000000000000))*(x713));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x714)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x714)))+(((IkReal(-1.00000000000000))*(npz)*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst13)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst13)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst13)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x715=IKcos(j4);
IkReal x716=IKsin(j4);
IkReal x717=((IkReal(0.328000000000000))*(sj3));
IkReal x718=((IkReal(1.00000000000000))*(npz));
IkReal x719=((npx)*(sj6));
IkReal x720=((cj6)*(npy));
IkReal x721=((IkReal(1.00000000000000))*(x716));
evalcond[0]=((((IkReal(-1.00000000000000))*(x719)))+(((IkReal(-1.00000000000000))*(x720)))+(((x716)*(x717))));
evalcond[1]=((((x715)*(x717)))+(((IkReal(-1.00000000000000))*(x718))));
evalcond[2]=((((x715)*(x719)))+(((IkReal(-1.00000000000000))*(x716)*(x718)))+(((x715)*(x720))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x720)*(x721)))+(x717)+(((IkReal(-1.00000000000000))*(x719)*(x721)))+(((IkReal(-1.00000000000000))*(x715)*(x718))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(125.000000000000))*(gconst12)*(npz))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((IkReal(125.000000000000))*(gconst12)*(npz)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x722=IKcos(j4);
IkReal x723=IKsin(j4);
IkReal x724=((IkReal(0.328000000000000))*(sj3));
IkReal x725=((IkReal(1.00000000000000))*(npz));
IkReal x726=((npx)*(sj6));
IkReal x727=((cj6)*(npy));
IkReal x728=((IkReal(1.00000000000000))*(x723));
evalcond[0]=((((x723)*(x724)))+(((IkReal(-1.00000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(x727))));
evalcond[1]=((((x722)*(x724)))+(((IkReal(-1.00000000000000))*(x725))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x723)*(x725)))+(((x722)*(x727)))+(((x722)*(x726))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x727)*(x728)))+(((IkReal(-1.00000000000000))*(x722)*(x725)))+(((IkReal(-1.00000000000000))*(x726)*(x728)))+(x724));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x729=((IkReal(0.328000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=((IkReal(0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x729));
evalcond[3]=((IkReal(-0.323000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x729))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x730=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x730)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x730))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((npy)*(sj3)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x731=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x731))));
evalcond[3]=((IkReal(0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(-0.651000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x731)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x732=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x732));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x732))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x733=IKcos(j4);
IkReal x734=IKsin(j4);
IkReal x735=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((npy)*(sj6)*(x733)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x734)))+(((IkReal(-1.00000000000000))*(cj6)*(x733)*(x735)))+(((IkReal(-1.00000000000000))*(sj6)*(x734)*(x735))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x736=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x736))));
evalcond[3]=((IkReal(-0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.00500000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x736)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x737=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x737));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x737))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x738=IKcos(j4);
IkReal x739=IKsin(j4);
IkReal x740=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((((npy)*(sj6)*(x738)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x739)))+(((IkReal(-1.00000000000000))*(sj6)*(x739)*(x740)))+(((IkReal(-1.00000000000000))*(cj6)*(x738)*(x740))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x741=((npy)*(sj6));
IkReal x742=((IkReal(41.0000000000000))*(sj3));
IkReal x743=((cj6)*(npx));
IkReal x744=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x745=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x742)*(x743)))+(((x741)*(x742))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x742)*(x743)))+(((x741)*(x742)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x741)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x743)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x743)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x741))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x743)))+(((IkReal(-125.000000000000))*(x741))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x742)*(x743)))+(((x741)*(x742))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x742)*(x743)))+(((x741)*(x742)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x741)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x743)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x743)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x741)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x743)))+(((IkReal(-125.000000000000))*(x741)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(x742)*(x743)))+(((x741)*(x742))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x742)*(x743)))+(((x741)*(x742)))))):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(cj6)*(npy)*(x741)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x743)))+(((IkReal(-125.000000000000))*(cj6)*(npy)*(x743)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x741)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x743)))+(((IkReal(-125.000000000000))*(x741)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x746=IKcos(j4);
IkReal x747=IKsin(j4);
IkReal x748=((IkReal(0.328000000000000))*(sj3));
IkReal x749=((IkReal(1.00000000000000))*(cj6));
IkReal x750=((npx)*(sj6));
IkReal x751=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x749)))+(((x747)*(x748)))+(((IkReal(-1.00000000000000))*(x750))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x749)))+(((x746)*(x748)))+(x751));
evalcond[2]=((((x747)*(x751)))+(((x746)*(x750)))+(((cj6)*(npy)*(x746)))+(((IkReal(-1.00000000000000))*(npx)*(x747)*(x749))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x746)*(x749)))+(((x746)*(x751)))+(((IkReal(-1.00000000000000))*(npy)*(x747)*(x749)))+(x748)+(((IkReal(-1.00000000000000))*(x747)*(x750))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x752=((npy)*(sj6));
IkReal x753=((IkReal(5125.00000000000))*(sj3));
IkReal x754=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x753)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x753))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x753)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x753)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x752)*(x754)))+(((IkReal(15625.0000000000))*((x752)*(x752))))+(((IkReal(15625.0000000000))*((x754)*(x754))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x754)))+(((IkReal(-125.000000000000))*(x752))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x753)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x753))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x753)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x753)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x752)*(x754)))+(((IkReal(15625.0000000000))*((x752)*(x752))))+(((IkReal(15625.0000000000))*((x754)*(x754))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x754)))+(((IkReal(-125.000000000000))*(x752)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x753)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x753))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x753)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x753)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x752)*(x754)))+(((IkReal(15625.0000000000))*((x752)*(x752))))+(((IkReal(15625.0000000000))*((x754)*(x754))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x754)))+(((IkReal(-125.000000000000))*(x752)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x755=IKcos(j4);
IkReal x756=IKsin(j4);
IkReal x757=((IkReal(0.328000000000000))*(sj3));
IkReal x758=((IkReal(1.00000000000000))*(cj6));
IkReal x759=((npx)*(sj6));
IkReal x760=((npy)*(sj6));
evalcond[0]=((((x756)*(x757)))+(((IkReal(-1.00000000000000))*(x759)))+(((IkReal(-1.00000000000000))*(npy)*(x758))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x758)))+(((x755)*(x757)))+(x760));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x756)*(x758)))+(((x756)*(x760)))+(((x755)*(x759)))+(((cj6)*(npy)*(x755))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x755)*(x758)))+(((IkReal(-1.00000000000000))*(x756)*(x759)))+(((IkReal(-1.00000000000000))*(npy)*(x756)*(x758)))+(x757)+(((x755)*(x760))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x761=((IkReal(125.000000000000))*(npy));
IkReal x762=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst14)*(((((sj6)*(x762)))+(((cj6)*(x761))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(sj6)*(x761)))+(((cj6)*(x762))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((sj6)*(x762)))+(((cj6)*(x761)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(sj6)*(x761)))+(((cj6)*(x762)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x763=IKcos(j4);
IkReal x764=IKsin(j4);
IkReal x765=((IkReal(0.328000000000000))*(sj3));
IkReal x766=((IkReal(1.00000000000000))*(cj6));
IkReal x767=((npx)*(sj6));
IkReal x768=((npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x766)))+(((IkReal(-1.00000000000000))*(x767)))+(((x764)*(x765))));
evalcond[1]=((((x763)*(x765)))+(((IkReal(-1.00000000000000))*(npx)*(x766)))+(x768));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x764)*(x766)))+(((x763)*(x767)))+(((x764)*(x768)))+(((cj6)*(npy)*(x763))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x763)*(x766)))+(((IkReal(-1.00000000000000))*(npy)*(x764)*(x766)))+(((x763)*(x768)))+(x765)+(((IkReal(-1.00000000000000))*(x764)*(x767))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x769=((IkReal(-0.323000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-0.328000000000000))*(cj3))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.211913000000000))+(pp)+(((IkReal(-0.211888000000000))*(cj3))));
evalcond[2]=x769;
evalcond[3]=x769;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x770=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x770)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x770))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj3)*(sj6)))+(((cj6)*(npx)*(sj3))));
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x771=((IkReal(-0.651000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x772=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.423801000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x772)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=x771;
evalcond[4]=x771;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x772)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x773=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x773));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x773))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x774=IKcos(j4);
IkReal x775=IKsin(j4);
IkReal x776=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x775)))+(((IkReal(-1.00000000000000))*(npx)*(x775)*(x776)))+(((cj6)*(npx)*(x774)))+(((IkReal(-1.00000000000000))*(npy)*(x774)*(x776))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x777=((IkReal(0.00500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x778=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-2.50000000000000e-5))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x778)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=x777;
evalcond[4]=x777;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x778)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x779=IKatan2(((((cj6)*(npy)))+(((npx)*(sj6)))), ((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x779));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x779))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x780=IKcos(j4);
IkReal x781=IKsin(j4);
IkReal x782=((IkReal(1.00000000000000))*(sj6));
evalcond[0]=((((cj6)*(npx)*(x780)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x781)))+(((IkReal(-1.00000000000000))*(npy)*(x780)*(x782)))+(((IkReal(-1.00000000000000))*(npx)*(x781)*(x782))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x783=((npy)*(sj6));
IkReal x784=((IkReal(41.0000000000000))*(sj3));
IkReal x785=((cj6)*(npx));
IkReal x786=((IkReal(125.000000000000))*(npx)*(npy));
IkReal x787=((IkReal(125.000000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((x784)*(x785)))+(((IkReal(-1.00000000000000))*(x783)*(x784))))) != 0)?((IkReal)1/(((((x784)*(x785)))+(((IkReal(-1.00000000000000))*(x783)*(x784)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x783)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x783)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x785)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x785))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x783)))+(((IkReal(-125.000000000000))*(x785))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x784)*(x785)))+(((IkReal(-1.00000000000000))*(x783)*(x784))))) != 0)?((IkReal)1/(((((x784)*(x785)))+(((IkReal(-1.00000000000000))*(x783)*(x784)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x783)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x783)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x785)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x785)))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x783)))+(((IkReal(-125.000000000000))*(x785)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((x784)*(x785)))+(((IkReal(-1.00000000000000))*(x783)*(x784))))) != 0)?((IkReal)1/(((((x784)*(x785)))+(((IkReal(-1.00000000000000))*(x783)*(x784)))))):(IkReal)1.0e30))*(((((IkReal(-125.000000000000))*(cj6)*(npy)*(x783)))+(((IkReal(-125.000000000000))*(npx)*(sj6)*(x783)))+(((IkReal(125.000000000000))*(cj6)*(npy)*(x785)))+(((IkReal(125.000000000000))*(npx)*(sj6)*(x785)))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x783)))+(((IkReal(-125.000000000000))*(x785)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x788=IKcos(j4);
IkReal x789=IKsin(j4);
IkReal x790=((IkReal(0.328000000000000))*(sj3));
IkReal x791=((cj6)*(npx));
IkReal x792=((IkReal(1.00000000000000))*(npy));
IkReal x793=((sj6)*(x788));
IkReal x794=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x794)))+(((IkReal(-1.00000000000000))*(cj6)*(x792)))+(((x789)*(x790))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x788)*(x790)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x791))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x789)*(x792)))+(((npx)*(x793)))+(((cj6)*(npy)*(x788)))+(((x789)*(x791))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x792)*(x793)))+(((x788)*(x791)))+(((IkReal(-1.00000000000000))*(x789)*(x794)))+(x790)+(((IkReal(-1.00000000000000))*(cj6)*(x789)*(x792))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x795=((npy)*(sj6));
IkReal x796=((IkReal(5125.00000000000))*(sj3));
IkReal x797=((cj6)*(npx));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x796)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x796))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x796)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x796)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x795)*(x797)))+(((IkReal(15625.0000000000))*((x795)*(x795))))+(((IkReal(15625.0000000000))*((x797)*(x797))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x795)))+(((IkReal(-125.000000000000))*(x797))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x796)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x796))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x796)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x796)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x795)*(x797)))+(((IkReal(15625.0000000000))*((x795)*(x795))))+(((IkReal(15625.0000000000))*((x797)*(x797))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))))+IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x795)))+(((IkReal(-125.000000000000))*(x797)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x796)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x796))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x796)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x796)))))):(IkReal)1.0e30))*(((((IkReal(-31250.0000000000))*(x795)*(x797)))+(((IkReal(15625.0000000000))*((x795)*(x795))))+(((IkReal(15625.0000000000))*((x797)*(x797))))+(((IkReal(-1681.00000000000))*((sj3)*(sj3))))))), ((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(125.000000000000))*(x795)))+(((IkReal(-125.000000000000))*(x797)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x798=IKcos(j4);
IkReal x799=IKsin(j4);
IkReal x800=((IkReal(0.328000000000000))*(sj3));
IkReal x801=((cj6)*(npx));
IkReal x802=((IkReal(1.00000000000000))*(npy));
IkReal x803=((sj6)*(x798));
IkReal x804=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(x802)))+(((x799)*(x800)))+(((IkReal(-1.00000000000000))*(x804))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x801)))+(((IkReal(-1.00000000000000))*(x798)*(x800)))+(((npy)*(sj6))));
evalcond[2]=((((npx)*(x803)))+(((x799)*(x801)))+(((IkReal(-1.00000000000000))*(sj6)*(x799)*(x802)))+(((cj6)*(npy)*(x798))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x799)*(x804)))+(((x798)*(x801)))+(((IkReal(-1.00000000000000))*(cj6)*(x799)*(x802)))+(x800)+(((IkReal(-1.00000000000000))*(x802)*(x803))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x805=((IkReal(125.000000000000))*(npy));
IkReal x806=((IkReal(125.000000000000))*(npx));
if( IKabs(((gconst15)*(((((cj6)*(x805)))+(((sj6)*(x806))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(cj6)*(x806)))+(((sj6)*(x805))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((cj6)*(x805)))+(((sj6)*(x806)))))), ((gconst15)*(((((IkReal(-1.00000000000000))*(cj6)*(x806)))+(((sj6)*(x805)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x807=IKcos(j4);
IkReal x808=IKsin(j4);
IkReal x809=((IkReal(0.328000000000000))*(sj3));
IkReal x810=((cj6)*(npx));
IkReal x811=((IkReal(1.00000000000000))*(npy));
IkReal x812=((sj6)*(x807));
IkReal x813=((IkReal(1.00000000000000))*(npx)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x813)))+(((x808)*(x809)))+(((IkReal(-1.00000000000000))*(cj6)*(x811))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x807)*(x809)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(x810))));
evalcond[2]=((((x808)*(x810)))+(((IkReal(-1.00000000000000))*(sj6)*(x808)*(x811)))+(((cj6)*(npy)*(x807)))+(((npx)*(x812))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x808)*(x813)))+(((IkReal(-1.00000000000000))*(cj6)*(x808)*(x811)))+(((IkReal(-1.00000000000000))*(x811)*(x812)))+(((x807)*(x810)))+(x809));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x814=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x815=((IkReal(125.000000000000))*(npy));
IkReal x816=((IkReal(0.0243902439024390))*(x814));
IkReal x817=((IkReal(125.000000000000))*(npx));
if( IKabs(((x816)*(((((sj6)*(x817)))+(((cj6)*(x815))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x816)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj6)*(x815)))+(((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x817))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x816)*(((((sj6)*(x817)))+(((cj6)*(x815)))))))+IKsqr(((x816)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj6)*(x815)))+(((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x817)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x816)*(((((sj6)*(x817)))+(((cj6)*(x815)))))), ((x816)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj6)*(x815)))+(((IkReal(-40.3750000000000))*(sj5)))+(((IkReal(-41.0000000000000))*(cj3)*(sj5)))+(((cj6)*(x817)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x818=IKcos(j4);
IkReal x819=IKsin(j4);
IkReal x820=((npy)*(sj6));
IkReal x821=((IkReal(1.00000000000000))*(npx));
IkReal x822=((IkReal(0.328000000000000))*(cj3));
IkReal x823=((IkReal(0.328000000000000))*(sj3));
IkReal x824=((cj6)*(x818));
IkReal x825=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x826=((sj5)*(x818));
IkReal x827=((cj5)*(x819));
IkReal x828=((cj5)*(x818));
evalcond[0]=((((IkReal(-1.00000000000000))*(x825)))+(((x819)*(x823)))+(((IkReal(-1.00000000000000))*(sj6)*(x821))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x823)*(x826)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((cj5)*(x822))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x821)))+(((IkReal(0.323000000000000))*(sj5)))+(((sj5)*(x822)))+(((x823)*(x828)))+(x820));
evalcond[3]=((((x820)*(x827)))+(((npz)*(sj5)*(x819)))+(((IkReal(-1.00000000000000))*(cj6)*(x821)*(x827)))+(((npx)*(sj6)*(x818)))+(((npy)*(x824))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj6)*(x819)*(x821)))+(((x820)*(x828)))+(((IkReal(-1.00000000000000))*(x819)*(x825)))+(((IkReal(-1.00000000000000))*(cj5)*(x821)*(x824)))+(((npz)*(x826)))+(x823));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x829=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x830=((IkReal(0.0243902439024390))*(x829));
if( IKabs(((x830)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x830)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x830)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))))+IKsqr(((x830)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x830)*(((((IkReal(125.000000000000))*(cj6)*(npy)))+(((IkReal(125.000000000000))*(npx)*(sj6)))))), ((x830)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(40.3750000000000))*(cj5)))+(((IkReal(-125.000000000000))*(npz)))+(((IkReal(41.0000000000000))*(cj3)*(cj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x831=IKcos(j4);
IkReal x832=IKsin(j4);
IkReal x833=((npy)*(sj6));
IkReal x834=((IkReal(1.00000000000000))*(npx));
IkReal x835=((IkReal(0.328000000000000))*(cj3));
IkReal x836=((IkReal(0.328000000000000))*(sj3));
IkReal x837=((cj6)*(x831));
IkReal x838=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x839=((sj5)*(x831));
IkReal x840=((cj5)*(x832));
IkReal x841=((cj5)*(x831));
evalcond[0]=((((x832)*(x836)))+(((IkReal(-1.00000000000000))*(x838)))+(((IkReal(-1.00000000000000))*(sj6)*(x834))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x836)*(x839)))+(((IkReal(-1.00000000000000))*(npz)))+(((cj5)*(x835)))+(((IkReal(0.323000000000000))*(cj5))));
evalcond[2]=((((IkReal(0.323000000000000))*(sj5)))+(((x836)*(x841)))+(((sj5)*(x835)))+(((IkReal(-1.00000000000000))*(cj6)*(x834)))+(x833));
evalcond[3]=((((x833)*(x840)))+(((npz)*(sj5)*(x832)))+(((npy)*(x837)))+(((npx)*(sj6)*(x831)))+(((IkReal(-1.00000000000000))*(cj6)*(x834)*(x840))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x832)*(x838)))+(((IkReal(-1.00000000000000))*(sj6)*(x832)*(x834)))+(((IkReal(-1.00000000000000))*(cj5)*(x834)*(x837)))+(((x833)*(x841)))+(((npz)*(x839)))+(x836));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x842=((IkReal(125.000000000000))*(cj6));
IkReal x843=((cj5)*(sj6));
IkReal x844=((npz)*(sj5));
IkReal x845=((IkReal(125.000000000000))*(npx));
IkReal x846=((cj5)*(npy));
IkReal x847=((IkReal(41.0000000000000))*(sj3));
if( IKabs(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x845)))+(((npy)*(x842))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((cj6)*(npy)*(x847)))+(((npx)*(sj6)*(x847))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x847)))+(((npx)*(sj6)*(x847)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x842)*(x843)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(sj6)*(x844)*(x845)))+(((x842)*(x843)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npy)*(x842)*(x844)))+(((cj6)*(npx)*(x842)*(x846)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x843)*(x845))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x845)))+(((npy)*(x842)))))))+IKsqr(((((IKabs(((((cj6)*(npy)*(x847)))+(((npx)*(sj6)*(x847))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x847)))+(((npx)*(sj6)*(x847)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x842)*(x843)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(sj6)*(x844)*(x845)))+(((x842)*(x843)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npy)*(x842)*(x844)))+(((cj6)*(npx)*(x842)*(x846)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x843)*(x845)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0243902439024390))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x845)))+(((npy)*(x842)))))), ((((IKabs(((((cj6)*(npy)*(x847)))+(((npx)*(sj6)*(x847))))) != 0)?((IkReal)1/(((((cj6)*(npy)*(x847)))+(((npx)*(sj6)*(x847)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x842)*(x843)*((npy)*(npy))))+(((IkReal(-1.00000000000000))*(sj6)*(x844)*(x845)))+(((x842)*(x843)*((npx)*(npx))))+(((IkReal(-1.00000000000000))*(npy)*(x842)*(x844)))+(((cj6)*(npx)*(x842)*(x846)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x843)*(x845)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x848=IKcos(j4);
IkReal x849=IKsin(j4);
IkReal x850=((npy)*(sj6));
IkReal x851=((IkReal(1.00000000000000))*(npx));
IkReal x852=((IkReal(0.328000000000000))*(cj3));
IkReal x853=((IkReal(0.328000000000000))*(sj3));
IkReal x854=((cj6)*(x848));
IkReal x855=((IkReal(1.00000000000000))*(cj6)*(npy));
IkReal x856=((sj5)*(x848));
IkReal x857=((cj5)*(x849));
IkReal x858=((cj5)*(x848));
evalcond[0]=((((IkReal(-1.00000000000000))*(x855)))+(((IkReal(-1.00000000000000))*(sj6)*(x851)))+(((x849)*(x853))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x853)*(x856)))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.323000000000000))*(cj5)))+(((cj5)*(x852))));
evalcond[2]=((((sj5)*(x852)))+(((IkReal(-1.00000000000000))*(cj6)*(x851)))+(((IkReal(0.323000000000000))*(sj5)))+(x850)+(((x853)*(x858))));
evalcond[3]=((((x850)*(x857)))+(((IkReal(-1.00000000000000))*(cj6)*(x851)*(x857)))+(((npz)*(sj5)*(x849)))+(((npx)*(sj6)*(x848)))+(((npy)*(x854))));
evalcond[4]=((((x850)*(x858)))+(((IkReal(-1.00000000000000))*(x849)*(x855)))+(((IkReal(-1.00000000000000))*(cj5)*(x851)*(x854)))+(x853)+(((IkReal(-1.00000000000000))*(sj6)*(x849)*(x851)))+(((npz)*(x856))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x63=((IkReal(1.00000000000000))*(sj6));
IkReal x64=((IkReal(1.00000000000000))*(sj5));
IkReal x65=((IkReal(1.00000000000000))*(sj3));
IkReal x66=((IkReal(1.00000000000000))*(cj3));
IkReal x67=((IkReal(1.00000000000000))*(cj6));
IkReal x68=((IkReal(1.00000000000000))*(sj4));
IkReal x69=((IkReal(-1.00000000000000))*(sj4));
IkReal x70=((IkReal(-1.00000000000000))*(sj5));
IkReal x71=((((IkReal(-1.00000000000000))*(r01)*(x63)))+(((cj6)*(r00))));
IkReal x72=((((IkReal(-1.00000000000000))*(r11)*(x63)))+(((cj6)*(r10))));
IkReal x73=((((IkReal(-1.00000000000000))*(r21)*(x63)))+(((cj6)*(r20))));
IkReal x74=((cj5)*(x71));
IkReal x75=((cj5)*(x72));
IkReal x76=((cj5)*(x73));
IkReal x77=((((IkReal(-1.00000000000000))*(r01)*(x67)))+(((IkReal(-1.00000000000000))*(r00)*(x63))));
IkReal x78=((((IkReal(-1.00000000000000))*(r10)*(x63)))+(((IkReal(-1.00000000000000))*(r11)*(x67))));
IkReal x79=((((IkReal(-1.00000000000000))*(r21)*(x67)))+(((IkReal(-1.00000000000000))*(r20)*(x63))));
IkReal x80=((((sj5)*(x71)))+(((cj5)*(r02))));
IkReal x81=((((cj5)*(r12)))+(((sj5)*(x72))));
IkReal x82=((((IkReal(-1.00000000000000))*(r12)*(x64)))+(x75));
IkReal x83=((x76)+(((IkReal(-1.00000000000000))*(r22)*(x64))));
IkReal x84=((((cj5)*(r22)))+(((sj5)*(x73))));
IkReal x85=((((x69)*(x77)))+(((cj4)*(((((r02)*(x70)))+(x74))))));
new_r00=((((cj3)*(x85)))+(((IkReal(-1.00000000000000))*(x65)*(x80))));
new_r01=((((cj4)*(x77)))+(((sj4)*(((((IkReal(-1.00000000000000))*(r02)*(x64)))+(x74))))));
new_r02=((((IkReal(-1.00000000000000))*(x65)*(x85)))+(((IkReal(-1.00000000000000))*(x66)*(x80))));
new_r10=((((IkReal(-1.00000000000000))*(x65)*(x81)))+(((cj3)*(((((x69)*(x78)))+(((cj4)*(((x75)+(((r12)*(x70))))))))))));
new_r11=((((cj4)*(x78)))+(((sj4)*(x82))));
new_r12=((((IkReal(-1.00000000000000))*(x65)*(((((cj4)*(x82)))+(((IkReal(-1.00000000000000))*(x68)*(x78)))))))+(((IkReal(-1.00000000000000))*(x66)*(x81))));
new_r20=((((IkReal(-1.00000000000000))*(x65)*(x84)))+(((cj3)*(((((cj4)*(((((r22)*(x70)))+(x76)))))+(((x69)*(x79))))))));
new_r21=((((cj4)*(x79)))+(((sj4)*(x83))));
new_r22=((((IkReal(-1.00000000000000))*(x66)*(x84)))+(((IkReal(-1.00000000000000))*(x65)*(((((cj4)*(x83)))+(((IkReal(-1.00000000000000))*(x68)*(x79))))))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj1)*((new_r12)*(new_r12))))+(((cj1)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j2))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst31)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst31)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst31)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst31)*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x86=IKcos(j0);
IkReal x87=IKsin(j0);
IkReal x88=((IkReal(1.00000000000000))*(x87));
evalcond[0]=((((new_r12)*(x86)))+(((IkReal(-1.00000000000000))*(new_r02)*(x88))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r12)*(x87)))+(((new_r02)*(x86))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x88)))+(((new_r10)*(x86))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x88)))+(((new_r11)*(x86)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r01)*(x86)))+(((new_r11)*(x87))));
evalcond[5]=((((new_r00)*(x86)))+(((new_r10)*(x87))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst30)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst30)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst30)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst30)*(new_r11)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x89=IKcos(j0);
IkReal x90=IKsin(j0);
IkReal x91=((IkReal(1.00000000000000))*(x90));
evalcond[0]=((((new_r12)*(x89)))+(((IkReal(-1.00000000000000))*(new_r02)*(x91))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x89)))+(((new_r12)*(x90))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x91)))+(((new_r10)*(x89))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x91)))+(((new_r11)*(x89)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r01)*(x89)))+(((new_r11)*(x90))));
evalcond[5]=((((new_r00)*(x89)))+(((new_r10)*(x90))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((IkReal(-1.00000000000000))*(IKcos(j2)))));
evalcond[1]=((IKsin(j2))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
gconst35=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst35)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst35)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst35)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst35)*(new_r10)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x92=IKcos(j0);
IkReal x93=IKsin(j0);
IkReal x94=((IkReal(1.00000000000000))*(x93));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x94)))+(((new_r12)*(x92))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x92)))+(((new_r12)*(x93))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x94)))+(((new_r10)*(x92))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x94)))+(((new_r11)*(x92)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r01)*(x92)))+(((new_r11)*(x93))));
evalcond[5]=((((new_r00)*(x92)))+(((new_r10)*(x93))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((gconst34)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst34)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst34)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst34)*(new_r11)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x95=IKcos(j0);
IkReal x96=IKsin(j0);
IkReal x97=((IkReal(1.00000000000000))*(x96));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x97)))+(((new_r12)*(x95))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x95)))+(((new_r12)*(x96))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(new_r00)*(x97)))+(((new_r10)*(x95))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x97)))+(((new_r11)*(x95)))+(((IkReal(-1.00000000000000))*(cj2))));
evalcond[4]=((((new_r01)*(x95)))+(((new_r11)*(x96))));
evalcond[5]=((((new_r00)*(x95)))+(((new_r10)*(x96))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x98=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x98));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x98))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x99=IKsin(j2);
IkReal x100=((IkReal(1.00000000000000))*(sj0));
IkReal x101=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x100)))+(((IkReal(-1.00000000000000))*(x99)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x100)))+(((IkReal(-1.00000000000000))*(x101)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x99)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x101)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x102=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x102;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x102;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x103=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x103));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x103))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x104=IKcos(j2);
IkReal x105=((IkReal(1.00000000000000))*(sj0));
IkReal x106=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x105)))+(((IkReal(-1.00000000000000))*(x106)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x105)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(x104))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x106)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x104)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x107=((gconst23)*(new_r22)*(sj1));
if( IKabs(((new_r12)*(x107))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x107))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x107)), ((new_r02)*(x107)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x108=IKcos(j0);
IkReal x109=IKsin(j0);
IkReal x110=((IkReal(1.00000000000000))*(cj1));
IkReal x111=((IkReal(1.00000000000000))*(sj1));
IkReal x112=((new_r12)*(x109));
IkReal x113=((new_r02)*(x108));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x109)))+(((new_r12)*(x108))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x111)))+(x113)+(x112));
evalcond[2]=((((cj1)*(x113)))+(((cj1)*(x112)))+(((IkReal(-1.00000000000000))*(new_r22)*(x111))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x109)*(x111)))+(((IkReal(-1.00000000000000))*(new_r00)*(x108)*(x111)))+(((IkReal(-1.00000000000000))*(new_r20)*(x110))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x108)*(x111)))+(((IkReal(-1.00000000000000))*(new_r11)*(x109)*(x111)))+(((IkReal(-1.00000000000000))*(new_r21)*(x110))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x111)*(x113)))+(((IkReal(-1.00000000000000))*(x111)*(x112)))+(((IkReal(-1.00000000000000))*(new_r22)*(x110))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x114=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x115=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x114;
evalcond[5]=x114;
evalcond[6]=x115;
evalcond[7]=x115;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x116=IKsin(j2);
IkReal x117=((IkReal(1.00000000000000))*(sj0));
IkReal x118=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x117)))+(((IkReal(-1.00000000000000))*(x116)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x117)))+(((IkReal(-1.00000000000000))*(x118)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x116)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x118)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x119=((IkReal(1.00000000000000))+(new_r22));
IkReal x120=((new_r12)*(sj0));
IkReal x121=((cj0)*(new_r02));
IkReal x122=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x119;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x122;
evalcond[5]=x122;
evalcond[6]=((x120)+(x121));
evalcond[7]=((((IkReal(-1.00000000000000))*(x120)))+(((IkReal(-1.00000000000000))*(x121))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x119;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x123=IKcos(j2);
IkReal x124=((IkReal(1.00000000000000))*(sj0));
IkReal x125=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x124)))+(((IkReal(-1.00000000000000))*(x125)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x124)))+(((IkReal(-1.00000000000000))*(x123)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x125)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x123)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x126=IKsin(j2);
IkReal x127=IKcos(j2);
IkReal x128=((IkReal(1.00000000000000))*(sj0));
IkReal x129=((IkReal(1.00000000000000))*(sj1));
IkReal x130=((cj0)*(new_r01));
IkReal x131=((cj0)*(new_r00));
IkReal x132=((new_r11)*(sj0));
IkReal x133=((new_r10)*(sj0));
IkReal x134=((IkReal(1.00000000000000))*(x127));
evalcond[0]=((new_r20)+(((sj1)*(x127))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x126)*(x129)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x128)))+(((IkReal(-1.00000000000000))*(x126)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x128)))+(((IkReal(-1.00000000000000))*(x134)))+(((cj0)*(new_r11))));
evalcond[4]=((((cj1)*(x126)))+(x130)+(x132));
evalcond[5]=((x131)+(x133)+(((IkReal(-1.00000000000000))*(cj1)*(x134))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x129)))+(x126)+(((cj1)*(x130)))+(((cj1)*(x132))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x134)))+(((IkReal(-1.00000000000000))*(new_r20)*(x129)))+(((cj1)*(x131)))+(((cj1)*(x133))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x135=IKsin(j2);
IkReal x136=IKcos(j2);
IkReal x137=((IkReal(1.00000000000000))*(sj0));
IkReal x138=((IkReal(1.00000000000000))*(sj1));
IkReal x139=((cj0)*(new_r01));
IkReal x140=((cj0)*(new_r00));
IkReal x141=((new_r11)*(sj0));
IkReal x142=((new_r10)*(sj0));
IkReal x143=((IkReal(1.00000000000000))*(x136));
evalcond[0]=((new_r20)+(((sj1)*(x136))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x135)*(x138)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x137)))+(((IkReal(-1.00000000000000))*(x135)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(new_r01)*(x137)))+(((cj0)*(new_r11))));
evalcond[4]=((x141)+(x139)+(((cj1)*(x135))));
evalcond[5]=((x140)+(x142)+(((IkReal(-1.00000000000000))*(cj1)*(x143))));
evalcond[6]=((x135)+(((IkReal(-1.00000000000000))*(new_r21)*(x138)))+(((cj1)*(x141)))+(((cj1)*(x139))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(new_r20)*(x138)))+(((cj1)*(x142)))+(((cj1)*(x140))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst25)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst25)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst25)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst25)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x144=IKsin(j2);
IkReal x145=IKcos(j2);
IkReal x146=((IkReal(1.00000000000000))*(sj0));
IkReal x147=((IkReal(1.00000000000000))*(sj1));
IkReal x148=((cj0)*(new_r01));
IkReal x149=((cj0)*(new_r00));
IkReal x150=((new_r11)*(sj0));
IkReal x151=((new_r10)*(sj0));
IkReal x152=((IkReal(1.00000000000000))*(x145));
evalcond[0]=((((sj1)*(x145)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x144)*(x147)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x144)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x146))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x146)))+(((IkReal(-1.00000000000000))*(x152)))+(((cj0)*(new_r11))));
evalcond[4]=((x150)+(x148)+(((cj1)*(x144))));
evalcond[5]=((x151)+(x149)+(((IkReal(-1.00000000000000))*(cj1)*(x152))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x147)))+(x144)+(((cj1)*(x150)))+(((cj1)*(x148))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x152)))+(((IkReal(-1.00000000000000))*(new_r20)*(x147)))+(((cj1)*(x151)))+(((cj1)*(x149))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x153=((gconst22)*(sj1));
if( IKabs(((new_r12)*(x153))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x153))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x153)), ((new_r02)*(x153)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x154=IKcos(j0);
IkReal x155=IKsin(j0);
IkReal x156=((IkReal(1.00000000000000))*(cj1));
IkReal x157=((IkReal(1.00000000000000))*(sj1));
IkReal x158=((new_r12)*(x155));
IkReal x159=((new_r02)*(x154));
evalcond[0]=((((new_r12)*(x154)))+(((IkReal(-1.00000000000000))*(new_r02)*(x155))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x157)))+(x159)+(x158));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x157)))+(((cj1)*(x159)))+(((cj1)*(x158))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x155)*(x157)))+(((IkReal(-1.00000000000000))*(new_r20)*(x156)))+(((IkReal(-1.00000000000000))*(new_r00)*(x154)*(x157))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x156)))+(((IkReal(-1.00000000000000))*(new_r11)*(x155)*(x157)))+(((IkReal(-1.00000000000000))*(new_r01)*(x154)*(x157))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x157)*(x158)))+(((IkReal(-1.00000000000000))*(x157)*(x159)))+(((IkReal(-1.00000000000000))*(new_r22)*(x156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x160=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x161=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x160;
evalcond[5]=x160;
evalcond[6]=x161;
evalcond[7]=x161;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x162=IKsin(j2);
IkReal x163=((IkReal(1.00000000000000))*(sj0));
IkReal x164=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x163)))+(((IkReal(-1.00000000000000))*(x162)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x164)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x163))));
evalcond[2]=((((new_r11)*(sj0)))+(x162)+(((cj0)*(new_r01))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x164)))+(((new_r10)*(sj0)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x165=((IkReal(1.00000000000000))+(new_r22));
IkReal x166=((new_r12)*(sj0));
IkReal x167=((cj0)*(new_r02));
IkReal x168=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x165;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x168;
evalcond[5]=x168;
evalcond[6]=((x166)+(x167));
evalcond[7]=((((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(x167))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x165;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x169=IKcos(j2);
IkReal x170=((IkReal(1.00000000000000))*(sj0));
IkReal x171=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x171)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x170))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x169)))+(((IkReal(-1.00000000000000))*(new_r01)*(x170)))+(((cj0)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x171)))+(((new_r11)*(sj0)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x169)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(new_r00)*(sj0)))+(((cj0)*(new_r10)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x172=IKsin(j2);
IkReal x173=IKcos(j2);
IkReal x174=((IkReal(1.00000000000000))*(sj0));
IkReal x175=((IkReal(1.00000000000000))*(sj1));
IkReal x176=((cj0)*(new_r01));
IkReal x177=((cj0)*(new_r00));
IkReal x178=((new_r11)*(sj0));
IkReal x179=((new_r10)*(sj0));
IkReal x180=((IkReal(1.00000000000000))*(x173));
evalcond[0]=((((sj1)*(x173)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x172)*(x175))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x172)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x174))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x180)))+(((IkReal(-1.00000000000000))*(new_r01)*(x174)))+(((cj0)*(new_r11))));
evalcond[4]=((x178)+(x176)+(((cj1)*(x172))));
evalcond[5]=((x179)+(x177)+(((IkReal(-1.00000000000000))*(cj1)*(x180))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x175)))+(x172)+(((cj1)*(x176)))+(((cj1)*(x178))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x175)))+(((IkReal(-1.00000000000000))*(x180)))+(((cj1)*(x177)))+(((cj1)*(x179))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(new_r01)*(sj0)))+(((cj0)*(new_r11)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x181=IKsin(j2);
IkReal x182=IKcos(j2);
IkReal x183=((IkReal(1.00000000000000))*(sj0));
IkReal x184=((IkReal(1.00000000000000))*(sj1));
IkReal x185=((cj0)*(new_r01));
IkReal x186=((cj0)*(new_r00));
IkReal x187=((new_r11)*(sj0));
IkReal x188=((new_r10)*(sj0));
IkReal x189=((IkReal(1.00000000000000))*(x182));
evalcond[0]=((((sj1)*(x182)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x181)*(x184))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x181)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x183))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(new_r01)*(x183)))+(((cj0)*(new_r11))));
evalcond[4]=((x185)+(x187)+(((cj1)*(x181))));
evalcond[5]=((x186)+(x188)+(((IkReal(-1.00000000000000))*(cj1)*(x189))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x184)))+(x181)+(((cj1)*(x187)))+(((cj1)*(x185))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(new_r20)*(x184)))+(((cj1)*(x186)))+(((cj1)*(x188))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst25)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst25)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst25)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst25)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x190=IKsin(j2);
IkReal x191=IKcos(j2);
IkReal x192=((IkReal(1.00000000000000))*(sj0));
IkReal x193=((IkReal(1.00000000000000))*(sj1));
IkReal x194=((cj0)*(new_r01));
IkReal x195=((cj0)*(new_r00));
IkReal x196=((new_r11)*(sj0));
IkReal x197=((new_r10)*(sj0));
IkReal x198=((IkReal(1.00000000000000))*(x191));
evalcond[0]=((((sj1)*(x191)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x190)*(x193)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r00)*(x192)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r01)*(x192)))+(((cj0)*(new_r11))));
evalcond[4]=((x196)+(x194)+(((cj1)*(x190))));
evalcond[5]=((x197)+(x195)+(((IkReal(-1.00000000000000))*(cj1)*(x198))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x193)))+(x190)+(((cj1)*(x196)))+(((cj1)*(x194))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r20)*(x193)))+(((cj1)*(x195)))+(((cj1)*(x197))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst24)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst24)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst24)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst24)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((((sj1)*(IKcos(j2))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r11)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r01)*(new_r02))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x199=((cj1)*(gconst27)*(sj2));
if( IKabs(((new_r12)*(x199))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x199))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x199)), ((new_r02)*(x199)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x200=IKcos(j0);
IkReal x201=IKsin(j0);
IkReal x202=((IkReal(1.00000000000000))*(cj2));
IkReal x203=((IkReal(1.00000000000000))*(sj1));
IkReal x204=((IkReal(1.00000000000000))*(cj1));
IkReal x205=((new_r10)*(x201));
IkReal x206=((new_r01)*(x200));
IkReal x207=((new_r00)*(x200));
IkReal x208=((IkReal(1.00000000000000))*(x201));
IkReal x209=((new_r11)*(x201));
IkReal x210=((new_r12)*(x201));
IkReal x211=((new_r02)*(x200));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x208)))+(((new_r12)*(x200))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x203)))+(x210)+(x211));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x208)))+(((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x200))));
evalcond[3]=((((new_r11)*(x200)))+(((IkReal(-1.00000000000000))*(x202)))+(((IkReal(-1.00000000000000))*(new_r01)*(x208))));
evalcond[4]=((((cj1)*(sj2)))+(x206)+(x209));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x202)))+(x207)+(x205));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x203)))+(((cj1)*(x210)))+(((cj1)*(x211))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x203)*(x205)))+(((IkReal(-1.00000000000000))*(x203)*(x207)))+(((IkReal(-1.00000000000000))*(new_r20)*(x204))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x204)))+(((IkReal(-1.00000000000000))*(x203)*(x206)))+(((IkReal(-1.00000000000000))*(x203)*(x209))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x203)))+(sj2)+(((cj1)*(x206)))+(((cj1)*(x209))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x204)))+(((IkReal(-1.00000000000000))*(x203)*(x210)))+(((IkReal(-1.00000000000000))*(x203)*(x211))));
evalcond[11]=((((cj1)*(x207)))+(((cj1)*(x205)))+(((IkReal(-1.00000000000000))*(new_r20)*(x203)))+(((IkReal(-1.00000000000000))*(x202))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x212=((gconst26)*(sj1));
if( IKabs(((new_r12)*(x212))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x212))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x212)), ((new_r02)*(x212)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x213=IKcos(j0);
IkReal x214=IKsin(j0);
IkReal x215=((IkReal(1.00000000000000))*(cj2));
IkReal x216=((IkReal(1.00000000000000))*(sj1));
IkReal x217=((IkReal(1.00000000000000))*(cj1));
IkReal x218=((new_r10)*(x214));
IkReal x219=((new_r01)*(x213));
IkReal x220=((new_r00)*(x213));
IkReal x221=((IkReal(1.00000000000000))*(x214));
IkReal x222=((new_r11)*(x214));
IkReal x223=((new_r12)*(x214));
IkReal x224=((new_r02)*(x213));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x221)))+(((new_r12)*(x213))));
evalcond[1]=((x223)+(x224)+(((IkReal(-1.00000000000000))*(x216))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x213)))+(((IkReal(-1.00000000000000))*(new_r00)*(x221))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x221)))+(((IkReal(-1.00000000000000))*(x215)))+(((new_r11)*(x213))));
evalcond[4]=((((cj1)*(sj2)))+(x219)+(x222));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x215)))+(x218)+(x220));
evalcond[6]=((((cj1)*(x224)))+(((cj1)*(x223)))+(((IkReal(-1.00000000000000))*(new_r22)*(x216))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x216)*(x220)))+(((IkReal(-1.00000000000000))*(new_r20)*(x217)))+(((IkReal(-1.00000000000000))*(x216)*(x218))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x216)*(x222)))+(((IkReal(-1.00000000000000))*(new_r21)*(x217)))+(((IkReal(-1.00000000000000))*(x216)*(x219))));
evalcond[9]=((sj2)+(((cj1)*(x222)))+(((IkReal(-1.00000000000000))*(new_r21)*(x216)))+(((cj1)*(x219))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x216)*(x224)))+(((IkReal(-1.00000000000000))*(x216)*(x223)))+(((IkReal(-1.00000000000000))*(new_r22)*(x217))));
evalcond[11]=((((cj1)*(x220)))+(((IkReal(-1.00000000000000))*(new_r20)*(x216)))+(((cj1)*(x218)))+(((IkReal(-1.00000000000000))*(x215))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - cob3-8 (3794b16394c7860fe533fc8ca79fdca7)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
